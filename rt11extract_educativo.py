#!/usr/bin/env python3
"""
RT-11 Disk Image Extractor - VERSI√ìN EDUCATIVA
===============================================

Esta es una versi√≥n simplificada y educativa del extractor RT-11,
especialmente dise√±ada para ense√±ar el sistema RADIX-50 a estudiantes
de Organizaci√≥n de Computadoras.

RADIX-50: ¬øQu√© es y por qu√© es importante?
==========================================

El RADIX-50 es un sistema de codificaci√≥n usado en computadoras PDP-11
para almacenar nombres de archivos de forma compacta. Fue necesario porque:

1. La memoria era MUY limitada en los a√±os 70
2. Necesitaban almacenar nombres de archivos en pocas palabras de 16 bits
3. Solo necesitaban un conjunto limitado de caracteres

¬øC√≥mo funciona RADIX-50?
========================

Imaginen que tenemos solo 40 caracteres permitidos:
- Espacio (posici√≥n 0)
- A-Z (posiciones 1-26) 
- $ . ? (posiciones 27-29)
- 0-9 (posiciones 30-39)

Con estos 40 caracteres, podemos codificar 3 caracteres en una palabra de 16 bits:
- Cada car√°cter ocupa log‚ÇÇ(40) ‚âà 5.3 bits
- 3 caracteres √ó 5.3 bits ‚âà 16 bits ¬°Perfecto!

La f√≥rmula es: valor = char1√ó40¬≤ + char2√ó40¬π + char3√ó40‚Å∞
"""

import struct
import sys
import os
from pathlib import Path
from typing import Optional, List, Tuple

# =============================================================================
# PARTE 1: DEFINICI√ìN DEL CONJUNTO DE CARACTERES RADIX-50
# =============================================================================

# Los 40 caracteres permitidos en RADIX-50 (¬°EXACTAMENTE 40!)
# Posici√≥n 0: espacio, posiciones 1-26: A-Z, etc.
CARACTERES_RADIX50 = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ$.?0123456789'

print("CONJUNTO DE CARACTERES RADIX-50:")
print("================================")
for i, char in enumerate(CARACTERES_RADIX50):
    if char == ' ':
        print(f"Posici√≥n {i:2d}: ESPACIO")
    else:
        print(f"Posici√≥n {i:2d}: '{char}'")
print(f"\nTotal de caracteres: {len(CARACTERES_RADIX50)}")
print()

# =============================================================================
# PARTE 2: FUNCIONES DE CONVERSI√ìN RADIX-50 (EXPLICADAS PASO A PASO)
# =============================================================================

def radix50_decodificar_paso_a_paso(numero_16bits: int) -> str:
    """
    Decodifica un n√∫mero de 16 bits a 3 caracteres RADIX-50
    
    EXPLICACI√ìN PASO A PASO:
    ========================
    
    Ejemplo: si numero_16bits = 1234
    
    Paso 1: Obtener el tercer car√°cter (el menos significativo)
    posicion_char3 = 1234 % 40 = 34 ‚Üí car√°cter '4'
    
    Paso 2: "Quitar" el tercer car√°cter dividiendo por 40
    resto = 1234 // 40 = 30
    
    Paso 3: Obtener el segundo car√°cter
    posicion_char2 = 30 % 40 = 30 ‚Üí car√°cter '0'
    
    Paso 4: "Quitar" el segundo car√°cter dividiendo por 40
    resto = 30 // 40 = 0
    
    Paso 5: Obtener el primer car√°cter
    posicion_char1 = 0 % 40 = 0 ‚Üí car√°cter ' ' (espacio)
    
    Resultado: " 04"
    """
    
    print(f"\nüîç DECODIFICANDO RADIX-50: {numero_16bits} (0x{numero_16bits:04X})")
    print("=" * 50)
    
    # Caso especial: si es 0, son 3 espacios
    if numero_16bits == 0:
        print("N√∫mero es 0 ‚Üí tres espacios")
        return "   "
    
    # Verificar que el n√∫mero est√° en el rango v√°lido
    if numero_16bits >= 40**3:  # 40¬≥ = 64000
        print(f"‚ö†Ô∏è  N√öMERO DEMASIADO GRANDE: {numero_16bits} >= {40**3}")
        return "???"
    
    resultado = ""
    numero_temporal = numero_16bits
    
    # Decodificar de derecha a izquierda (menos significativo a m√°s significativo)
    for posicion in [3, 2, 1]:  # Tercer, segundo, primer car√°cter
        posicion_caracter = numero_temporal % 40
        numero_temporal = numero_temporal // 40
        
        print(f"Paso {4-posicion}: Car√°cter #{posicion}")
        print(f"  {numero_temporal * 40 + posicion_caracter} % 40 = {posicion_caracter}")
        
        if posicion_caracter >= len(CARACTERES_RADIX50):
            print(f"  ‚ö†Ô∏è  POSICI√ìN INV√ÅLIDA: {posicion_caracter}")
            caracter = "?"
        else:
            caracter = CARACTERES_RADIX50[posicion_caracter]
            if caracter == ' ':
                print(f"  Posici√≥n {posicion_caracter} ‚Üí ESPACIO")
            else:
                print(f"  Posici√≥n {posicion_caracter} ‚Üí '{caracter}'")
        
        resultado = caracter + resultado  # Insertar al principio
        print(f"  Resultado parcial: '{resultado}'")
        print(f"  N√∫mero restante: {numero_temporal}")
        print()
    
    print(f"‚úÖ RESULTADO FINAL: '{resultado}'")
    return resultado


def radix50_codificar_paso_a_paso(texto: str) -> int:
    """
    Codifica hasta 3 caracteres de texto en un n√∫mero de 16 bits RADIX-50
    
    EXPLICACI√ìN PASO A PASO:
    ========================
    
    Ejemplo: si texto = "ABC"
    
    Paso 1: Convertir a may√∫sculas y ajustar a 3 caracteres
    "ABC" ‚Üí "ABC" (ya tiene 3 caracteres)
    
    Paso 2: Encontrar la posici√≥n de cada car√°cter
    'A' ‚Üí posici√≥n 1
    'B' ‚Üí posici√≥n 2  
    'C' ‚Üí posici√≥n 3
    
    Paso 3: Aplicar la f√≥rmula RADIX-50
    resultado = 1√ó40¬≤ + 2√ó40¬π + 3√ó40‚Å∞
    resultado = 1√ó1600 + 2√ó40 + 3√ó1
    resultado = 1600 + 80 + 3 = 1683
    """
    
    print(f"\nüîß CODIFICANDO A RADIX-50: '{texto}'")
    print("=" * 40)
    
    # Paso 1: Normalizar el texto
    texto_normalizado = texto.upper().ljust(3)[:3]  # May√∫sculas, exactamente 3 chars
    print(f"Texto normalizado: '{texto_normalizado}'")
    
    resultado = 0
    
    # Paso 2: Procesar cada car√°cter
    for i, caracter in enumerate(texto_normalizado):
        print(f"\nPaso {i+1}: Procesando car√°cter '{caracter}' (posici√≥n {i+1})")
        
        # Encontrar la posici√≥n del car√°cter en RADIX-50
        try:
            posicion = CARACTERES_RADIX50.index(caracter)
            print(f"  '{caracter}' est√° en posici√≥n {posicion} del conjunto RADIX-50")
        except ValueError:
            print(f"  ‚ö†Ô∏è  '{caracter}' NO EST√Å en el conjunto RADIX-50, usando espacio")
            posicion = 0  # Usar espacio para caracteres inv√°lidos
        
        # Calcular la contribuci√≥n de este car√°cter
        potencia = 40 ** (2 - i)  # 40¬≤, 40¬π, 40‚Å∞
        contribucion = posicion * potencia
        
        print(f"  Contribuci√≥n: {posicion} √ó 40^{2-i} = {posicion} √ó {potencia} = {contribucion}")
        
        resultado += contribucion
        print(f"  Resultado acumulado: {resultado}")
    
    print(f"\n‚úÖ RESULTADO FINAL: {resultado} (0x{resultado:04X})")
    return resultado


def decodificar_nombre_archivo_rt11(palabra1: int, palabra2: int, palabra3: int) -> Tuple[str, str]:
    """
    Decodifica un nombre de archivo RT-11 completo desde 3 palabras RADIX-50
    
    EXPLICACI√ìN DEL FORMATO RT-11:
    ==============================
    
    Los nombres de archivo RT-11 se almacenan en 3 palabras de 16 bits:
    
    Palabra 1: Primeros 3 caracteres del nombre (ej: "FIL")
    Palabra 2: Siguientes 3 caracteres del nombre (ej: "E  ") 
    Palabra 3: Extensi√≥n de 3 caracteres (ej: "TXT")
    
    Resultado: "FILE.TXT"
    
    Limitaciones:
    - Nombre: m√°ximo 6 caracteres
    - Extensi√≥n: m√°ximo 3 caracteres
    - Solo caracteres RADIX-50 permitidos
    """
    
    print(f"\nüìÅ DECODIFICANDO NOMBRE DE ARCHIVO RT-11")
    print("=" * 45)
    print(f"Palabra 1: {palabra1:5d} (0x{palabra1:04X})")
    print(f"Palabra 2: {palabra2:5d} (0x{palabra2:04X})")
    print(f"Palabra 3: {palabra3:5d} (0x{palabra3:04X})")
    
    try:
        # Decodificar cada parte
        print("\nüîç Decodificando palabra 1 (primeros 3 chars del nombre):")
        parte1 = radix50_decodificar_paso_a_paso(palabra1)
        
        print("\nüîç Decodificando palabra 2 (siguientes 3 chars del nombre):")
        parte2 = radix50_decodificar_paso_a_paso(palabra2)
        
        print("\nüîç Decodificando palabra 3 (extensi√≥n):")
        parte3 = radix50_decodificar_paso_a_paso(palabra3)
        
        # Combinar nombre (quitar espacios al final)
        nombre_completo = (parte1 + parte2).rstrip()
        extension = parte3.rstrip()
        
        print(f"\nüìã AN√ÅLISIS DEL RESULTADO:")
        print(f"Parte 1 del nombre: '{parte1}'")
        print(f"Parte 2 del nombre: '{parte2}'") 
        print(f"Nombre completo: '{nombre_completo}'")
        print(f"Extensi√≥n: '{extension}'")
        
        # Validaciones b√°sicas
        if not nombre_completo or len(nombre_completo) > 6:
            print("‚ö†Ô∏è  NOMBRE INV√ÅLIDO (vac√≠o o muy largo)")
            return None, None
            
        if extension and len(extension) > 3:
            print("‚ö†Ô∏è  EXTENSI√ìN INV√ÅLIDA (muy larga)")
            return None, None
        
        print(f"‚úÖ ARCHIVO V√ÅLIDO: '{nombre_completo}' extensi√≥n '{extension}'")
        return nombre_completo, extension
        
    except Exception as e:
        print(f"‚ùå ERROR decodificando: {e}")
        return None, None


# =============================================================================
# PARTE 3: DEMOSTRACI√ìN INTERACTIVA
# =============================================================================

def demo_radix50():
    """
    Demostraci√≥n interactiva del sistema RADIX-50
    """
    print("\n" + "="*60)
    print("DEMOSTRACI√ìN INTERACTIVA DEL SISTEMA RADIX-50")
    print("="*60)
    
    # Ejemplos de decodificaci√≥n
    ejemplos_numeros = [
        0,      # Espacios
        1,      # " A"
        40,     # "A "
        1600,   # "A  "
        1681,   # "ABC"
        12345,  # Ejemplo random
    ]
    
    print("\nüìö EJEMPLOS DE DECODIFICACI√ìN:")
    print("-" * 40)
    
    for numero in ejemplos_numeros:
        resultado = radix50_decodificar_paso_a_paso(numero)
        print(f"Entrada: {numero:5d} ‚Üí Salida: '{resultado}'")
    
    # Ejemplos de codificaci√≥n
    ejemplos_texto = [
        "A",
        "AB", 
        "ABC",
        "123",
        "FILE",
        "$$$"
    ]
    
    print("\nüìö EJEMPLOS DE CODIFICACI√ìN:")
    print("-" * 40)
    
    for texto in ejemplos_texto:
        resultado = radix50_codificar_paso_a_paso(texto)
        print(f"Entrada: '{texto}' ‚Üí Salida: {resultado}")
    
    # Ejemplo completo de nombre de archivo
    print("\nüìö EJEMPLO COMPLETO: NOMBRE DE ARCHIVO RT-11")
    print("-" * 50)
    
    # Simular el archivo "HELLO.TXT"
    print("Ejemplo: queremos almacenar 'HELLO.TXT'")
    print("Paso 1: Dividir en partes")
    print("  Nombre: 'HELLO' ‚Üí 'HEL' + 'LO '")
    print("  Extensi√≥n: 'TXT'")
    
    palabra1 = radix50_codificar_paso_a_paso("HEL")
    palabra2 = radix50_codificar_paso_a_paso("LO ")  
    palabra3 = radix50_codificar_paso_a_paso("TXT")
    
    print(f"\nPalabras almacenadas:")
    print(f"  Palabra 1: {palabra1} (HEL)")
    print(f"  Palabra 2: {palabra2} (LO )")
    print(f"  Palabra 3: {palabra3} (TXT)")
    
    print("\nAhora decodificamos de vuelta:")
    nombre, extension = decodificar_nombre_archivo_rt11(palabra1, palabra2, palabra3)
    
    if nombre and extension:
        print(f"\nüéâ ¬°√âXITO! Archivo reconstruido: '{nombre}.{extension}'")
    else:
        print(f"\n‚ùå Error en la reconstrucci√≥n")


# =============================================================================
# PARTE 4: FUNCI√ìN PRINCIPAL EDUCATIVA
# =============================================================================

def main():
    """
    Funci√≥n principal del programa educativo
    """
    print("RT-11 EXTRACTOR EDUCATIVO")
    print("=" * 25)
    print("Versi√≥n especial para ense√±ar RADIX-50")
    print("Autor: Basado en rt11extract original")
    print()
    
    print("Este programa est√° dise√±ado para ayudar a estudiantes de")
    print("Organizaci√≥n de Computadoras a entender c√≥mo funcionaba")
    print("el sistema RADIX-50 en las computadoras PDP-11.")
    print()
    
    # Ejecutar demostraci√≥n
    demo_radix50()
    
    print("\n" + "="*60)
    print("EJERCICIOS PROPUESTOS PARA ESTUDIANTES:")
    print("="*60)
    print("1. ¬øCu√°l es el n√∫mero RADIX-50 para 'PDP'?")
    print("2. ¬øQu√© texto representa el n√∫mero 12345?")
    print("3. ¬øPor qu√© RADIX-50 usa exactamente 40 caracteres?")
    print("4. ¬øCu√°l es la m√°xima palabra de 16 bits en RADIX-50?")
    print("5. ¬øC√≥mo almacenar√≠as el archivo 'PROGRAM.ASM'?")
    print()
    print("¬°Modifica este c√≥digo para experimentar!")


# =============================================================================
# PARTE 5: FUNCIONES AUXILIARES (SIMPLIFICADAS)
# =============================================================================

def mostrar_tabla_radix50():
    """
    Muestra una tabla completa de los caracteres RADIX-50
    """
    print("\nTABLA COMPLETA DE CARACTERES RADIX-50")
    print("=" * 40)
    print("Pos | Char | Binario | Octal | Hex")
    print("-" * 40)
    
    for i, char in enumerate(CARACTERES_RADIX50):
        char_display = "SPACE" if char == ' ' else char
        print(f"{i:2d}  | {char_display:5s} | {i:07b} | {i:3o} | {i:2X}")


def calcular_estadisticas_radix50():
    """
    Calcula estad√≠sticas interesantes sobre RADIX-50
    """
    print("\nESTAD√çSTICAS INTERESANTES DE RADIX-50")
    print("=" * 40)
    print(f"N√∫mero de caracteres: {len(CARACTERES_RADIX50)}")
    print(f"Bits necesarios por car√°cter: {len(CARACTERES_RADIX50).bit_length() - 1}")
    print(f"M√°ximo valor de 3 caracteres: {40**3 - 1}")
    print(f"Bits necesarios para 3 chars: {(40**3 - 1).bit_length()}")
    print(f"Eficiencia vs 16 bits: {((40**3 - 1).bit_length() / 16) * 100:.1f}%")
    print()
    print("¬°Por eso funcionaba tan bien en computadoras de 16 bits!")


if __name__ == '__main__':
    # Si se ejecuta directamente, mostrar la demostraci√≥n educativa
    main()
    
    # Funciones adicionales para experimentar
    print("\n" + "="*60)
    print("INFORMACI√ìN ADICIONAL:")
    print("="*60)
    
    mostrar_tabla_radix50()
    calcular_estadisticas_radix50()
    
    print("\nüéì FIN DEL PROGRAMA EDUCATIVO")
    print("Modifica el c√≥digo para experimentar m√°s!")
