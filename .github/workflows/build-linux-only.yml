name: Build RT11 Extractor - Linux Only

on:
  push:
    branches: [ feature/linux-builds ]

jobs:
  build-linux:
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            runner: ubuntu-latest
          - os: ubuntu-latest
            arch: arm64
            runner: ubuntu-latest

    runs-on: ${{ matrix.runner }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU for ARM64
      if: matrix.arch == 'arm64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm64

    - name: Debug runner info
      run: |
        echo "Runner info for ${{ matrix.arch }}:"
        echo "OS: $(uname -a)"
        echo "Architecture: $(uname -m)"
        echo "CPU info:"
        cat /proc/cpuinfo | grep -E "model name|Architecture" | head -5
        echo "Expected architecture: ${{ matrix.arch }}"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'


    - name: Install dependencies
      timeout-minutes: 10
      run: |
        echo "Installing Python dependencies..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Dependencies installed successfully"
    
    - name: Verify project structure (Linux)
      run: |
        echo "Verifying project structure for Linux ${{ matrix.arch }}..."
        if [ ! -d "backend/extractors" ]; then
          echo "ERROR: Backend extractors directory not found"
          exit 1
        fi
        if [ ! -f "gui/desktop/rt11extract_gui.py" ]; then
          echo "ERROR: GUI script not found"
          exit 1
        fi
        echo "Project structure verified"

    - name: Install Linux dependencies
      timeout-minutes: 10
      run: |
        echo "Updating package lists..."
        sudo apt-get update
        echo "Installing Linux dependencies..."
        sudo apt-get install -y build-essential libgl1 libglib2.0-0 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 python3-tk
        echo "Linux dependencies installed successfully"

    - name: Build Linux Executables (x64)
      if: matrix.arch == 'x64'
      timeout-minutes: 15
      run: |
        echo "Starting build for Linux x64..."
        mkdir -p cli
        
        # Build CLI tools (similar to macOS approach)
        echo "Building rt11extract..."
        pyinstaller --onefile --name rt11extract --paths backend --paths . \
          --add-data "backend/extractors:backend/extractors" \
          --add-data "backend/filesystems:backend/filesystems" \
          --hidden-import="backend.extractors" --hidden-import="backend.filesystems" \
          --hidden-import="backend.extractors.rt11extract_smart" \
          --hidden-import="backend.extractors.rt11extract_universal" \
          --hidden-import="backend.filesystems.ods1_extractor_v2" \
          --hidden-import="backend.filesystems.unix_pdp11_extractor" \
          backend/extractors/rt11extract
        echo "Building rt11extract_universal..."
        pyinstaller --onefile --name rt11extract_universal --paths backend --paths . \
          --add-data "backend/extractors:backend/extractors" \
          --add-data "backend/filesystems:backend/filesystems" \
          --hidden-import="backend.extractors" --hidden-import="backend.filesystems" \
          --hidden-import="backend.filesystems.ods1_extractor_v2" \
          --hidden-import="backend.filesystems.unix_pdp11_extractor" \
          backend/extractors/rt11extract_universal
        echo "Building universal_extractor..."
        pyinstaller --onefile --name universal_extractor --paths backend --paths . \
          --add-data "backend/extractors:backend/extractors" \
          --add-data "backend/filesystems:backend/filesystems" \
          --hidden-import="backend.extractors" --hidden-import="backend.filesystems" \
          backend/extractors/universal_extractor.py
        echo "Building ods1_extractor (RSX-11M+ support)..."
        pyinstaller --onefile --name ods1_extractor --paths backend --paths . \
          --add-data "backend/extractors:backend/extractors" \
          --add-data "backend/filesystems:backend/filesystems" \
          --hidden-import="backend.extractors" --hidden-import="backend.filesystems" \
          backend/filesystems/ods1_extractor_v2.py
        echo "Building imd2raw..."
        pyinstaller --onefile --name imd2raw --paths backend --paths . backend/image_converters/imd2raw.py
        
        # Move CLIs to cli folder (like macOS)
        cp dist/rt11extract cli/
        cp dist/rt11extract_universal cli/
        cp dist/universal_extractor cli/
        cp dist/ods1_extractor cli/
        cp dist/imd2raw cli/
        
        # Make CLIs executable
        chmod +x cli/*
        
        # Build GUI with CLI tools included (exactly like macOS)
        echo "Building GUI executable..."
        pyinstaller --onefile --windowed --name RT11ExtractGUI --paths backend --paths . \
          --add-data "backend/extractors:backend/extractors" \
          --add-data "backend/filesystems:backend/filesystems" \
          --add-data "cli:cli" \
          --hidden-import tkinter \
          --hidden-import backend.extractors \
          --hidden-import backend.filesystems \
          --hidden-import backend.extractors.rt11extract_smart \
          --hidden-import backend.extractors.rt11extract_universal \
          --hidden-import backend.filesystems.ods1_extractor_v2 \
          --hidden-import backend.filesystems.unix_pdp11_extractor \
          gui/desktop/rt11extract_gui.py
        
        echo "Creating package directory structure..."
        # Create directory structure like macOS but for Linux
        mkdir -p "RT11Extract-Linux"
        
        # Copy the main GUI executable
        echo "Copying GUI executable..."
        cp dist/RT11ExtractGUI "RT11Extract-Linux/"
        chmod +x "RT11Extract-Linux/RT11ExtractGUI"
        
        # Copy CLI tools to the same directory (like macOS approach)
        echo "Copying CLI tools..."
        cp cli/* "RT11Extract-Linux/"
        
        # Create README for Linux
        cat > "RT11Extract-Linux/README.txt" << 'EOF'
        RT11 Extract Linux Distribution
        
        This package contains the RT11 Extractor with GUI and CLI tools.
        The GUI automatically detects and uses the CLI tools in the same directory.
        
        Included tools:
        - RT11ExtractGUI: Graphical interface (main application)
        - rt11extract: RT-11 filesystem extractor
        - rt11extract_universal: Universal filesystem extractor (recommended)
        - universal_extractor: Universal image extractor
        - ods1_extractor: RSX-11M+ (ODS-1) filesystem extractor
        - imd2raw: ImageDisk (IMD) to RAW converter
        
        Usage:
        GUI Mode: ./RT11ExtractGUI
        CLI Mode: ./rt11extract_universal <disk_image>
        
        The GUI will automatically find and use the CLI tools from the same directory.
        All tools support --help for detailed usage information.
        
        Supported formats: .dsk, .img, .imd disk images
        Supported filesystems: RT-11, Unix PDP-11, RSX-11M+ (ODS-1)
        EOF
        
        # Create tar.gz package
        echo "Creating final package..."
        tar -czf "RT11Extract-Linux.tar.gz" "RT11Extract-Linux"
        echo "Package created: RT11Extract-Linux.tar.gz"
        echo "Files in current directory after packaging:"
        ls -la
        echo "Files in RT11Extract-Linux directory:"
        ls -la "RT11Extract-Linux"

    - name: Build Linux Executables (ARM64)
      if: matrix.arch == 'arm64'
      timeout-minutes: 10
      run: |
        echo "Creating ARM64 compatibility package..."
        
        # Simply create a placeholder package with instructions
        # to avoid GitHub Actions timeout issues with cross-compilation
        mkdir -p "RT11Extract-Linux-arm64"
        
        # Create README explaining the situation
        cat > "RT11Extract-Linux-arm64/README.txt" << 'EOF'
        RT11 Extract Linux ARM64 Distribution
        
        NOTICE: Native ARM64 builds are currently experiencing issues with GitHub Actions.
        
        RECOMMENDED SOLUTION:
        Please use the x64 version (RT11Extract-Linux.tar.gz) which works
        on most ARM64 Linux systems through automatic emulation.
        
        Most modern ARM64 Linux distributions can run x64 binaries transparently.
        
        If you absolutely need native ARM64 binaries:
        1. Clone the repository
        2. Install Python 3.11 and pip
        3. Run: pip install -r requirements.txt
        4. Run: python gui/desktop/rt11extract_gui.py
        
        For issues or questions, please open an issue on GitHub.
        EOF
        
        # Create simple package
        tar -czf "RT11Extract-Linux-arm64.tar.gz" "RT11Extract-Linux-arm64"
        echo "ARM64 compatibility package created"
        
        echo "Files in current directory:"
        ls -la
        echo "Files in RT11Extract-Linux-arm64 directory:"
        ls -la "RT11Extract-Linux-arm64"

    - name: Upload Linux x64 Artifact
      if: matrix.arch == 'x64'
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extract-Linux
        path: RT11Extract-Linux.tar.gz

    - name: Upload Linux ARM64 Artifact
      if: matrix.arch == 'arm64'
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extract-Linux-arm64
        path: RT11Extract-Linux-arm64.tar.gz
