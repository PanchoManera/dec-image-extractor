name: Build RT-11 Extractor Executables

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permite ejecutar manualmente

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86, arm64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        architecture: ${{ matrix.arch == 'x86' && 'x86' || 'x64' }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow
    
    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile --windowed --name "RT11ExtractGUI" rt11extract_gui.py
        
    - name: Build CLI executable
      run: |
        pyinstaller --onefile --name "RT11Extract" rt11extract
    
    - name: Create Windows package
      run: |
        mkdir RT11Extractor-Windows-${{ matrix.arch }}
        copy dist\RT11ExtractGUI.exe RT11Extractor-Windows-${{ matrix.arch }}\
        copy dist\RT11Extract.exe RT11Extractor-Windows-${{ matrix.arch }}\
        copy README.md RT11Extractor-Windows-${{ matrix.arch }}\
        echo "RT-11 Extractor para Windows ${{ matrix.arch }}" > RT11Extractor-Windows-${{ matrix.arch }}\README_Windows.txt
        echo "" >> RT11Extractor-Windows-${{ matrix.arch }}\README_Windows.txt
        echo "Ejecutables incluidos:" >> RT11Extractor-Windows-${{ matrix.arch }}\README_Windows.txt
        echo "- RT11ExtractGUI.exe (Interfaz gráfica)" >> RT11Extractor-Windows-${{ matrix.arch }}\README_Windows.txt
        echo "- RT11Extract.exe (Línea de comandos)" >> RT11Extractor-Windows-${{ matrix.arch }}\README_Windows.txt
        echo "" >> RT11Extractor-Windows-${{ matrix.arch }}\README_Windows.txt
        echo "Para usar la interfaz gráfica, ejecute RT11ExtractGUI.exe" >> RT11Extractor-Windows-${{ matrix.arch }}\README_Windows.txt
        echo "Para usar desde línea de comandos, ejecute RT11Extract.exe" >> RT11Extractor-Windows-${{ matrix.arch }}\README_Windows.txt
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extractor-Windows-${{ matrix.arch }}
        path: RT11Extractor-Windows-${{ matrix.arch }}/

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow
    
    - name: Build executable with PyInstaller
      run: |
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          pyinstaller --onefile --windowed --name "RT11ExtractGUI" --target-arch arm64 rt11extract_gui.py
          pyinstaller --onefile --name "RT11Extract" --target-arch arm64 rt11extract
        else
          pyinstaller --onefile --windowed --name "RT11ExtractGUI" --target-arch x86_64 rt11extract_gui.py
          pyinstaller --onefile --name "RT11Extract" --target-arch x86_64 rt11extract
        fi
    
    - name: Create macOS package
      run: |
        mkdir RT11Extractor-macOS-${{ matrix.arch }}
        cp dist/RT11ExtractGUI RT11Extractor-macOS-${{ matrix.arch }}/
        cp dist/RT11Extract RT11Extractor-macOS-${{ matrix.arch }}/
        chmod +x RT11Extractor-macOS-${{ matrix.arch }}/RT11ExtractGUI
        chmod +x RT11Extractor-macOS-${{ matrix.arch }}/RT11Extract
        cp README.md RT11Extractor-macOS-${{ matrix.arch }}/
        echo "RT-11 Extractor para macOS ${{ matrix.arch }}" > RT11Extractor-macOS-${{ matrix.arch }}/README_macOS.txt
        echo "" >> RT11Extractor-macOS-${{ matrix.arch }}/README_macOS.txt
        echo "Ejecutables incluidos:" >> RT11Extractor-macOS-${{ matrix.arch }}/README_macOS.txt
        echo "- RT11ExtractGUI (Interfaz gráfica)" >> RT11Extractor-macOS-${{ matrix.arch }}/README_macOS.txt
        echo "- RT11Extract (Línea de comandos)" >> RT11Extractor-macOS-${{ matrix.arch }}/README_macOS.txt
        echo "" >> RT11Extractor-macOS-${{ matrix.arch }}/README_macOS.txt
        echo "Para usar desde Terminal, otorgue permisos de ejecución si es necesario:" >> RT11Extractor-macOS-${{ matrix.arch }}/README_macOS.txt
        echo "chmod +x RT11Extract*" >> RT11Extractor-macOS-${{ matrix.arch }}/README_macOS.txt
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extractor-macOS-${{ matrix.arch }}
        path: RT11Extractor-macOS-${{ matrix.arch }}/

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow
    
    - name: Build executable with PyInstaller
      run: |
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          # Para ARM64 en Linux necesitamos emulación o cross-compilation
          # Por simplicidad, solo construimos para x64 por ahora
          echo "ARM64 build skipped for Linux in this workflow"
          exit 0
        else
          pyinstaller --onefile --name "RT11ExtractGUI" rt11extract_gui.py
          pyinstaller --onefile --name "RT11Extract" rt11extract
        fi
    
    - name: Create Linux package
      if: matrix.arch == 'x64'
      run: |
        mkdir RT11Extractor-Linux-${{ matrix.arch }}
        cp dist/RT11ExtractGUI RT11Extractor-Linux-${{ matrix.arch }}/
        cp dist/RT11Extract RT11Extractor-Linux-${{ matrix.arch }}/
        chmod +x RT11Extractor-Linux-${{ matrix.arch }}/RT11ExtractGUI
        chmod +x RT11Extractor-Linux-${{ matrix.arch }}/RT11Extract
        cp README.md RT11Extractor-Linux-${{ matrix.arch }}/
        echo "RT-11 Extractor para Linux ${{ matrix.arch }}" > RT11Extractor-Linux-${{ matrix.arch }}/README_Linux.txt
        echo "" >> RT11Extractor-Linux-${{ matrix.arch }}/README_Linux.txt
        echo "Ejecutables incluidos:" >> RT11Extractor-Linux-${{ matrix.arch }}/README_Linux.txt
        echo "- RT11ExtractGUI (Interfaz gráfica)" >> RT11Extractor-Linux-${{ matrix.arch }}/README_Linux.txt
        echo "- RT11Extract (Línea de comandos)" >> RT11Extractor-Linux-${{ matrix.arch }}/README_Linux.txt
        echo "" >> RT11Extractor-Linux-${{ matrix.arch }}/README_Linux.txt
        echo "Requisitos:" >> RT11Extractor-Linux-${{ matrix.arch }}/README_Linux.txt
        echo "- Para la interfaz gráfica se requiere un entorno gráfico con soporte Tkinter" >> RT11Extractor-Linux-${{ matrix.arch }}/README_Linux.txt
        echo "- El ejecutable de línea de comandos funciona en cualquier terminal" >> RT11Extractor-Linux-${{ matrix.arch }}/README_Linux.txt
    
    - name: Upload Linux artifacts
      if: matrix.arch == 'x64'
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extractor-Linux-${{ matrix.arch }}
        path: RT11Extractor-Linux-${{ matrix.arch }}/

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: .
    
    - name: Create release packages
      run: |
        # Crear archivos ZIP para cada plataforma
        for dir in RT11Extractor-*/; do
          if [ -d "$dir" ]; then
            zip -r "${dir%/}.zip" "$dir"
          fi
        done
        ls -la *.zip
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-summary:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: .
      continue-on-error: true
    
    - name: List all built executables
      run: |
        echo "# RT-11 Extractor Build Summary" > BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        echo "## Ejecutables construidos:" >> BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        
        for dir in RT11Extractor-*/; do
          if [ -d "$dir" ]; then
            echo "### $dir" >> BUILD_SUMMARY.md
            ls -la "$dir" >> BUILD_SUMMARY.md
            echo "" >> BUILD_SUMMARY.md
          fi
        done
        
        echo "## Archivos disponibles para descarga:" >> BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        echo "### Ejecutables Windows (.exe):" >> BUILD_SUMMARY.md
        find . -name "*.exe" -type f | grep RT11Extract | sort >> BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        echo "### Ejecutables macOS:" >> BUILD_SUMMARY.md
        find ./RT11Extractor-macOS-* -name "RT11Extract*" -type f 2>/dev/null | sort >> BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        echo "### Ejecutables Linux:" >> BUILD_SUMMARY.md
        find ./RT11Extractor-Linux-* -name "RT11Extract*" -type f 2>/dev/null | sort >> BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        echo "### Todos los archivos RT11Extract:" >> BUILD_SUMMARY.md
        find . -name "RT11Extract*" -type f | sort >> BUILD_SUMMARY.md
        
        cat BUILD_SUMMARY.md
    
    - name: Upload build summary
      uses: actions/upload-artifact@v4
      with:
        name: BUILD_SUMMARY
        path: BUILD_SUMMARY.md
