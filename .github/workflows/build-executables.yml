name: Build RT-11 Extractor Complete Executables

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        architecture: 'x64'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow
    
    - name: Build Windows executables with complete backend
      run: |
        $env:PYTHONPATH = "."
        
        # 1. Build CLI extractor (main wrapper)
        pyinstaller --onefile --name "RT11Extract" --paths="backend" --paths="." --add-data "backend;backend" --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" backend/extractors/rt11extract
        
        # 2. Build IMD converter
        pyinstaller --onefile --name "imd2raw" --paths="backend" --paths="." backend/image_converters/imd2raw.py
        
        # 3. Build GUI with ALL backend embedded
        if (Test-Path "icon.png") {
          pyinstaller --onefile --windowed --name "RT11ExtractGUI" --icon="icon.png" --paths="backend" --paths="gui/desktop" --paths="." --add-data "backend;backend" --add-data "icon.png;." --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" gui/desktop/rt11extract_gui.py
        } else {
          pyinstaller --onefile --windowed --name "RT11ExtractGUI" --paths="backend" --paths="gui/desktop" --paths="." --add-data "backend;backend" --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" gui/desktop/rt11extract_gui.py
        }
    
    - name: Create Windows package
      run: |
        mkdir RT11Extractor-Windows-x64
        # Copy executables
        if (Test-Path "dist\RT11Extract.exe") { copy dist\RT11Extract.exe RT11Extractor-Windows-x64\ }
        if (Test-Path "dist\RT11ExtractGUI.exe") { copy dist\RT11ExtractGUI.exe RT11Extractor-Windows-x64\ }
        if (Test-Path "dist\imd2raw.exe") { copy dist\imd2raw.exe RT11Extractor-Windows-x64\ }
        # Copy documentation
        if (Test-Path "README.md") { copy README.md RT11Extractor-Windows-x64\ }
        # Create Windows-specific README
        echo "RT-11 Extractor para Windows x64" > RT11Extractor-Windows-x64\README_Windows.txt
        echo "" >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "Ejecutables incluidos:" >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "- RT11ExtractGUI.exe (Interfaz grafica completa con TODO el backend)" >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "- RT11Extract.exe (CLI extractor universal)" >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "- imd2raw.exe (Conversor ImageDisk a DSK/RAW)" >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "" >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "La GUI incluye TODOS los extractores y convertidores del backend integrados." >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "No necesita archivos adicionales para funcionar." >> RT11Extractor-Windows-x64\README_Windows.txt
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extractor-Windows-x64
        path: RT11Extractor-Windows-x64/

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow
    
    - name: Build macOS executables with complete backend
      run: |
        export PYTHONPATH="."
        
        # 1. Build CLI extractor (main wrapper)
        pyinstaller --onefile --name "rt11extract_cli" --paths="backend" --paths="." --add-data "backend:backend" --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" backend/extractors/rt11extract
        
        # 2. Build IMD converter
        pyinstaller --onefile --name "imd2raw" --paths="backend" --paths="." backend/image_converters/imd2raw.py
        
        # 3. Build GUI as .app bundle with ALL backend embedded
        if [ -f "icon.png" ]; then
          pyinstaller --onedir --windowed --name "RT11Extract" --icon="icon.png" --paths="backend" --paths="gui/desktop" --paths="." --add-data "backend:backend" --add-data "icon.png:." --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" gui/desktop/rt11extract_gui.py
        else
          pyinstaller --onedir --windowed --name "RT11Extract" --paths="backend" --paths="gui/desktop" --paths="." --add-data "backend:backend" --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" gui/desktop/rt11extract_gui.py
        fi
    
    - name: Create macOS package with bundle
      run: |
        mkdir RT11Extractor-macOS-universal
        # Copy the .app bundle (main GUI application)
        cp -r "dist/RT11Extract.app" RT11Extractor-macOS-universal/
        # Copy CLI tools for command line use
        cp dist/rt11extract_cli RT11Extractor-macOS-universal/
        cp dist/imd2raw RT11Extractor-macOS-universal/
        # IMPORTANT: Also copy CLI inside the .app bundle so GUI can find it
        cp dist/rt11extract_cli "RT11Extractor-macOS-universal/RT11Extract.app/Contents/MacOS/rt11extract_cli"
        # Set permissions
        chmod +x RT11Extractor-macOS-universal/rt11extract_cli
        chmod +x RT11Extractor-macOS-universal/imd2raw
        # Copy documentation
        cp README.md RT11Extractor-macOS-universal/
        # Create macOS-specific README
        echo "RT-11 Extractor para macOS universal" > RT11Extractor-macOS-universal/README_macOS.txt
        echo "" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "Contenido del paquete:" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "- RT11Extract.app (Aplicacion GUI completa con TODO el backend integrado)" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "- rt11extract_cli (CLI extractor universal)" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "- imd2raw (Conversor ImageDisk a DSK/RAW)" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "Uso:" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "- Hacer doble clic en RT11Extract.app para abrir la interfaz grafica" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "- Desde Terminal:" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "  ./rt11extract_cli imagen.dsk -o carpeta/ (extractor)" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "  ./imd2raw imagen.imd imagen.dsk (conversor)" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "La aplicacion .app incluye TODOS los extractores y convertidores del backend." >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "No necesita archivos adicionales para funcionar." >> RT11Extractor-macOS-universal/README_macOS.txt
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extractor-macOS-universal
        path: RT11Extractor-macOS-universal/

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow
    
    - name: Build Linux executables with complete backend
      run: |
        export PYTHONPATH="."
        
        # 1. Build CLI extractor (main wrapper)
        pyinstaller --onefile --name "RT11Extract" --paths="backend" --paths="." --add-data "backend:backend" --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" backend/extractors/rt11extract
        
        # 2. Build IMD converter
        pyinstaller --onefile --name "imd2raw" --paths="backend" --paths="." backend/image_converters/imd2raw.py
        
        # 3. Build GUI with ALL backend embedded
        if [ -f "icon.png" ]; then
          pyinstaller --onefile --name "RT11ExtractGUI" --icon="icon.png" --paths="backend" --paths="gui/desktop" --paths="." --add-data "backend:backend" --add-data "icon.png:." --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" gui/desktop/rt11extract_gui.py
        else
          pyinstaller --onefile --name "RT11ExtractGUI" --paths="backend" --paths="gui/desktop" --paths="." --add-data "backend:backend" --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" gui/desktop/rt11extract_gui.py
        fi
    
    - name: Create Linux package
      run: |
        mkdir RT11Extractor-Linux-x64
        # Copy executables
        cp dist/RT11Extract RT11Extractor-Linux-x64/
        cp dist/RT11ExtractGUI RT11Extractor-Linux-x64/
        cp dist/imd2raw RT11Extractor-Linux-x64/
        # Set permissions
        chmod +x RT11Extractor-Linux-x64/RT11Extract
        chmod +x RT11Extractor-Linux-x64/RT11ExtractGUI
        chmod +x RT11Extractor-Linux-x64/imd2raw
        # Copy documentation
        cp README.md RT11Extractor-Linux-x64/
        # Create Linux-specific README
        echo "RT-11 Extractor para Linux x64" > RT11Extractor-Linux-x64/README_Linux.txt
        echo "" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "Ejecutables incluidos:" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "- RT11ExtractGUI (Interfaz grafica completa con TODO el backend integrado)" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "- RT11Extract (CLI extractor universal)" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "- imd2raw (Conversor ImageDisk a DSK/RAW)" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "Uso:" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "./RT11ExtractGUI (interfaz grafica)" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "./RT11Extract imagen.dsk -o carpeta/ (extractor)" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "./imd2raw imagen.imd imagen.dsk (conversor)" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "La GUI incluye TODOS los extractores y convertidores del backend integrados." >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "No necesita archivos adicionales para funcionar." >> RT11Extractor-Linux-x64/README_Linux.txt
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extractor-Linux-x64
        path: RT11Extractor-Linux-x64/

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: .
    
    - name: Create release packages
      run: |
        # Crear archivos ZIP para cada plataforma
        for dir in RT11Extractor-*/; do
          if [ -d "$dir" ]; then
            zip -r "${dir%/}.zip" "$dir"
          fi
        done
        ls -la *.zip
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          # RT-11 Extractor - Ejecutables Completos
          
          Ejecutables con TODO el backend integrado:
          
          ## Windows x64
          - RT11ExtractGUI.exe (GUI completa)
          - RT11Extract.exe (CLI universal)  
          - imd2raw.exe (Conversor IMD)
          
          ## macOS Universal
          - RT11Extract.app (Bundle completo)
          - rt11extract_cli (CLI universal)
          - imd2raw (Conversor IMD)
          
          ## Linux x64
          - RT11ExtractGUI (GUI completa)
          - RT11Extract (CLI universal)
          - imd2raw (Conversor IMD)
          
          ### Características incluidas:
          - ✅ Extractores RT-11, Unix PDP-11, ODS-1/Files-11
          - ✅ Conversor ImageDisk (IMD) a DSK/RAW
          - ✅ Auto-detección de filesystem
          - ✅ GUI completa con todos los convertidores
          - ✅ No requiere dependencias adicionales
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-summary:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: .
      continue-on-error: true
    
    - name: Generate build summary
      run: |
        echo "# RT-11 Extractor - Build Summary" > BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        echo "Build completed with complete backend integration." >> BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        echo "## Packages built:" >> BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        
        for dir in RT11Extractor-*/; do
          if [ -d "$dir" ]; then
            echo "### $dir" >> BUILD_SUMMARY.md
            ls -la "$dir" >> BUILD_SUMMARY.md
            echo "" >> BUILD_SUMMARY.md
          fi
        done
        
        echo "## All RT11Extract executables:" >> BUILD_SUMMARY.md
        find . -name "RT11Extract*" -type f | sort >> BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        echo "## All imd2raw executables:" >> BUILD_SUMMARY.md
        find . -name "imd2raw*" -type f | sort >> BUILD_SUMMARY.md
        
        cat BUILD_SUMMARY.md
    
    - name: Upload build summary
      uses: actions/upload-artifact@v4
      with:
        name: BUILD_SUMMARY
        path: BUILD_SUMMARY.md
