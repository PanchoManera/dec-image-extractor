name: Build RT-11 Extractor Complete Executables

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        architecture: 'x64'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow
    
    - name: Build Windows executables with complete backend
      run: |
        $env:PYTHONPATH = "."
        
        # 1. Build CLI extractor (main wrapper)
        pyinstaller --onefile --name "RT11Extract" --paths="backend" --paths="." --add-data "backend;backend" --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" backend/extractors/rt11extract
        
        # 2. Build IMD converter
        pyinstaller --onefile --name "imd2raw" --paths="backend" --paths="." backend/image_converters/imd2raw.py
        
        # 3. Build GUI with ALL backend embedded (including filesystem_mount for FUSE)
        # First, create Windows-compatible filesystem_mount directory without symlinks
        New-Item -ItemType Directory -Force -Path "temp_backend\filesystem_mount"
        
        # Copy Python files (resolve symlinks) from filesystem_mount
        Get-ChildItem "backend\filesystem_mount" -File -Filter "*.py" | ForEach-Object {
          $filePath = $_.FullName
          $fileName = $_.Name
          $destPath = "temp_backend\filesystem_mount\$fileName"
          
          Write-Host "Processing: $fileName"
          
          # Check if it's a symlink using different methods
          $isSymlink = $false
          if ($_.Attributes -band [System.IO.FileAttributes]::ReparsePoint) {
            $isSymlink = $true
          }
          
          if ($isSymlink) {
            Write-Host "  -> Detected as symlink"
            
            # Try multiple methods to resolve the symlink
            $resolved = $false
            
            # Method 1: Use cmd.exe dir command to see target
            try {
              $dirOutput = cmd.exe /c "dir `"$filePath`" /AL" 2>$null
              if ($dirOutput -match '\[(.+?)\]') {
                $target = $matches[1]
                Write-Host "  -> Target from dir: $target"
                
                # Convert relative path to absolute
                if (-not [System.IO.Path]::IsPathRooted($target)) {
                  $target = Join-Path (Split-Path $filePath) $target
                }
                
                $target = [System.IO.Path]::GetFullPath($target)
                
                if (Test-Path $target) {
                  Copy-Item $target $destPath
                  Write-Host "  -> ✓ Resolved and copied: $target"
                  $resolved = $true
                }
              }
            } catch {
              Write-Host "  -> Method 1 failed: $_"
            }
            
            # Method 2: Read the raw symlink content
            if (-not $resolved) {
              try {
                $target = [System.IO.File]::ResolveLinkTarget($filePath, $true)
                if ($target -and (Test-Path $target.FullName)) {
                  Copy-Item $target.FullName $destPath
                  Write-Host "  -> ✓ Resolved with ResolveLinkTarget: $($target.FullName)"
                  $resolved = $true
                }
              } catch {
                Write-Host "  -> Method 2 failed: $_"
              }
            }
            
            # Method 3: Manually resolve relative path based on known structure
            if (-not $resolved) {
              # For pdp11_smart_extractor.py -> ../extractors/universal_extractor.py
              if ($fileName -eq "pdp11_smart_extractor.py") {
                $target = "backend\extractors\universal_extractor.py"
                if (Test-Path $target) {
                  Copy-Item $target $destPath
                  Write-Host "  -> ✓ Resolved manually: $target"
                  $resolved = $true
                }
              }
            }
            
            if (-not $resolved) {
              Write-Warning "  -> ✗ Could not resolve symlink: $fileName"
            }
          } else {
            # Regular file, copy normally
            Write-Host "  -> Regular file, copying normally"
            Copy-Item $filePath $destPath
          }
        }
        
        # Copy batch files
        Get-ChildItem "backend\filesystem_mount" -File -Filter "*.bat" | Copy-Item -Destination "temp_backend\filesystem_mount\"
        
        # Copy other backend directories (resolve symlinks if any)
        Write-Host "Copying extractors directory..."
        Copy-Item "backend\extractors" "temp_backend\extractors" -Recurse -Force
        
        # Verify that universal_extractor.py exists in extractors
        if (Test-Path "temp_backend\extractors\universal_extractor.py") {
          Write-Host "  -> ✓ universal_extractor.py found in temp_backend\extractors"
        } else {
          Write-Warning "  -> ✗ universal_extractor.py NOT found in temp_backend\extractors"
        }
        
        Write-Host "Copying image_converters directory..."
        Copy-Item "backend\image_converters" "temp_backend\image_converters" -Recurse -Force
        
        Write-Host "Copying filesystems directory..."
        Copy-Item "backend\filesystems" "temp_backend\filesystems" -Recurse -Force
        
        if (Test-Path "backend\utils") { 
          Write-Host "Copying utils directory..."
          Copy-Item "backend\utils" "temp_backend\utils" -Recurse -Force 
        }
        
        # Final verification of temp_backend contents
        Write-Host "=== Final Verification of temp_backend ==="
        Write-Host "Contents of temp_backend\filesystem_mount:"
        Get-ChildItem "temp_backend\filesystem_mount" -File | ForEach-Object {
          Write-Host "  -> $($_.Name) ($($_.Length) bytes)"
        }
        
        # Specifically check for pdp11_smart_extractor.py
        if (Test-Path "temp_backend\filesystem_mount\pdp11_smart_extractor.py") {
          Write-Host "  -> ✓ pdp11_smart_extractor.py found in temp_backend"
          $content = Get-Content "temp_backend\filesystem_mount\pdp11_smart_extractor.py" -TotalCount 5
          Write-Host "  -> Content preview: $($content -join '; ')"
        } else {
          Write-Warning "  -> ✗ pdp11_smart_extractor.py NOT found in temp_backend"
        }
        
        # Check for universal_extractor.py in extractors
        if (Test-Path "temp_backend\extractors\universal_extractor.py") {
          Write-Host "  -> ✓ universal_extractor.py found in temp_backend\extractors"
        } else {
          Write-Warning "  -> ✗ universal_extractor.py NOT found in temp_backend\extractors"
        }
        
        # Build GUI with the cleaned backend (NO WINDOWED MODE to debug TCL issues)
        # CRITICAL FIX: tkinter is built-in Python module, has NO pip package metadata
        if (Test-Path "icon.png") {
          pyinstaller --onefile --name "RT11ExtractGUI" --icon="icon.png" --paths="temp_backend" --paths="gui/desktop" --paths="." --add-data "temp_backend;backend" --add-data "icon.png;." --collect-all tkinter --collect-all PIL --copy-metadata PIL --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" --hidden-import="backend.filesystem_mount" --hidden-import="tkinter" --hidden-import="tkinter.filedialog" --hidden-import="tkinter.messagebox" --hidden-import="tkinter.scrolledtext" --hidden-import="tkinter.ttk" --debug=all gui/desktop/rt11extract_gui.py
        } else {
          pyinstaller --onefile --name "RT11ExtractGUI" --paths="temp_backend" --paths="gui/desktop" --paths="." --add-data "temp_backend;backend" --collect-all tkinter --collect-all PIL --copy-metadata PIL --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" --hidden-import="backend.filesystem_mount" --hidden-import="tkinter" --hidden-import="tkinter.filedialog" --hidden-import="tkinter.messagebox" --hidden-import="tkinter.scrolledtext" --hidden-import="tkinter.ttk" --debug=all gui/desktop/rt11extract_gui.py
        }
    
    - name: Create Windows package
      run: |
        mkdir RT11Extractor-Windows-x64
        # Copy executables
        if (Test-Path "dist\RT11Extract.exe") { copy dist\RT11Extract.exe RT11Extractor-Windows-x64\ }
        if (Test-Path "dist\RT11ExtractGUI.exe") { copy dist\RT11ExtractGUI.exe RT11Extractor-Windows-x64\ }
        if (Test-Path "dist\imd2raw.exe") { copy dist\imd2raw.exe RT11Extractor-Windows-x64\ }
        # Copy documentation
        if (Test-Path "README.md") { copy README.md RT11Extractor-Windows-x64\ }
        # Create Windows-specific README
        echo "RT-11 Extractor para Windows x64" > RT11Extractor-Windows-x64\README_Windows.txt
        echo "" >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "Ejecutables incluidos:" >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "- RT11ExtractGUI.exe (Interfaz grafica completa con TODO el backend)" >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "- RT11Extract.exe (CLI extractor universal)" >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "- imd2raw.exe (Conversor ImageDisk a DSK/RAW)" >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "" >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "La GUI incluye TODOS los extractores y convertidores del backend integrados." >> RT11Extractor-Windows-x64\README_Windows.txt
        echo "No necesita archivos adicionales para funcionar." >> RT11Extractor-Windows-x64\README_Windows.txt
    
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extractor-Windows-x64
        path: RT11Extractor-Windows-x64/

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow fusepy
        
        # Verify fusepy installation - use CORRECT import
        python3 -c "from fuse import FUSE; print('✓ FUSE import successful')"
        
        # EXTREME FIX: Copy fusepy source directly into backend
        echo "Copying fusepy source code directly..."
        mkdir -p backend/fusepy_embedded
        python3 -c "import fuse; import os; print(os.path.dirname(fuse.__file__))" | xargs -I {} cp -r {} backend/fusepy_embedded/
        echo "✓ fusepy source copied to backend/fusepy_embedded/"
        ls -la backend/fusepy_embedded/
    
    - name: Build macOS executables with complete backend
      run: |
        export PYTHONPATH="."
        
        # Debug: Show current directory and files
        echo "Current directory:"
        pwd
        echo "Files in current directory:"
        ls -la
        echo "Backend directory:"
        ls -la backend/ || echo "Backend directory not found"
        
        # 1. Build CLI extractor (main wrapper) - simplified
        echo "Building CLI extractor..."
        pyinstaller --onefile --name "rt11extract_cli" --paths="." backend/extractors/rt11extract || {
          echo "CLI build failed, trying alternative approach..."
          cp backend/extractors/rt11extract rt11extract_cli
          chmod +x rt11extract_cli
          mkdir -p dist
          cp rt11extract_cli dist/
        }
        
        # 2. Build IMD converter - simplified
        echo "Building IMD converter..."
        pyinstaller --onefile --name "imd2raw" --paths="." backend/image_converters/imd2raw.py || {
          echo "IMD converter build failed, trying alternative approach..."
          cp backend/image_converters/imd2raw.py imd2raw
          chmod +x imd2raw
          mkdir -p dist
          cp imd2raw dist/
        }
        
        # 3. Build GUI - simplified approach for macOS with explicit FUSE file inclusion
        echo "Building GUI..."
        
        # Verify FUSE script exists before building
        echo "Verifying FUSE script exists..."
        if [ -f "backend/filesystem_mount/rt11_fuse_universal.py" ]; then
          echo "✓ FUSE script found: backend/filesystem_mount/rt11_fuse_universal.py"
        else
          echo "✗ FUSE script NOT found: backend/filesystem_mount/rt11_fuse_universal.py"
          echo "Contents of backend/filesystem_mount:"
          ls -la backend/filesystem_mount/ || echo "Directory does not exist"
        fi
        
        # Create a more specific data inclusion to avoid directory issues
        # CRITICAL FIX: tkinter is built-in Python module, has NO pip package metadata  
        if [ -f "icon.png" ]; then
          pyinstaller --onefile --windowed --name "RT11Extract" --icon="icon.png" --paths="gui/desktop" --paths="." \
            --add-data "backend/extractors:backend/extractors" \
            --add-data "backend/image_converters:backend/image_converters" \
            --add-data "backend/filesystems:backend/filesystems" \
            --add-data "backend/filesystem_mount:backend/filesystem_mount" \
            --add-data "backend/fusepy_embedded:backend/fusepy_embedded" \
            --add-data "gui/desktop/pyinstaller_helper.py:." \
            --add-data "icon.png:." \
            --hidden-import="tkinter" --hidden-import="PIL" --hidden-import="fusepy" --collect-all fusepy --collect-submodules fusepy \
            gui/desktop/rt11extract_gui.py || {
            echo "GUI build with icon failed, trying minimal build..."
            pyinstaller --onefile --windowed --name "RT11Extract" --paths="gui/desktop" --paths="." --hidden-import="tkinter" --hidden-import="PIL" --hidden-import="fusepy" --collect-all fusepy --collect-submodules fusepy gui/desktop/rt11extract_gui.py
          }
        else
          pyinstaller --onefile --windowed --name "RT11Extract" --paths="gui/desktop" --paths="." \
            --add-data "backend/extractors:backend/extractors" \
            --add-data "backend/image_converters:backend/image_converters" \
            --add-data "backend/filesystems:backend/filesystems" \
            --add-data "backend/filesystem_mount:backend/filesystem_mount" \
            --add-data "backend/fusepy_embedded:backend/fusepy_embedded" \
            --add-data "gui/desktop/pyinstaller_helper.py:." \
            --hidden-import="tkinter" --hidden-import="PIL" --hidden-import="fusepy" --collect-all fusepy --collect-submodules fusepy \
            gui/desktop/rt11extract_gui.py || {
            echo "GUI build failed, trying minimal build..."
            pyinstaller --onefile --windowed --name "RT11Extract" --paths="gui/desktop" --paths="." --hidden-import="tkinter" --hidden-import="PIL" --hidden-import="fusepy" --collect-all fusepy --collect-submodules fusepy gui/desktop/rt11extract_gui.py
          }
        fi
        
        # Verify the built app includes the FUSE script
        echo "=== FUSE Script Verification in macOS Bundle ==="
        if [ -d "dist/RT11Extract.app" ]; then
          echo "✓ App bundle found: dist/RT11Extract.app"
          
          echo "Looking for FUSE script in app bundle..."
          find dist/RT11Extract.app -name "rt11_fuse_universal.py" -type f | while read file; do
            echo "  ✓ Found FUSE script: $file"
            ls -la "$file"
            echo "  First few lines:"
            head -3 "$file" || echo "  Could not read file"
          done
          
          echo "All Python files in filesystem_mount:"
          find dist/RT11Extract.app -name "*.py" -path "*/backend/filesystem_mount/*" | head -20
          
          echo "Checking app bundle structure:"
          find dist/RT11Extract.app -type d -name "*filesystem_mount*" | while read dir; do
            echo "  Directory: $dir"
            ls -la "$dir/" || echo "  Could not list directory"
          done
          
        else
          echo "✗ App bundle NOT found"
        fi
        
        # Test FUSE script integrity if found in bundle
        echo "=== FUSE Script Integrity Test ==="
        FUSE_SCRIPT=$(find dist/RT11Extract.app -name "rt11_fuse_universal.py" -type f | head -1)
        if [ -n "$FUSE_SCRIPT" ]; then
          echo "Testing FUSE script: $FUSE_SCRIPT"
          # Test that the script is valid Python and has expected content
          python3 -m py_compile "$FUSE_SCRIPT" && echo "  ✓ Script compiles successfully" || echo "  ✗ Script compilation failed"
          
          # Check for key FUSE functions
          if grep -q "class RT11FUSE" "$FUSE_SCRIPT"; then
            echo "  ✓ RT11FUSE class found"
          else
            echo "  ✗ RT11FUSE class NOT found"
          fi
          
          if grep -q "def readdir" "$FUSE_SCRIPT"; then
            echo "  ✓ readdir function found"
          else
            echo "  ✗ readdir function NOT found"
          fi
          
          # Check file permissions
          if [ -x "$FUSE_SCRIPT" ]; then
            echo "  ✓ Script has execute permissions"
          else
            echo "  ⚠ Script lacks execute permissions (but this may be normal in bundle)"
          fi
        else
          echo "  ✗ No FUSE script found for integrity testing"
        fi
        
        # Check what was built
        echo "Built files:"
        ls -la dist/ || echo "No dist directory"
    
    - name: Create macOS package
      run: |
        mkdir RT11Extractor-macOS-universal
        
        # Check what was actually built and copy accordingly
        echo "Checking built files:"
        ls -la dist/
        
        # Copy CLI tools for command line use
        if [ -f "dist/rt11extract_cli" ]; then
          cp dist/rt11extract_cli RT11Extractor-macOS-universal/
          chmod +x RT11Extractor-macOS-universal/rt11extract_cli
        fi
        
        if [ -f "dist/imd2raw" ]; then
          cp dist/imd2raw RT11Extractor-macOS-universal/
          chmod +x RT11Extractor-macOS-universal/imd2raw
        fi
        
        # Check for GUI - could be .app bundle or single executable
        if [ -d "dist/RT11Extract.app" ]; then
          # Copy the .app bundle (main GUI application)
          cp -r "dist/RT11Extract.app" RT11Extractor-macOS-universal/
          echo "- RT11Extract.app (Aplicacion GUI bundle completa)" > gui_description.txt
          echo "- Hacer doble clic en RT11Extract.app para abrir la interfaz grafica" > usage_gui.txt
        elif [ -f "dist/RT11Extract" ]; then
          # Copy single executable
          cp dist/RT11Extract RT11Extractor-macOS-universal/RT11ExtractGUI
          chmod +x RT11Extractor-macOS-universal/RT11ExtractGUI
          echo "- RT11ExtractGUI (Ejecutable GUI completo)" > gui_description.txt
          echo "- Ejecutar ./RT11ExtractGUI para abrir la interfaz grafica" > usage_gui.txt
        else
          echo "- No se pudo compilar la GUI" > gui_description.txt
          echo "- Solo disponibles herramientas CLI" > usage_gui.txt
        fi
        
        # Copy documentation
        if [ -f "README.md" ]; then
          cp README.md RT11Extractor-macOS-universal/
        fi
        
        # Create macOS-specific README
        echo "RT-11 Extractor para macOS universal" > RT11Extractor-macOS-universal/README_macOS.txt
        echo "" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "Contenido del paquete:" >> RT11Extractor-macOS-universal/README_macOS.txt
        cat gui_description.txt >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "- rt11extract_cli (CLI extractor universal)" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "- imd2raw (Conversor ImageDisk a DSK/RAW)" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "Uso:" >> RT11Extractor-macOS-universal/README_macOS.txt
        cat usage_gui.txt >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "- Desde Terminal:" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "  ./rt11extract_cli imagen.dsk -o carpeta/ (extractor)" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "  ./imd2raw imagen.imd imagen.dsk (conversor)" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "" >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "Todos los ejecutables incluyen el backend completo integrado." >> RT11Extractor-macOS-universal/README_macOS.txt
        echo "No necesitan archivos adicionales para funcionar." >> RT11Extractor-macOS-universal/README_macOS.txt
        
        # Show final package contents
        echo "Final package contents:"
        ls -la RT11Extractor-macOS-universal/
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extractor-macOS-universal
        path: RT11Extractor-macOS-universal/

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow
    
    - name: Build Linux executables with complete backend
      run: |
        export PYTHONPATH="."
        
        # 1. Build CLI extractor (main wrapper)
        pyinstaller --onefile --name "RT11Extract" --paths="backend" --paths="." --add-data "backend:backend" --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" --hidden-import="backend.filesystem_mount" backend/extractors/rt11extract
        
        # 2. Build IMD converter
        pyinstaller --onefile --name "imd2raw" --paths="backend" --paths="." backend/image_converters/imd2raw.py
        
        # 3. Build GUI with ALL backend embedded (including filesystem_mount for FUSE)
        if [ -f "icon.png" ]; then
          pyinstaller --onefile --name "RT11ExtractGUI" --icon="icon.png" --paths="backend" --paths="gui/desktop" --paths="." --add-data "backend:backend" --add-data "icon.png:." --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" --hidden-import="backend.filesystem_mount" gui/desktop/rt11extract_gui.py
        else
          pyinstaller --onefile --name "RT11ExtractGUI" --paths="backend" --paths="gui/desktop" --paths="." --add-data "backend:backend" --hidden-import="backend.extractors" --hidden-import="backend.image_converters" --hidden-import="backend.filesystems" --hidden-import="backend.filesystem_mount" gui/desktop/rt11extract_gui.py
        fi
    
    - name: Create Linux package
      run: |
        mkdir RT11Extractor-Linux-x64
        # Copy executables
        cp dist/RT11Extract RT11Extractor-Linux-x64/
        cp dist/RT11ExtractGUI RT11Extractor-Linux-x64/
        cp dist/imd2raw RT11Extractor-Linux-x64/
        # Set permissions
        chmod +x RT11Extractor-Linux-x64/RT11Extract
        chmod +x RT11Extractor-Linux-x64/RT11ExtractGUI
        chmod +x RT11Extractor-Linux-x64/imd2raw
        # Copy documentation
        cp README.md RT11Extractor-Linux-x64/
        # Create Linux-specific README
        echo "RT-11 Extractor para Linux x64" > RT11Extractor-Linux-x64/README_Linux.txt
        echo "" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "Ejecutables incluidos:" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "- RT11ExtractGUI (Interfaz grafica completa con TODO el backend integrado)" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "- RT11Extract (CLI extractor universal)" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "- imd2raw (Conversor ImageDisk a DSK/RAW)" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "Uso:" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "./RT11ExtractGUI (interfaz grafica)" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "./RT11Extract imagen.dsk -o carpeta/ (extractor)" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "./imd2raw imagen.imd imagen.dsk (conversor)" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "" >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "La GUI incluye TODOS los extractores y convertidores del backend integrados." >> RT11Extractor-Linux-x64/README_Linux.txt
        echo "No necesita archivos adicionales para funcionar." >> RT11Extractor-Linux-x64/README_Linux.txt
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extractor-Linux-x64
        path: RT11Extractor-Linux-x64/

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: .
    
    - name: Create release packages
      run: |
        # Crear archivos ZIP para cada plataforma
        for dir in RT11Extractor-*/; do
          if [ -d "$dir" ]; then
            zip -r "${dir%/}.zip" "$dir"
          fi
        done
        ls -la *.zip
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          # RT-11 Extractor - Ejecutables Completos
          
          Ejecutables con TODO el backend integrado:
          
          ## Windows x64
          - RT11ExtractGUI.exe (GUI completa)
          - RT11Extract.exe (CLI universal)  
          - imd2raw.exe (Conversor IMD)
          
          ## macOS Universal
          - RT11Extract.app (Bundle completo)
          - rt11extract_cli (CLI universal)
          - imd2raw (Conversor IMD)
          
          ## Linux x64
          - RT11ExtractGUI (GUI completa)
          - RT11Extract (CLI universal)
          - imd2raw (Conversor IMD)
          
          ### Características incluidas:
          - ✅ Extractores RT-11, Unix PDP-11, ODS-1/Files-11
          - ✅ Conversor ImageDisk (IMD) a DSK/RAW
          - ✅ Auto-detección de filesystem
          - ✅ GUI completa con todos los convertidores
          - ✅ No requiere dependencias adicionales
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-summary:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: .
      continue-on-error: true
    
    - name: Generate build summary
      run: |
        echo "# RT-11 Extractor - Build Summary" > BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        echo "Build completed with complete backend integration." >> BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        echo "## Packages built:" >> BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        
        for dir in RT11Extractor-*/; do
          if [ -d "$dir" ]; then
            echo "### $dir" >> BUILD_SUMMARY.md
            ls -la "$dir" >> BUILD_SUMMARY.md
            echo "" >> BUILD_SUMMARY.md
          fi
        done
        
        echo "## All RT11Extract executables:" >> BUILD_SUMMARY.md
        find . -name "RT11Extract*" -type f | sort >> BUILD_SUMMARY.md
        echo "" >> BUILD_SUMMARY.md
        echo "## All imd2raw executables:" >> BUILD_SUMMARY.md
        find . -name "imd2raw*" -type f | sort >> BUILD_SUMMARY.md
        
        cat BUILD_SUMMARY.md
    
    - name: Upload build summary
      uses: actions/upload-artifact@v4
      with:
        name: BUILD_SUMMARY
        path: BUILD_SUMMARY.md
