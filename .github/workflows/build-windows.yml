name: Build Windows RT-11 Extract GUI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggers

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyInstaller
        pip install Pillow
        pip install refuse
        pip install fusepy
        
    - name: Download and install WinFsp
      run: |
        # Download WinFsp installer
        Invoke-WebRequest -Uri "https://github.com/winfsp/winfsp/releases/download/v2.0/winfsp-2.0.23075.msi" -OutFile "winfsp-installer.msi"
        
        # Install WinFsp silently
        Start-Process msiexec.exe -ArgumentList "/i", "winfsp-installer.msi", "/quiet", "/norestart" -Wait
        
        # Verify installation
        if (Test-Path "C:\Program Files (x86)\WinFsp\bin\winfsp-x64.dll") {
            Write-Host "✓ WinFsp installed successfully"
        } else {
            Write-Host "✗ WinFsp installation failed"
            exit 1
        }
      shell: powershell
      
    - name: Create RT11Extract Windows executable
      run: |
        # For now, create a placeholder RT11Extract.exe that calls the Python version
        # This ensures the packaged application has the expected RT11Extract.exe
        echo '@echo off' > RT11Extract.bat
        echo 'python "%~dp0rt11extract" %*' >> RT11Extract.bat
        copy RT11Extract.bat RT11Extract.exe
      shell: cmd
      
    - name: Build with PyInstaller
      run: |
        # Create the main executable
        pyinstaller --name="RT11Extract-GUI" ^
                   --windowed ^
                   --onefile ^
                   --add-data="rt11extract;." ^
                   --add-data="rt11_fuse.sh;." ^
                   --add-data="rt11_fuse_complete.py;." ^
                   --add-data="rt11_winfsp.py;." ^
                   --add-data="rt11_winfsp.bat;." ^
                   --add-data="setup_winfsp.bat;." ^
                   --add-data="icon.png;." ^
                   --add-data="imd2raw.py;." ^
                   --add-data="RT11Extract.exe;." ^
                   --hidden-import=refuse ^
                   --hidden-import=fuse ^
                   --hidden-import=PIL ^
                   --hidden-import=PIL.Image ^
                   --hidden-import=PIL.ImageTk ^
                   rt11extract_gui.py
      shell: cmd
      
    - name: Create portable package
      run: |
        # Create a portable directory structure
        mkdir RT11Extract-Windows-Portable
        
        # Copy main executable
        copy dist\RT11Extract-GUI.exe RT11Extract-Windows-Portable\
        
        # Copy additional files
        copy rt11extract RT11Extract-Windows-Portable\
        copy rt11_fuse.sh RT11Extract-Windows-Portable\
        copy rt11_fuse_complete.py RT11Extract-Windows-Portable\
        copy rt11_winfsp.py RT11Extract-Windows-Portable\
        copy rt11_winfsp.bat RT11Extract-Windows-Portable\
        copy setup_winfsp.bat RT11Extract-Windows-Portable\
        copy icon.png RT11Extract-Windows-Portable\
        copy imd2raw.py RT11Extract-Windows-Portable\
        copy RT11Extract.exe RT11Extract-Windows-Portable\
        
        # Create README for Windows
        echo RT-11 Extract GUI for Windows > RT11Extract-Windows-Portable\README.txt
        echo ================================= >> RT11Extract-Windows-Portable\README.txt
        echo. >> RT11Extract-Windows-Portable\README.txt
        echo This package includes: >> RT11Extract-Windows-Portable\README.txt
        echo - RT11Extract-GUI.exe ^(Main application^) >> RT11Extract-Windows-Portable\README.txt
        echo - WinFsp support for filesystem mounting >> RT11Extract-Windows-Portable\README.txt
        echo - IMD to DSK conversion tools >> RT11Extract-Windows-Portable\README.txt
        echo. >> RT11Extract-Windows-Portable\README.txt
        echo To use filesystem mounting on Windows: >> RT11Extract-Windows-Portable\README.txt
        echo 1. Install WinFsp from https://winfsp.dev/ >> RT11Extract-Windows-Portable\README.txt
        echo 2. Run setup_winfsp.bat to configure environment >> RT11Extract-Windows-Portable\README.txt
        echo 3. Use the Mount as Filesystem button in the GUI >> RT11Extract-Windows-Portable\README.txt
        echo. >> RT11Extract-Windows-Portable\README.txt
        echo Supported formats: DSK, RAW, IMG, IMD >> RT11Extract-Windows-Portable\README.txt
      shell: cmd
      
    - name: Create ZIP archive
      run: |
        Compress-Archive -Path "RT11Extract-Windows-Portable\*" -DestinationPath "RT11Extract-Windows-v${{ github.run_number }}.zip"
      shell: powershell
      
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v3
      with:
        name: RT11Extract-Windows-v${{ github.run_number }}
        path: |
          RT11Extract-Windows-v${{ github.run_number }}.zip
          RT11Extract-Windows-Portable/
        retention-days: 30
        
    - name: Upload standalone executable
      uses: actions/upload-artifact@v3
      with:
        name: RT11Extract-GUI-Windows-Standalone
        path: dist/RT11Extract-GUI.exe
        retention-days: 30
