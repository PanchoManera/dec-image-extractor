name: Build RT11 Extractor GUI

on:
  push:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pillow

    - name: Build Windows Executables
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p RT11Extract-Windows
        
        # Build CLI tools
        pyinstaller --onefile --name RT11Extract --paths backend --paths . backend/extractors/rt11extract
        pyinstaller --onefile --name rt11extract_universal --paths backend --paths . backend/extractors/rt11extract_universal
        pyinstaller --onefile --name universal_extractor --paths backend --paths . backend/extractors/universal_extractor.py
        pyinstaller --onefile --name imd2raw --paths backend --paths . backend/image_converters/imd2raw.py
        
        # Build GUI
        pyinstaller --onefile --windowed --icon=rt11_icon.ico --name RT11ExtractGUI --paths backend --paths . \
          --add-data "backend/extractors;backend/extractors" \
          --add-data "backend/filesystems;backend/filesystems" \
          gui/desktop/rt11extract_gui.py
        
        # Copy all executables
        copy dist\RT11Extract.exe RT11Extract-Windows\
        copy dist\rt11extract_universal.exe RT11Extract-Windows\
        copy dist\universal_extractor.exe RT11Extract-Windows\
        copy dist\imd2raw.exe RT11Extract-Windows\
        copy dist\RT11ExtractGUI.exe RT11Extract-Windows\
        copy rt11_icon.ico RT11Extract-Windows\
        
        # Create ZIP
        7z a RT11Extract-Windows.zip RT11Extract-Windows\*

    - name: Build macOS Executables
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p RT11Extract-macOS.app/Contents/cli
        
        # Build CLI tools
        pyinstaller --onefile --name rt11extract --paths backend --paths . backend/extractors/rt11extract
        pyinstaller --onefile --name rt11extract_universal --paths backend --paths . backend/extractors/rt11extract_universal
        pyinstaller --onefile --name universal_extractor --paths backend --paths . backend/extractors/universal_extractor.py
        pyinstaller --onefile --name imd2raw --paths backend --paths . backend/image_converters/imd2raw.py
        
        # Move CLIs to bundle
        cp dist/rt11extract RT11Extract-macOS.app/Contents/cli/
        cp dist/rt11extract_universal RT11Extract-macOS.app/Contents/cli/
        cp dist/universal_extractor RT11Extract-macOS.app/Contents/cli/
        cp dist/imd2raw RT11Extract-macOS.app/Contents/cli/
        
        # Make CLIs executable
        chmod +x RT11Extract-macOS.app/Contents/cli/*
        
        # Build GUI
        pyinstaller --windowed --name RT11ExtractGUI --paths backend --paths . \
          --add-data "backend/extractors:backend/extractors" \
          --add-data "backend/filesystems:backend/filesystems" \
          --add-data "RT11Extract-macOS.app/Contents/cli:cli" \
          gui/desktop/rt11extract_gui.py
        
        # Create DMG
        hdiutil create -volname "RT11 Extract" -srcfolder dist/RT11ExtractGUI.app -ov -format UDZO RT11Extract-macOS.dmg

    - name: Upload Windows Artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: RT11Extract-Windows
        path: RT11Extract-Windows.zip

    - name: Upload macOS Artifact
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v3
      with:
        name: RT11Extract-macOS
        path: RT11Extract-macOS.dmg
