name: Build RT11 Extractor GUI

on:
  push:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Verify project structure (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Write-Host "Verifying project structure..."
        if (-not (Test-Path "backend/extractors")) {
          Write-Error "Backend extractors directory not found"
          exit 1
        }
        if (-not (Test-Path "gui/desktop/rt11extract_gui.py")) {
          Write-Error "GUI script not found"
          exit 1
        }
        Write-Host "Project structure verified"
    
    - name: Verify project structure (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "Verifying project structure..."
        if [ ! -d "backend/extractors" ]; then
          echo "ERROR: Backend extractors directory not found"
          exit 1
        fi
        if [ ! -f "gui/desktop/rt11extract_gui.py" ]; then
          echo "ERROR: GUI script not found"
          exit 1
        fi
        echo "Project structure verified"

    - name: Build Windows Executables
      if: matrix.os == 'windows-latest'
      run: |
        New-Item -ItemType Directory -Force -Path RT11Extract-Windows
        
        Write-Host "Building CLI tools..."
        if (Test-Path "backend/extractors/rt11extract") {
          pyinstaller --onefile --name RT11Extract --paths backend --paths . backend/extractors/rt11extract
        }
        if (Test-Path "backend/extractors/rt11extract_universal") {
          pyinstaller --onefile --name rt11extract_universal --paths backend --paths . backend/extractors/rt11extract_universal
        }
        if (Test-Path "backend/extractors/universal_extractor.py") {
          pyinstaller --onefile --name universal_extractor --paths backend --paths . backend/extractors/universal_extractor.py
        }
        if (Test-Path "backend/image_converters/imd2raw.py") {
          pyinstaller --onefile --name imd2raw --paths backend --paths . backend/image_converters/imd2raw.py
        }
        
        Write-Host "Building GUI..."
        pyinstaller --onefile --windowed --name RT11ExtractGUI --paths backend --paths . --add-data "backend/extractors;backend/extractors" --add-data "backend/filesystems;backend/filesystems" gui/desktop/rt11extract_gui.py
        
        Write-Host "Copying executables..."
        if (Test-Path "dist/RT11Extract.exe") { Copy-Item "dist/RT11Extract.exe" "RT11Extract-Windows/" }
        if (Test-Path "dist/rt11extract_universal.exe") { Copy-Item "dist/rt11extract_universal.exe" "RT11Extract-Windows/" }
        if (Test-Path "dist/universal_extractor.exe") { Copy-Item "dist/universal_extractor.exe" "RT11Extract-Windows/" }
        if (Test-Path "dist/imd2raw.exe") { Copy-Item "dist/imd2raw.exe" "RT11Extract-Windows/" }
        if (Test-Path "dist/RT11ExtractGUI.exe") { Copy-Item "dist/RT11ExtractGUI.exe" "RT11Extract-Windows/" }
        
        Write-Host "Creating package..."
        Compress-Archive -Path "RT11Extract-Windows/*" -DestinationPath "RT11Extract-Windows.zip"

    - name: Build macOS Executables
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p cli
        
        # Build CLI tools
        pyinstaller --onefile --name rt11extract --paths backend --paths . backend/extractors/rt11extract
        pyinstaller --onefile --name rt11extract_universal --paths backend --paths . backend/extractors/rt11extract_universal
        pyinstaller --onefile --name universal_extractor --paths backend --paths . backend/extractors/universal_extractor.py
        pyinstaller --onefile --name imd2raw --paths backend --paths . backend/image_converters/imd2raw.py
        
        # Move CLIs to cli folder
        cp dist/rt11extract cli/
        cp dist/rt11extract_universal cli/
        cp dist/universal_extractor cli/
        cp dist/imd2raw cli/
        
        # Make CLIs executable
        chmod +x cli/*
        
        # Build GUI with CLI tools included
        pyinstaller --windowed --name RT11ExtractGUI --paths backend --paths . \
          --add-data "backend/extractors:backend/extractors" \
          --add-data "backend/filesystems:backend/filesystems" \
          --add-data "cli:cli" \
          gui/desktop/rt11extract_gui.py
        
        # Create DMG
        hdiutil create -volname "RT11 Extract" -srcfolder dist/RT11ExtractGUI.app -ov -format UDZO RT11Extract-macOS.dmg

    - name: Upload Windows Artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extract-Windows
        path: RT11Extract-Windows.zip

    - name: Upload macOS Artifact
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extract-macOS
        path: RT11Extract-macOS.dmg
