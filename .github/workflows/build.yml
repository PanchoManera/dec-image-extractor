name: Build RT11 Extractor GUI

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        python-version: ['3.11']
        include:
          - os: macos-latest
            output_name: RT11ExtractGUI.app
            artifact_name: RT11ExtractGUI-macOS
          - os: windows-latest
            output_name: RT11ExtractGUI
            artifact_name: RT11ExtractGUI-Windows-x64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    # Paso específico para macOS: Compilar CLIs
    - name: Setup CLI Tools (macOS)
      if: runner.os == 'macOS'
      run: |
        # Crear directorios
        mkdir -p dist/RT11ExtractGUI.app/Contents/cli
        mkdir -p cli_build
        
        # Compilar rt11extract_cli
        cd cli_build
        cp ../backend/extractors/rt11extract rt11extract.py
        pyinstaller --onefile rt11extract.py --name rt11extract_cli
        chmod +x dist/rt11extract_cli
        cp dist/rt11extract_cli ../dist/RT11ExtractGUI.app/Contents/cli/
        
        # Compilar universal_extractor
        cp ../backend/extractors/universal_extractor.py .
        pyinstaller --onefile universal_extractor.py --name universal_extractor
        chmod +x dist/universal_extractor
        cp dist/universal_extractor ../dist/RT11ExtractGUI.app/Contents/cli/
        
        # Compilar imd2raw
        cp ../backend/image_converters/imd2raw.py .
        pyinstaller --onefile imd2raw.py --name imd2raw
        chmod +x dist/imd2raw
        cp dist/imd2raw ../dist/RT11ExtractGUI.app/Contents/cli/
        
        # Compilar rt11_fuse
        cp ../backend/filesystem_mount/rt11_fuse_universal.py .
        pyinstaller --onefile rt11_fuse_universal.py --name rt11_fuse
        chmod +x dist/rt11_fuse
        cp dist/rt11_fuse ../dist/RT11ExtractGUI.app/Contents/cli/
        
        cd ..

    # Paso específico para Windows: Compilar CLIs
    - name: Setup CLI Tools (Windows)
      if: runner.os == 'Windows'
      run: |
        # Create build directory
        mkdir cli_build
        cd cli_build
        
        # Build rt11extract_cli
        copy ..\backend\extractors\rt11extract rt11extract.py
        pyinstaller --onefile rt11extract.py --name rt11extract_cli
        
        # Build universal_extractor
        copy ..\backend\extractors\universal_extractor.py .
        pyinstaller --onefile universal_extractor.py --name rt11extract_universal
        
        # Build imd2raw
        copy ..\backend\image_converters\imd2raw.py .
        pyinstaller --onefile imd2raw.py --name imd2raw
        
        # Copy all executables to root
        copy dist\rt11extract_cli.exe ..\RT11Extract.exe
        copy dist\rt11extract_universal.exe ..\rt11extract_universal.exe
        copy dist\imd2raw.exe ..\imd2raw.exe
        
        # Create and copy mount script
        echo "@echo off" > ..\rt11_mount.bat
        echo "python %%~dp0\backend\filesystem_mount\rt11_fuse_universal.py %%*" >> ..\rt11_mount.bat
        
        cd ..

    - name: Build GUI Application
      run: |
        pyinstaller rt11extract.spec

    - name: Create ZIP Archive
      run: |
        cd dist
        if [ "${{ runner.os }}" = "macOS" ]; then
          zip -r ${{ matrix.artifact_name }}.zip RT11ExtractGUI.app
        else
          7z a ${{ matrix.artifact_name }}.zip RT11ExtractGUI/
        fi
      shell: bash

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.artifact_name }}.zip

  # Job para crear release cuando se hace push de un tag
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          RT11ExtractGUI-macOS/*.zip
          RT11ExtractGUI-Windows-x64/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
