name: Build RT-11 Extractor - macOS Enhanced

on:
  push:
    branches: [ macos-workflow-improvements ]
  pull_request:
    branches: [ macos-workflow-improvements ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "✓ Dependencies installed"
    
    - name: Debug environment
      run: |
        echo "=== Environment Debug ==="
        pwd
        echo "Python version:"
        python --version
        echo "Current directory contents:"
        ls -la
        echo "Backend structure:"
        find backend -type f -name "*.py" | head -10
        echo "GUI structure:"
        find gui -type f -name "*.py" | head -5
        
    - name: Test CLI tools directly
      run: |
        echo "=== Testing CLI tools ==="
        
        # Test rt11extract
        if [ -f "backend/extractors/rt11extract" ]; then
          echo "✓ rt11extract found"
          chmod +x backend/extractors/rt11extract
          ./backend/extractors/rt11extract --help || echo "rt11extract help failed"
        else
          echo "✗ rt11extract not found"
        fi
        
        # Test rt11extract_universal
        if [ -f "backend/extractors/rt11extract_universal" ]; then
          echo "✓ rt11extract_universal found"
          chmod +x backend/extractors/rt11extract_universal
          ./backend/extractors/rt11extract_universal --help || echo "rt11extract_universal help failed"
        else
          echo "✗ rt11extract_universal not found"
        fi
        
        # Test Python modules
        echo "Testing Python modules..."
        export PYTHONPATH="$PWD:$PWD/backend"
        python -c "import sys; print('Python path:', sys.path)"
        python -c "from backend.extractors import universal_extractor; print('✓ universal_extractor imported')" || echo "✗ universal_extractor import failed"
    
    - name: Build macOS executables (simplified)
      run: |
        echo "=== Building macOS executables ==="
        export PYTHONPATH="$PWD:$PWD/backend"
        
        # Create output directory
        mkdir -p dist
        
        # Build CLI tools one by one with detailed logging
        echo "Building rt11extract_cli (main name for GUI)..."
        if [ -f "backend/extractors/rt11extract" ]; then
          pyinstaller --onefile --name rt11extract_cli \
            --paths="$PWD" --paths="$PWD/backend" \
            --add-data "backend/extractors:backend/extractors" \
            --add-data "backend/filesystems:backend/filesystems" \
            --hidden-import="backend.extractors" \
            --hidden-import="backend.filesystems" \
            backend/extractors/rt11extract || echo "rt11extract_cli build failed"
        fi
        
        echo "Building RT11Extract (alternative name)..."
        if [ -f "backend/extractors/rt11extract" ]; then
          pyinstaller --onefile --name RT11Extract \
            --paths="$PWD" --paths="$PWD/backend" \
            --add-data "backend/extractors:backend/extractors" \
            --add-data "backend/filesystems:backend/filesystems" \
            --hidden-import="backend.extractors" \
            --hidden-import="backend.filesystems" \
            backend/extractors/rt11extract || echo "RT11Extract build failed"
        fi
        
        echo "Building rt11extract_universal..."
        if [ -f "backend/extractors/rt11extract_universal" ]; then
          pyinstaller --onefile --name rt11extract_universal \
            --paths="$PWD" --paths="$PWD/backend" \
            --add-data "backend/extractors:backend/extractors" \
            --add-data "backend/filesystems:backend/filesystems" \
            --hidden-import="backend.extractors" \
            --hidden-import="backend.filesystems" \
            backend/extractors/rt11extract_universal || echo "rt11extract_universal build failed"
        fi
        
        echo "Building universal_extractor..."
        if [ -f "backend/extractors/universal_extractor.py" ]; then
          pyinstaller --onefile --name universal_extractor \
            --paths="$PWD" --paths="$PWD/backend" \
            --add-data "backend/extractors:backend/extractors" \
            --add-data "backend/filesystems:backend/filesystems" \
            --add-data "backend/utils:backend/utils" \
            --hidden-import="backend.extractors" \
            --hidden-import="backend.filesystems" \
            --hidden-import="backend.utils.bundle_paths" \
            backend/extractors/universal_extractor.py || echo "universal_extractor build failed"
        fi
        
        echo "Building imd2raw..."
        if [ -f "backend/image_converters/imd2raw.py" ]; then
          pyinstaller --onefile --name imd2raw \
            --paths="$PWD" --paths="$PWD/backend" \
            backend/image_converters/imd2raw.py || echo "imd2raw build failed"
        fi
        
        echo "=== Build results ==="
        ls -la dist/ || echo "No dist directory created"
        
    - name: Test built executables
      run: |
        echo "=== Testing built executables ==="
        cd dist
        
        for exe in RT11Extract rt11extract_universal universal_extractor imd2raw; do
          if [ -f "$exe" ]; then
            echo "Testing $exe..."
            chmod +x "$exe"
            ./"$exe" --help || echo "$exe help failed"
            echo "✓ $exe working"
          else
            echo "✗ $exe not found"
          fi
        done
        
    - name: Build GUI (simplified approach)
      run: |
        echo "=== Building GUI ==="
        export PYTHONPATH="$PWD:$PWD/backend:$PWD/gui/desktop"
        
        # Verify GUI script exists
        gui_script="gui/desktop/rt11extract_gui.py"
        if [ ! -f "$gui_script" ]; then
          echo "ERROR: GUI script not found at $gui_script"
          exit 1
        fi
        
        echo "GUI script found, building..."
        
        # Simple GUI build
        pyinstaller --onefile --windowed --name RT11ExtractGUI \
          --paths="$PWD" \
          --paths="$PWD/backend" \
          --paths="$PWD/gui/desktop" \
          --add-data "backend/extractors:backend/extractors" \
          --add-data "backend/filesystems:backend/filesystems" \
          --hidden-import="tkinter" \
          --hidden-import="PIL" \
          --hidden-import="backend.extractors" \
          --hidden-import="backend.filesystems" \
          "$gui_script" || echo "GUI build failed"
        
        echo "=== GUI build results ==="
        ls -la dist/
        
    - name: Create macOS package
      run: |
        echo "=== Creating macOS bundle ==="
        
        # Create bundle directory structure
        bundle_dir="RT11ExtractGUI.app"
        cli_dir="$bundle_dir/Contents/Frameworks/cli"
        mkdir -p "$cli_dir"
        mkdir -p "$bundle_dir/Contents/MacOS"
        mkdir -p "$bundle_dir/Contents/Resources"
        
        # Copy CLI tools
        for tool in rt11extract_cli RT11Extract rt11extract_universal universal_extractor imd2raw; do
          if [ -f "dist/$tool" ]; then
            cp "dist/$tool" "$cli_dir"
            chmod +x "$cli_dir/$tool"
            echo "✓ Copied $tool"
          else
            echo "✗ $tool not found in dist/"
          fi
        done
        
        # Create symlink rt11extract -> rt11extract_cli for universal_extractor compatibility
        if [ -f "$cli_dir/rt11extract_cli" ]; then
          ln -s rt11extract_cli "$cli_dir/rt11extract"
          echo "✓ Created symlink rt11extract -> rt11extract_cli"
        fi
        
        # Copy GUI
        if [ -f "dist/RT11ExtractGUI" ]; then
          cp "dist/RT11ExtractGUI" "$bundle_dir/Contents/MacOS/"
          chmod +x "$bundle_dir/Contents/MacOS/RT11ExtractGUI"
          echo "✓ Copied RT11ExtractGUI"
        elif [ -d "dist/RT11ExtractGUI.app" ]; then
          cp -r "dist/RT11ExtractGUI.app"/* "$bundle_dir/"
          echo "✓ Copied RT11ExtractGUI.app contents"
        else
          echo "✗ GUI not found in dist/"
        fi
        
        # Create Info.plist
        cat > "$bundle_dir/Contents/Info.plist" << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>RT11ExtractGUI</string>
            <key>CFBundleIdentifier</key>
            <string>com.pancho.rt11extractor</string>
            <key>CFBundleName</key>
            <string>RT11 Extractor</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
            <key>CFBundleShortVersionString</key>
            <string>1.0</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
        </dict>
        </plist>
        EOF
        
        # Remove quarantine attributes and sign the bundle
        echo "=== Code signing ==="
        # Remove extended attributes that might cause quarantine issues
        xattr -dr com.apple.quarantine "$bundle_dir" 2>/dev/null || true
        
        # Sign the bundle with ad-hoc signing
        codesign --force --deep --sign - "$bundle_dir" || echo "Code signing failed (expected for GitHub Actions)"
        
        # Make the main executable executable (just in case)
        chmod +x "$bundle_dir/Contents/MacOS/RT11ExtractGUI"
        
        # Verify the bundle structure
        echo "=== Bundle verification ==="
        ls -la "$bundle_dir/Contents/"
        ls -la "$bundle_dir/Contents/MacOS/"
        ls -la "$bundle_dir/Contents/Frameworks/cli/" || echo "CLI tools directory not found"
        
        # Create package directory and copy bundle
        mkdir -p RT11Extractor-macOS
        cp -r "$bundle_dir" RT11Extractor-macOS/
        
        # Create quarantine fix script
        cat > RT11Extractor-macOS/fix_quarantine.sh << 'EOF'
        #!/bin/bash
        echo "RT-11 Extractor - macOS Quarantine Fix"
        echo "======================================"
        echo
        echo "This script removes macOS quarantine attributes that prevent"
        echo "the app from opening on first run."
        echo
        echo "You may be prompted for your password (sudo required)."
        echo
        read -p "Press Enter to continue..."
        
        # Get the directory where this script is located
        SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        APP_PATH="$SCRIPT_DIR/RT11ExtractGUI.app"
        
        if [ -d "$APP_PATH" ]; then
            echo "Removing quarantine attributes from RT11ExtractGUI.app..."
            sudo xattr -rd com.apple.quarantine "$APP_PATH"
            echo "✅ Done! You can now open RT11ExtractGUI.app normally."
        else
            echo "❌ Error: RT11ExtractGUI.app not found at $APP_PATH"
            exit 1
        fi
        
        echo
        echo "The app should now open without security warnings."
        EOF
        
        # Make the script executable
        chmod +x RT11Extractor-macOS/fix_quarantine.sh
        
        # Copy documentation
        cp README.md RT11Extractor-macOS/ || echo "README.md not found"
        
        # Create macOS README
        cat > RT11Extractor-macOS/README_macOS.txt << 'EOF'
        RT-11 Extractor para macOS
        
        Contenido:
        - RT11ExtractGUI / RT11ExtractGUI.app (Interfaz gráfica)
        - RT11Extract (Extractor CLI principal)
        - rt11extract_universal (Extractor universal)
        - universal_extractor (Extractor Python)
        - imd2raw (Conversor ImageDisk)
        
        Uso:
        - GUI: Doble click en RT11ExtractGUI.app o ejecutar ./RT11ExtractGUI
        - CLI: ./Contents/Frameworks/cli/RT11Extract imagen.dsk -o output/
        - Conversor: ./Contents/Frameworks/cli/imd2raw imagen.imd imagen.dsk
        
        Todos los ejecutables son independientes y no requieren Python instalado.
        EOF
        
        echo "=== Final package contents ==="
        ls -la RT11Extractor-macOS/
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RT11Extractor-macOS-Debug
        path: RT11Extractor-macOS/
