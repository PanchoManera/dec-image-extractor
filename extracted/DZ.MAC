.MCALL	.MODULE
.MODULE	DZ,VERSION=18,COMMENT=<RX50 Mini-Floppy Disk Handler>,AUDIT=YES

;                     	COPYRIGHT (c) 1986 BY
;             DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
.SBTTL	CONDITIONAL ASSEMBLY SUMMARY
.ENABL	LC
.SBTTL	General Comments
.SBTTL	DEFINITIONS
.MCALL	.DRDEF, .ASSUME, .BR, .ADDR
	.DRDEF	DZ,52,FILST$!SPFUN$,800.,0,0
	.DRPTR
	.DREST	CLASS=DVC.DK
	.DRSPF	<377>
	.DRSPF	<376>
.SBTTL	Constants and defaults
.IIF NDF DZ.CMA, DZ.CMA = 173206
.IIF NDF DZ.CMB, DZ.CMB = 173212
.IIF NDF DZ.IEN, DZ.IEN = 1
DZ$CS0	= 4
SPFUNC	= 100000
SYSPTR	= 54
		P1EXT	= 432
		GETVEC	= 436
PC$CSR	= 174000
PC$VEC	= 300
PC$IC1	= 173206
PC$IC2	= 173212
MMUSR0	= 177572
MMUSR3	= 172516
.IRPC	X <01234567>
KISAR'X	= 172340+<2*X>
KISDR'X	= 172300+<2*X>
.ENDR
  AP$ACF= 077406
PROCFG	= 37776
  CTI	= -10.
  SLOT0	= -14.
DZ$ID	= 2004
DZ.ID	= -4
DZ.CS0	= 0
  C0.DSK = 002
  C0.DRV = 004
  C0.MTO = 010
  C0.FN0 = 020
  C0.FN1 = 040
  C0.FN2 = 100
    C0.STA = 000
    C0.RSD = 040
    C0.RSS = 060
    C0.RED = 100
    C0.RER = 120
    C0.RAD = 140
    C0.WRT = 160
C0.DON	= 10
DZ.CS1	= 2
DZ.CS2	= 4
DZ.CS3	= 6
DZ.DB	= 14
DZ.CA	= 16
DZ.GO	= 20
DZMTRK	= 79.
RETRY	= 8.
DZNREG	= 7.
KISAR1	= 172342
.SBTTL	Installation checks
	.DRINS	DZ
	BR	1$
	BR	2$
1$:	MOV	@#SYSPTR,R3
	MOV	GETVEC(R3),R3
	TST	(R3)+
2$:	MOV	#DZ$ID,-(SP)
	CALL	@R3
	MOV	(SP)+,R3
	RETURN
FINDRV:	.ADDR	#DEVNAM,R0
	MOV	PC,-(SP)
	ADD	#DAREA-.,@SP
	EMT	342
	BCS	O.BAD
	MOV	DAREA+4,R1
	BEQ	O.BAD
	BR	O.GOOD
DAREA:	.BLKW	4
DEVNAM:	.RAD50	/DZ /
BAREA:	.BYTE	17,10
	.BLKW	0
	.BLKW	0
	.WORD	256.
	.WORD	0
	.IIF GT,<.-356>	.ERROR
	.SBTTL 	SET options
	.DRSET	RETRY,	RETRY,			O.RTRY,	NUM
	.IF NE ERL$G
	.DRSET	SUCCES,	-1,			O.SUCC,	NO
	.ENDC
	.SBTTL	Handler modification routines
O.RTRY:	CMP	R0,R3
	BHI	O.BAD
	MOV	R0,DRETRY
	BNE	O.GOOD
	BR	O.BAD
	.IF NE ERL$G
O.SUCC:	MOV	#0,R3
N.SUCC:	MOV	R3,SCSFLG
					.ASSUME O.SUCC+4 EQ N.SUCC
	BR	O.GOOD
	.ENDC
O.GOOD:	TST	(PC)+
O.BAD:	SEC
	RETURN
 .IIF	GT,<.-1000> .ERROR
.SBTTL	Driver request entry point
.ENABL	LSB
	.DRBEG	DZ
	.IF NE ERL$G
	BR	DZENT
SCSFLG:	.WORD	0
				.ASSUME . LE DZSTRT+1000
DZENT:
	.ENDC
	ASRB	(PC)+
BLOKDZ:	 .WORD	1
	BCC	10$
	MOV	@#SYSPTR,R4
.IF NE	MMG$T
	MOV	P1EXT(R4),(PC)+
$P1EXT:	 .WORD	P1EXT
.ENDC
	MOV	#DZ$ID,-(SP)
	MOV	GETVEC(R4),R4
	TST	(R4)+
	CALL	@R4
	BCS	80$
	ADD	(SP)+,DZCSA
	MOV	#DZ$ID,-(SP)
	TST	(R4)+
	CALL	@R4
	BCC	8880$
80$:	COM	(SP)+
	ROLB	BLOKDZ
	JMP	DZERR
DRETRY:	.WORD	RETRY
8880$:	MOV	(SP)+,INTENB
10$:
	MOV	#9.,DZTRY
	MOV	#110,R0
	BIS	(PC)+,R0
INTENB:	 .WORD	DZ.IEN
	MOV	#50,R2
	BIS	INTENB,R2
	MOV	(PC)+,R1
IRRA:	 .WORD	DZ.CMA
	MOV	R0,@R1
	MOV	R2,@R1
	MOV	(PC)+,R1
IRRB:	 .WORD	DZ.CMB
	MOV	R0,@R1
	NOP
	MOV	R2,(PC)+
ENABLE:	 .WORD	0
	MOV	#70,R2
	BIS	INTENB,R2
	MOV	R2,(PC)+
DSABLE:	 .WORD	0
	CLR	(PC)+
SPFUNF:	 .WORD	0
	MOV	DZCQE,R3
	MOV	(R3)+,R5
	MOV	#C0.RED,R4
	MOVB	(R3)+,R1
	MOVB	(R3)+,R0
	ASRB	R0
	BCC	20$
	BIS	#C0.DSK,R4
20$:	ASRB	R0
	BCC	30$
	BIS	#C0.DRV,R4
30$:	MOV	(R3)+,R0
	MOV	(R3)+,R2
	BPL	40$
	BIS	#C0.WRT,R4
	NEG	R2
40$:	ASL	R1
	MOV	R1,SPFUNF
	ADD	PC,R1
	ADD	CHGTBL-.(R1),R4
	MOV	R4,DZFUN2
	TST	SPFUNF
	BNE	90$
	ASL	R2
	MOV	(PC)+,R4
	 .BYTE	-7.,-10.
50$:	CMP	#1280.,R5
	BHI	60$
	ADD	#-1280.,R5
60$:	ROL	R5
	INCB	R4
	BLE	50$
	MOVB	R5,R1
	ADD	R4,R5
	MOV	R1,R4
	ASL	R1
70$:	SUB	#10.,R1
	BGT	70$
	MOV	R1,TRKOFF
	BR	100$
90$:	SWAB	R5
	BISB	R2,R5
	MOV	#512.,R2
100$:	MOV	R0,(PC)+
BUFRAD:	 .WORD	0
	MOV	R5,(PC)+
TRACK:	 .BYTE	0
SECTOR:	 .BYTE	0
	MOV	R2,(PC)+
BYTCNT:	 .WORD	0
.IF NE	MMG$T
	TST	(R3)+
	MOV	@R3,PARVAL
.ENDC
	.BR	DZINIT
.DSABL	LSB
.SBTTL	Start transfer or retry
	.ENABL	LSB
DZINIT:	MOV	DZCSA,R4
	MOV	R4,R5
	ADD	#DZ.DB,R5
10$:	MOV	DZFUN2,R0
	MOV	R0,-(SP)
	BIC	#^C<C0.FN0!C0.FN1!C0.FN2>,@SP
	CMP	#C0.WRT,(SP)+
	BNE	30$
	TST	DZTRY
	BNE	20$
	MOV	DRETRY,DZTRY
20$:	JSR	R0,SILOFE
	 MOVB	(R2)+,@R5
	 MOV	R1,@R5
30$:	MOVB	SECTOR,R2
	BGT	50$
	SUB	#-6.,R2
	BGT	40$
	ADD	#4.,R2
	SEC
40$:	ROL	R2
	ADD	(PC)+,R2
TRKOFF:	 .WORD	0
	BGT	50$
	ADD	#10.,R2
50$:	MOVB	R0,@R4
	MOV	TRACK,R0
	CMPB	R0,#DZMTRK+1
	BNE	60$
	CLR	R0
60$:	MOVB	R0,DZ.CS1(R4)
	MOVB	R2,DZ.CS2(R4)
	CLRB	DZ.GO(R4)
	RETURN
DZERR:	MOV	DZCQE,R4
	BIS	#HDERR$,@-(R4)
	BR	DZABRT
.SBTTL	Interrupt and abort entry points
	.DRAST	DZ,5
	.FORK	DZFBLK
	MOV	(PC)+,R0
DZFUN2:	 .WORD	0
	MOV	#512.,R3
	MOV	(PC)+,R4
DZCSA:	 .WORD	DZ$CS0
	MOV	R4,R5
	ADD	#DZ.DB,R5
	TSTB	@R4
	BMI	DZRTRY
	MOV	DRETRY,DZTRY
	MOV	R0,-(SP)
	BIC	#17,@SP
	CMP	#C0.WRT,(SP)+
	BEQ	70$
	JSR	R0,SILOFE
	 MOVB	@R5,(R2)+
	 MOV	@R5,R2
	MOV	#1,DZTRY
70$:	INCB	SECTOR
	BNE	80$
	ADD	#-10.*256.+1,TRACK
	ADD	#2,TRKOFF
	BLE	80$
	SUB	#10.,TRKOFF
80$:
.IF EQ	MMG$T
	ADD	R3,BUFRAD
.IFF
	ADD	#8.,PARVAL
.ENDC
	SUB	R3,BYTCNT
	BHI	10$
90$:
.IF NE	ERL$G
	TST	SCSFLG
	BNE	100$
	MOV	#DZ$COD*400+377,R4
	MOV	DZCQE,R5
	CALL	@$ELPTR
.ENDC
DZABRT:
	CLR	DZFBLK+2
100$:	MOV	DSABLE,@IRRA
	MOV	DSABLE,@IRRB
	.DRFIN	DZ
.DSABL	LSB
.SBTTL	DZRTRY	- Error handling
.ENABL	LSB
DZRTRY:
.IF NE	ERL$G
	.ADDR	#DZRBUF,R3
	MOV	R3,R2
	MOV	#DZNREG,R0
10$:	MOV	(R4)+,(R3)+
	DEC	R0
	BNE	10$
	MOVB	DRETRY,R3
	SWAB	R3
	BISB	#DZNREG,R3
	MOV	#<DZ$COD*400>,R4
	BISB	DZTRY,R4
	DECB	R4
	MOV	DZCQE,R5
	CALL	@$ELPTR
	MOV	DZCSA,R4
.ENDC
	DEC	(PC)+
DZTRY:	 .WORD	0
	BGT	30$
20$:	JMP	DZERR
30$:	MOV	DZ.CS1(R4),R0
	.ADDR	#DZERRT,R3
40$:	TSTB	@R3
	BEQ	20$
	CMP	R0,(R3)+
	BNE	40$
	JMP	DZINIT
.DSABL	LSB
.SBTTL	SILOFE - Fill or empty the silo
.ENABL	LSB
SILOFE:	MOV	(R0)+,20$
	MOV	(R0)+,40$
	MOV	#512.,R3
	CLRB	DZ.CA(R4)
	MOV	BUFRAD,R2
	MOV	BYTCNT,R1
	BEQ	50$
.IF NE	MMG$T
	JSR	R0,@$P1EXT
	.WORD	PARVAL-.
.ENDC
	CMP	R1,R3
	BLOS	10$
	MOV	R3,R1
10$:	SUB	R1,R3
20$:	HALT
	DEC	R1
	BNE	20$
.IF NE	MMG$T
PARVAL:	.WORD	0
.ENDC
30$:	TST	R3
	BEQ	50$
40$:	HALT
	DEC	R3
	BNE	40$
50$:	MOV	#512.,R3
	NOP
	RTS	R0
.DSABL	LSB
.SBTTL	Tables, fork block, end of driver
	.WORD	C0.WRT-C0.RED
	.WORD	C0.RED-C0.RED
CHGTBL:	.WORD	0
DZFBLK:	.WORD	0,0,0,0
.NLIST	BEX
DZERRT:	.WORD	060
	.WORD	140
	.WORD	200
	.WORD	210
	.WORD	0,0,0,0
.LIST	BEX
.IF NE	ERL$G
DZRBUF:	.BLKW	DZNREG
.ENDC
.SBTTL	VECTOR TABLE
DZ$VEC	=	PC$VEC
	.DRVTB	DZ,0,DZINT,SLOTID=DZ$ID
.SBTTL	Bootstrap read routine
	.DRBOT	DZ,BOOT1,READ1,CONTROL=<CBUS>
.	= DZBOOT+40
BOOT1:	JMP	@#BOOT-DZBOOT
.ENABL	LSB
.	= DZBOOT+120
READ1:	MOV	@#B$DEVU,-(SP)
	BR	10$
READ:	MOV	BTUNIT,-(SP)
10$:	CALL	FNDCSR
	MOV	(SP)+,R4
	ASL	R4
	BIS	#C0.RED,R4
	MOV	R4,(PC)+
SELBIT:	 .WORD	0
	ASL	R1
	MOV	(PC)+,R4
	 .BYTE	-7.,-10.
20$:	CMP	#1280.,R0
	BHI	30$
	ADD	#-1280.,R0
30$:	ROL	R0
	INCB	R4
	BLE	20$
	MOVB	R0,R5
	ADD	R4,R0
	MOV	R5,R4
	ASL	R5
40$:	SUB	#10.,R5
	BGT	40$
	MOV	R5,TRKOF
	MOV	R0,(PC)+
TRK:	 .BYTE	0
SEC:	 .BYTE	0
50$:	MOVB	SEC,R0
	SUB	#-6.,R0
	BGT	60$
	ADD	#4.,R0
	SEC
60$:	ROL	R0
	ADD	(PC)+,R0
TRKOF:	 .WORD	0
	BGT	70$
	ADD	#10.,R0
70$:	MOV	(PC)+,R5
DZCSR0:	 .WORD	PC$CSR+DZ$CS0
	MOV	SELBIT,@R5
	MOVB	TRK,DZ.CS1(R5)
	MOVB	R0,DZ.CS2(R5)
	MOV	R5,R4
	ADD	#DZ.DB,R4
	CLRB	DZ.GO(R5)
80$:	BITB	#C0.DON,@R5
	BEQ	80$
	CLRB	DZ.CA(R5)
	MOV	#512.,R0
90$:	MOVB	@R4,(R2)+
	DEC	R1
	BEQ	100$
	DEC	R0
	BNE	90$
100$:	INCB	SEC
	BNE	110$
	ADD	#-10.*256.+1,TRK
	ADD	#2,TRKOF
	BLE	110$
	SUB	#10.,TRKOF
110$:	TST	R1
	BNE	50$
	CLC
	RETURN
.DSABL	LSB
FNDCSR:	ASRB	(PC)+
	 .WORD	1
	BCC	3$
	CLR	R5
	BISB	@#173050,R5
	SWAB	R5
	ASL	R5
	SUB	#200,R5
	MOV	R5,@#KISAR1
	MOV	#AP$ACF,R5
	MOV	R5,@#KISDR1
	CLR	@#KISAR0
	MOV	R5,@#KISDR0
	MOV	#177600,@#KISAR7
	MOV	R5,@#KISDR7
	BIS	#20,@#MMUSR3
	INC	@#MMUSR0
	MOV	#CTI+PROCFG,R3
				.ASSUME	SLOT0 EQ CTI-4
	MOV	@R3,R4
	MOV	R4,R5
1$:	TST	-(R3)
	CMP	-(R3),#DZ$ID
	BEQ	2$
	SOB	R5,1$
	CLR	@#MMUSR0
	JMP	@#<BIOERR-DZBOOT>
2$:	CLR	@#MMUSR0
	SUB	R5,R4
	ASH	#7.,R4
	ADD	R4,DZCSR0
3$:	RETURN
.	= DZBOOT+556
BOOT:	CALL	FNDCSR
	MOV	DZCSR0,R2
	MOV	@R2,R1
	BIC	#^C<C0.DSK!C0.DRV>,R1
	.ASSUME	<C0.STA> EQ 0
	MOV	R0,(PC)+
BTUNIT:	 .WORD	0
	ASR	R0
	BIS	R0,R1
	MOV	R1,@R2
	CLRB	DZ.GO(R2)
10$:	BIT	#<C0.DON>,@R2
	BEQ	10$
	MOV	#10000,SP
	MOV	#2,R0
	MOV	#<4*256.>,R1
	MOV	#1000,R2
	CALL	READ
	MOV	#READ1-DZBOOT,@#B$READ
	MOV	BTUNIT,@#B$DEVU
	JMP	@#B$BOOT
	.DREND	DZ
.END
                                                                                                                                                                                        