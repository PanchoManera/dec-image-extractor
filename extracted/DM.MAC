.MCALL	.MODULE
.MODULE	DM,VERSION=09,COMMENT=<RK06/07 Disk Handler>,AUDIT=YES

;
;                    COPYRIGHT (c) 1984,1985,1986 BY
;                DIGITAL EQUIPMENT CORPORATION, MAYNARD,
;                 MASSACHUSETTS.   ALL RIGHTS RESERVED.
;
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
; SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
;
.SBTTL	CONDITIONAL ASSEMBLY SUMMARY
	.SBTTL	MACROS AND DEFINITIONS
	.MCALL	.DRDEF, .ASSUME, .BR	.ADDR
	SYSPTR	=:	54
	CONFG2	=:	370
		PROS$	=:	020000
	P1EXT =: 432
.READ	=:	375
.WRITE	=:	375
..READ	=:	010
..WRIT	=:	011
SYSCHN	=:	17
	.IIF NDF RK6$S, RK6$S=0
	RK6$B	=: 1
	RK6$S	=: 1
	DMDSI6	=: 410.*3.*22.
	DMDSI7	=: 814.*3.*22.
	.DRDEF	DM,23,FILST$+<SPFUN$*RK6$B>+VARSZ$,DMDSI6,177440,210
	.DRPTR
	.DREST	CLASS=DVC.DK,MOD=DVM.DM,REPLACE=RTABLE
.IF NE RK6$B
	.DRSPF	<377>
	.DRSPF	<376>
	.DRSPF	<375>
	.DRSPF	<373>
.ENDC; NE RK6$B
.IIF	NDF	EIS$I	EIS$I = MMG$T
.IIF	EQ	EIS$I	.MCALL	SOB
	RETRY	=: 8.
	SPFUNB	=: 100000
	SPERR	=: 077400
	SPHARD	=: 000200
	SPRCAL	=: 000010
	SPOFF	=: 000004
	SPRETY	=: 000002
	SPECC	=: 000001
	SPREAD	=: 377
	SPWRIT	=: 376
	SPREP	=: 374
	SPDSIZ	=: 373
	DMNREG	=: 13.
	DMNRG1	=: 7.
	DMNRG2	=: 4.
	RKCS1	=: DM$CSR
	RKWC	=: DM$CSR+2
	RKBA	=: DM$CSR+4
	RKDA	=: DM$CSR+6
	RKCS2	=: DM$CSR+10
	RKDS	=: DM$CSR+12
	RKER	=: DM$CSR+14
	RKASOF	=: DM$CSR+16
	RKDC	=: DM$CSR+20
	RKECPS	=: DM$CSR+30
	RKECPT	=: DM$CSR+32
	CERR	=: 100000
	DI	=: 040000
	SPAR	=: 020000
	CDT	=: 002000
	CTO	=: 004000
	RDY	=: 000200
	IE	=: 000100
	GO	=: 000001
	DLT	=: 100000
	WCE	=: 040000
	UPE	=: 020000
	NED	=: 010000
	NEM	=: 004000
	PGE	=: 002000
	MDS	=: 001000
	UFE	=: 000400
	SCLR	=: 000040
	DDT	=: 000400
	VV	=: 000100
	DROT	=: 000040
	DCLO	=: 000020
	ACLO	=: 000010
	OFST	=: 000004
	DCK	=: 100000
	UNS	=: 040000
	OPI	=: 020000
	DTE	=: 010000
	WLE	=: 004000
	IDAE	=: 002000
	COE	=: 001000
	HVRC	=: 000400
	BSE	=: 000200
	ECH	=: 000100
	DTYE	=: 000040
	FMTE	=: 000020
	DRPAR	=: 000010
	NXF	=: 000004
	SKI	=: 000002
	ILF	=: 000001
	PCKACK	=: 2
	RECAL	=: 12
	SETOFF	=: 14
	READAT	=: 20
	WRITE	=: 22
	.SBTTL	INSTALLATION CODE
	.DRINS	DM
	BR	10$
				.ASSUME . EQ INSSYS
	BR	20$
10$:	MOV	@#SYSPTR,R0
	BIT	#PROS$,CONFG2(R0)
	BNE	30$
20$:	TST	(PC)+
30$:	SEC
	RETURN
O.SYWL:
	MOV	@SP,R0
	INC	R0
	CMPB	#BR/400,(R0)+
	BNE	O.BAD
	MOV	R0,@SP
	BR	O.BAD
RTABLE:	.BYTE	1,44.,5.,3.,22.,0
.Assume	. LE 400,MESSAGE=<;Install code too big>
	.SBTTL	SET OPTIONS
	.DRSET	CSR,	160000,	O.CSR,	OCT
	.DRSET	VECTOR,	500,	O.VEC,	OCT
	.DRSET	RETRY,	RETRY,	O.RTRY,	NUM
	.IF NE ERL$G
	.DRSET	SUCCES,	-1,	O.SUCC,	NO
	.ENDC
	BTCSR	= <DMEND-DMSTRT>+<BOTCSR-DMBOOT>+1000
O.CSR:	CMP	R0,R3
	BLO	O.BAD
	MOV	R0,INSCSR
	MOV	R0,DISCSR
	.ADDR	#BAREA+4,R1
	.ADDR	#1000,R2
	MOV	R2,(R1)
	MOV	#BTCSR/1000,-(R1)
	TST	-(R1)
	MOV	R0,R3
	ADD	#RKCS2-RKCS1,R3
	MOV	R1,R0
	EMT	.READ
	BCS	O.BAD
	MOV	R3,<BTCSR&777>(R2)
	MOV	R1,R0
					.ASSUME ..READ+1 EQ ..WRIT
	INCB	1(R0)
	EMT	.WRITE
	BCS	O.SYWL
	MOV	R1,R0
					.ASSUME ..WRIT-1 EQ ..READ
	DECB	1(R0)
	MOV	#1,2(R0)
	EMT	.READ
	BCS	O.BAD
	MOV	R3,DMCSR
O.GOOD:	TST	(PC)+
O.BAD:	SEC
	RETURN
O.VEC:	CMP	R0,R3
	BHIS	O.BAD
	BIT	#3,R0
	BNE	O.BAD
	MOV	R0,DMSTRT
	BR	O.GOOD
O.RTRY:	CMP	R0,R3
	BHI	O.BAD
	MOV	R0,DRETRY
	BNE	O.GOOD
	BR	O.BAD
BAREA:	.BYTE	SYSCHN,..READ
	.BLKW
	.BLKW
	.WORD	256.
	.WORD	0
	.IF NE ERL$G
O.SUCC:	MOV	#0,R3
N.SUCC:	MOV	R3,SCSFLG
					.ASSUME O.SUCC+4 EQ N.SUCC
	BR	O.GOOD
	.ENDC
.Assume	. LE 1000,MESSAGE=<;Set code too big>
	.SBTTL	DRIVER ENTRY
	.DRBEG	DM
	.ENABL LSB
	.IF NE	MMG$T
	MOV	@#SYSPTR,R5
	MOV	P1EXT(R5),(PC)+
$P1EXT:	 .BLKW	1
	.ENDC
DMBEGN:	MOV	DMCQE,R5
	.IF NE	RK6$B
	CLR	(PC)+
BADBLK:	 .BYTE	0
	 .BYTE	0
	CMPB	Q$FUNC(R5),#SPREP
	BEQ	1$
	BR	4$
BLK1RD:	INCB	BADBLK
1$:	INCB	BADBLK
	.ADDR	#BBUF,R3
	MOV	R3,BADD
	JSR	R3,STBQUE
	 .WORD	64.
	 .WORD	1
	.ENDC
4$:	MOV	#READAT+GO+IE,DMFUNC
	.IF NE	RK6$B
	 .IF NE	MMG$T
	MOV	Q$PAR(R5),(PC)+
SPPAR:	 .WORD	0
	 .ENDC;NE MMG$T
	MOV	#SPFUNB,SPFUN
	CMPB	Q$FUNC(R5),#SPWRIT
	BHI	DMSPFA
	BEQ	DMWRIT
	CLR	(PC)+
SPFUN:	 .WORD	0
	.ENDC;NE RK6$B
	TST	Q$WCNT(R5)
	BNE	10$
	JMP	DMEXIT
10$:	BPL	DMRETY
	NEG	Q$WCNT(R5)
	MOV	#WRITE+GO+IE,DMFUNC
	BR	DMRETY
DMWRIT:	MOV	#WRITE+GO+IE,DMFUNC
DMSPFA:	MOV	Q$BUFF(R5),(PC)+
SPBUFA:	 .WORD	0
	ADD	#2,Q$BUFF(R5)
	.IF NE MMG$T
	CMP	Q$BUFF(R5),#40000
	BLO	DMRETY
	SUB	#20000,Q$BUFF(R5)
	ADD	#200,Q$PAR(R5)
	.ENDC
DMRETY:	MOV	(PC)+,(PC)+
DRETRY:	 .WORD	RETRY
.Assume . LE DMSTRT+1000,MESSAGE=<;Set code object not in block 1>
RETCNT:	 .WORD	0
DMRSET:	CALL	DMROFF
	.DSABL LSB
DMSET:	MOV	(PC)+,R4
DMCSR:	 .WORD	RKCS2
.Assume . LE DMSTRT+1000,MESSAGE=<;Set code object not in block 1>
	MOV	(R5)+,R3
					.ASSUME Q$BLKN+2 EQ Q$FUNC
	TSTB	(R5)+
					.ASSUME Q$FUNC+1 EQ Q$UNIT
	MOVB	(R5)+,R0
	BIC	#^C<7>,R0
	MOV	R0,@R4
	MOV	#GO,RKCS1-RKCS2(R4)
2$:	BIT	#RDY!CERR,RKCS1-RKCS2(R4)
	BEQ	2$
	MOV	RKDS-RKCS2(R4),R1
	BIC	#^C<DDT>,R1
	ASL	R1
	ASL	R1
	BIS	R1,DMFUNC
	MOV	R1,(PC)+
DMTYPE:	 .WORD	0
					.ASSUME Q$UNIT+1 EQ Q$BUFF
	CMPB	Q$FUNC-Q$BUFF(R5),#SPDSIZ
	BNE	4$
	MOV	#DMDSIZ,SPFUN
	TST	DMTYPE
	BEQ	3$
	MOV	#DMDSI7,SPFUN
3$:	MOV	@R5,SPBUFA
	MOV	#SCLR,@R4
	JMP	DMSPEX
4$:	BIT	#VV,RKDS-RKCS2(R4)
	BNE	1$
	MOV	#-1,BADRB1
1$:	MOV	#SCLR,@R4
	MOV	R0,@R4
	MOV	DMTYPE,RKCS1-RKCS2(R4)
	BIS	#PCKACK+GO,RKCS1-RKCS2(R4)
	MOV	R0,(PC)+
DMUNIT:	 .WORD	0
	CMP	R0,BADRB1
	BEQ	5$
	MOV	#-1,BADRB1
5$:	JSR	R0,DIV
	 .WORD	3.*22.
	MOV	R2,R1
	JSR	R0,DIV
	 .WORD	22.
	SWAB	R2
	BISB	R3,R2
3$:	BIT	#CERR!RDY,RKCS1-RKCS2(R4)
	BEQ	3$
4$:	MOV	R1,RKDC-RKCS2(R4)
	MOV	R2,-(R4)
	.IF EQ	MMG$T
BUSADD:	MOV	(R5)+,-(R4)
	.IFF
	 .IF NE	RK6$B
BUSADD:	TSTB	BADBLK
	BEQ	1$
	MOV	(R5)+,-(R4)
	BR	2$
	 .ENDC
1$:	CALL	@$MPPTR
	MOV	(SP)+,-(R4)
	ASL	(SP)
	ASL	(SP)
	ASL	(SP)
	ASL	(SP)
	BIC	#1400,DMFUNC
	BIS	(SP),DMFUNC
 	BIT	#36000,(SP)+
	BEQ	2$
	MOV	DMCQE,R5
	JMP	DMHENL
	.ENDC
					.ASSUME Q$BUFF+2 EQ Q$WCNT
2$:	MOV	(R5)+,-(R4)
	NEG	@R4
	BEQ	DMDONJ
	MOV	(PC)+,-(R4)
DMFUNC:	 .WORD	0
DMWAIT:	RETURN
DMDONJ:	JMP	DMDONE
	.IF NE ERL$G
SCSFLG:	.WORD	0
.Assume . LE DMSTRT+1000,MESSAGE=<;Set code object not in block 1>
	.ENDC
	.SBTTL	INTERRUPT SERVICE ENTRY
	.ENABL	LSB
	.DRAST	DM,5
	MOV	DMCQE,R5
	TST	BADBLK
	BEQ	3$
	MOV	SAVCQE,R5
3$:	MOV	DMCSR,R4
	ADD	#RKCS1-RKCS2,R4
	BIT	#READAT&WRITE,@R4
	BNE	DMRDWR
	.FORK	DMFBLK
	BIT	#CERR!DI,@R4
	BEQ	DMWAIT
DMSETP:	BPL	DMST1
DMCERR:	CLR	R1
RECHK:	BIC	#^C<OPI!SKI>,R1
	NEG	R1
	DECB	RETCNT
	BGT	1$
DMHERJ:	JMP	DMHERR
1$:
	.IF NE	RK6$S
	BIS	#SPRETY,SPFUN
	.ENDC
	BCS	2$
DMST1:	JMP	DMSET
2$:	MOV	#SCLR,@DMCSR
	MOV	DMUNIT,@DMCSR
	.IF NE	RK6$S
	BIS	#SPRCAL,SPFUN
	.ENDC
	MOV	DMTYPE,@R4
	BIS	#IE!RECAL!GO,@R4
	CALL	DMROFF
	BR	DMWAIT
	.DSABL	LSB
DMRDWR:	TST	@R4
	.IF NE	ERL$G
	BMI	1$
	.FORK	DMFBLK
	BR	DMDONJ
	.IFF
	BPL	DMDONJ
	.ENDC
1$:	.FORK	DMFBLK
	MOV	DMCSR,R3
	MOV	RKER-RKCS1(R4),R1
	.IF NE	RK6$B
	TST	SPFUN
	BEQ	USERR
	BIT	#BSE,R1
	BEQ	USERR
	BIS	#SPHARD,SPFUN
	BR	DMHENJ
	.ENDC
USERR:	BIT	#WLE!COE,R1
	BNE	10$
	BIT	#NED!NEM,(R3)
	BEQ	HARDCK
10$:	JMP	DMHERR
HARDCK:	BIT	#NXF!ILF,R1
	BEQ	USERR1
DMHENJ:	JMP	DMHENL
USERR1:	BIT	#PGE,@R3
	BNE	DMHENJ
	.IF NE	ERL$G
	BIT	#BSE,R1
	BNE	LOGERE
	CALL	LOGERR
LOGERE:
	.ENDC
	BIT	#UNS+DTYE+FMTE,R1
	BNE	DMHERJ
	TST	@R3
	BMI	SUBDIV
	BIT	#BSE!DCK!OPI!HVRC!ECH!SKI,R1
	BEQ	DMCERR
	.ENABL LSB
SUBDIV:	MOV	RKWC-RKCS1(R4),R0
	ADD	Q$WCNT(R5),R0
	MOV	R0,R2
	BEQ	BSECON
	BIT	#BSE!HVRC!OPI!SKI,R1
	BNE	2$
	DEC	R0
2$:	BIC	#377,R0
	TST	R1
	BPL	BSECON
	BIT	#ECH,R1
	BNE	BSECON
	MOV	R2,-(SP)
	CALL	ECC
	.IF NE	RK6$S
	BIS	#SPECC,SPFUN
	.ENDC
	MOV	(SP)+,R0
	CLR	R1
BSECON:	SUB	R0,Q$WCNT(R5)
	BEQ	DMDONE
	.IF EQ	MMG$T
	ADD	R0,Q$BUFF(R5)
	ADD	R0,Q$BUFF(R5)
	.ENDC
	SWAB	R0
					.ASSUME Q$BLKN EQ 0
	ADD	R0,@R5
	.IF NE	MMG$T
	ASL	R0
	ASL	R0
	ASL	R0
	ADD	R0,Q$PAR(R5)
	.ENDC
	.IF NE	RK6$B
	BIT	#BSE!HVRC,R1
	BEQ	NOBSE
	TST	(PC)+
BADRB1:	 .WORD	-1
	BPL	3$
	MOV	DMFUNC,SAVFUN
	JMP	BLK1RD
BADCON:	MOV	SAVFUN,DMFUNC
3$:
	.ADDR	#BBUF,R2
5$:	TST	(R2)
	BEQ	NOBSE
					.ASSUME Q$BLKN EQ 0
	CMP	(R5),(R2)+
	BEQ	6$
	TST	(R2)+
	BR	5$
6$:	MOV	(R2),NEWBLK
	MOV	Q$BUFF(R5),BADD
	 .IF NE	MMG$T
	MOV	Q$PAR(R5),BPAR
	 .ENDC
	MOV	Q$WCNT(R5),NEWWC
	CMP	Q$WCNT(R5),#256.
	BLOS	10$
	MOV	#256.,NEWWC
10$:	JSR	R3,STBQUE
NEWWC:	 .WORD	256.
NEWBLK:	 .WORD	0
	INCB	BADBLK+1
DMRSEJ:	JMP	DMRSET
	.ENDC
	.DSABL	LSB
NOBSE:	TST	R0
	BNE	DMRSEJ
	BIT	#HVRC!ECH,R1
	BEQ	RECHKJ
	DECB	OFFCNT
	BGT	DMSETJ
	ADD	#2,OFFPTR
	MOV	@OFFPTR,R0
	MOVB	R0,OFFCNT
	BMI	DMHERR
	.IF NE	RK6$S
	BIS	#SPOFF,SPFUN
	.ENDC
	CLRB	R0
	SWAB	R0
	MOV	#SCLR,@R3
	MOV	DMUNIT,@R3
	MOV	R0,RKASOF-RKCS1(R4)
	MOV	DMTYPE,@R4
	BIS	#IE!SETOFF!GO,@R4
	RETURN
RECHKJ:	JMP	RECHK
DMSETJ:	JMP	DMSET
DMHERR:
	.IF NE	ERL$G
	CALL	LOGERR
	.ENDC
					.ASSUME Q$CSW EQ -2
DMHENL:	BIS	#HDERR$,@-(R5)
	BIS	#CERR,@R4
	.IF NE	RK6$S
	BIS	#SPERR,SPFUN
	.ENDC
	BR	DMRRST
DMDONE:
	.IF NE	RK6$B
	TST	BADBLK
	BEQ	DMCOMP
	 .IF EQ	ERL$G
	.FORK	DMFBLK
	 .ENDC
	MOV	DMCQE,R5
	CMP	BADBLK,#2
	BLO	DMCOMP
	BHI	1$
	CLR	BADBLK
	MOV	DMUNIT,BADRB1
	JMP	BADCON
1$:	CLR	BADBLK
	MOV	NEWWC,R0
	CLR	R1
	JMP	BSECON
	.ENDC
DMCOMP:
	.IF NE	ERL$G
	BIT	#<WRITE-READAT>,DMFUNC
	BEQ	DMEL3
	NEG	Q$WCNT(R5)
DMEL3:	TST	SCSFLG
	BNE	DMRRST
	MOV	#DM$COD*400+377,R4
	MOV	DMCQE,R5
	CALL	@$ELPTR
	MOV	DMCSR,R4
	ADD	#RKCS1-RKCS2,R4
	.ENDC
DMRRST:	CLR	@R4
	.IF NE	RK6$B
	TST	SPFUN
	BPL	DMEXIT
DMSPEX:	MOV	SPBUFA,R5
	 .IF NE	MMG$T
	MOV	DMCQE,R4
	MOV	R5,Q$BUFF(R4)
	MOV	SPPAR,Q$PAR(R4)
	MOV	SPFUN,-(SP)
	CALL	@$PTWRD
	 .IFF
	MOV	SPFUN,(R5)
	 .ENDC
	.ENDC
DMEXIT:	.DRFIN	DM
DMROFF:	CLR	(PC)+
OFFCNT:	 .WORD	0
	.ADDR	#OFFTAB-2,-(SP)
	MOV	(SP)+,(PC)+
OFFPTR:	 .WORD	0
	RETURN
DIV:	MOV	R3,R2
	CLR	R3
	MOV	#16.,-(SP)
1$:	ASL	R2
	ROL	R3
	CMP	@R0,R3
	BHI	2$
	SUB	@R0,R3
	INC	R2
2$:	DEC	@SP
	BNE	1$
	CMP	(SP)+,(R0)+
	RTS	R0
ECC:	MOV	RKECPS-RKCS1(R4),R2
	DEC	R2
	MOV	R2,-(SP)
	BIC	#17,@SP
	BIC	@SP,R2
	ASR	@SP
	ASR	@SP
	ASR	@SP
	ASR	@SP
	ADD	(SP)+,R0
	MOV	RKECPT-RKCS1(R4),R3
	CLR	R1
	BR	2$
1$:	ASL	R3
	ROL	R1
2$:	DEC	R2
	BGE	1$
	CALL	@PC
	CMP	R0,Q$WCNT(R5)
	BHIS	ECCDON
	MOV	R0,R2
.IF NE	MMG$T
	ASH	#-6+1,R2
	ADD	Q$PAR(R5),R2
	MOV	R2,3$
	MOV	R0,R2
	BIC	#^C<37>,R2
.ENDC
	ASL	R2
	ADD	Q$BUFF(R5),R2
.IF NE	MMG$T
	JSR	R0,@$P1EXT
	 .WORD	3$-.
.ENDC
	MOV	@R2,-(SP)
	BIC	R3,@R2
	BIC	(SP)+,R3
	BIS	R3,@R2
	.IF NE	MMG$T
3$:	 .WORD	0
	.ENDC
	MOV	R1,R3
	INC	R0
ECCDON:	RETURN
	.IF NE	ERL$G
	.SBTTL	LOGERR	- REPORTS TO ERROR LOGGER
LOGERR:
	.ADDR	#DMRBUF,R1
	MOV	R1,R2
	MOV	DMCSR,R3
	ADD	#RKCS1-RKCS2,R3
	MOV	#DMNRG1,R4
DMRREG:	MOV	(R3)+,(R1)+
	SOB	R4,DMRREG
	MOV	(R3)+,-(SP)
	BIT	#OFST,-6(R3)
	BEQ	1$
	MOV	@OFFPTR,@SP
	CLRB	@SP
	SWAB	@SP
1$:	MOV	(SP)+,(R1)+
	MOV	(R3)+,(R1)+
	MOV	#DMNRG2,R4
	ADD	#6,R3
DMRRG1:	MOV	(R3)+,(R1)+
	DEC	R4
	BNE	DMRRG1
	MOV	DRETRY,R3
	SWAB	R3
	ADD	#DMNREG,R3
	MOVB	RETCNT,R4
	ADD	#DM$COD*400,R4
	BIT	#<WRITE-READAT>,DMFUNC
	BEQ	DMEL1
	NEG	Q$WCNT(R5)
DMEL1:	CALL	@$ELPTR
	BIT	#<WRITE-READAT>,DMFUNC
	BEQ	DMEL2
	NEG	Q$WCNT(R5)
DMEL2:	MOV	DMCSR,R3
	MOV	R3,R4
	ADD	#RKCS1-RKCS2,R4
	MOV	RKER-RKCS1(R4),R1
	RETURN
	.ENDC
	.IF NE	RK6$B
BQUE:	.WORD	-1
BBLK:	.WORD	-1
	.BYTE	0
BUNT:	.BYTE	-1
BADD:	.WORD	-1
BWCT:	.WORD	-1
	 .IF NE	MMG$T
	.WORD	0
BPAR:	.WORD	-1
	.WORD	0,0
	 .ENDC
BBUF:	.WORD	0
	.BLKW	63.
	.WORD	0
STBQUE:
	.ADDR	#BWCT,R2
	MOV	(R3)+,(R2)
	TST	-(R2)
	MOVB	Q$UNIT(R5),-(R2)
	TSTB	-(R2)
	MOV	(R3)+,-(R2)
					.ASSUME Q$BLKN-2 EQ Q$CSW
	MOV	-(R5),-2(R2)
	MOV	R2,(PC)+
SAVCQE:	 .WORD	0
	MOV	R2,R5
	RTS	R3
SAVFUN:	.WORD	0
	.ENDC
	.WORD	-1
OFFTAB:	.BYTE	16,	0
	.BYTE	2,	20
	.BYTE	2,	220
	.BYTE	2,	40
	.BYTE	2,	240
	.BYTE	2,	60
	.BYTE	2,	260
	.BYTE	0,	0
	.WORD	-1
DMFBLK:	.WORD	0,0,0,0
ECCBAD:	.WORD	0
	.IF NE	ERL$G
DMRBUF:	.BLKW	DMNREG
	.ENDC
	.SBTTL	BOOTSTRAP DRIVER
	.DRBOT	DM,BOOT1,READ
	. = DMBOOT+40
BOOT1:	JMP	@#BOOT-DMBOOT
	. = DMBOOT+210
READ:	MOV	#<3.*22.>,R3
	MOV	#-1,R4
	MOV	R4,R5
1$:	INC	R4
	SUB	R3,R0
	BCC	1$
	ADD	R3,R0
	MOV	#22.,R3
2$:	INC	R5
	SUB	R3,R0
	BCC	2$
	ADD	R3,R0
	SWAB	R5
	BIS	R5,R0
	MOV	BOTCSR,R5
	BIT	#400,RKDS-RKCS2(R5)
	BEQ	3$
	BIS	#2000,RDFCN
3$:	MOV	R4,RKDC-RKCS2(R5)
	MOV	R0,-(R5)
	MOV	R2,-(R5)
	MOV	R1,-(R5)
	NEG	@R5
	MOV	(PC)+,-(R5)
RDFCN:	 .WORD	21
4$:	BIT	#100200,@R5
	BEQ	4$
	BMI	BIOERR
	CLC
	RETURN
	. = DMBOOT+604
BOOT:	MOV	#10000,SP
	MOV	@(PC)+,-(SP)
BOTCSR:	 .WORD	RKCS2
	BIC	#^C7,@SP
	MOV	#2,R0
	MOV	#<4*400>,R1
	MOV	#1000,R2
	CALL	READ
	MOV	#READ-DMBOOT,@#B$READ
	MOV	#B$DNAM,@#B$DEVN
	MOV	(SP)+,@#B$DEVU
	JMP	@#B$BOOT
	.DREND	DM
	.END
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   