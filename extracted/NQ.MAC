.MCALL	.MODULE
.MODULE NQ,VERSION=13,COMMENT=<DEQNA Port Handler>,AUDIT=NO

;                        COPYRIGHT (c) 1986 BY
;             DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;                         ALL RIGHTS RESERVED.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
	NI$QNA	= 1
	.INCLUDE "SRC:NI.MAC"
	.SBTTL	DEQNA Port Handler Edit History
	.ENABL	LC
	.SBTTL	DEQNA Port Handler Definitions
	.AUDIT	.NI
	.AUDIT	.NQ
	.MCALL	.ADDR,	.BR
	.MCALL	.INTEN,	.FORK
	.MCALL	.TIMIO,	.CTIMI
	RBCNT	= 6.
	BUFSZ	=: 1600.
	IATSZ	=: <14.*UA.ESZ>
	SETSZ	=: 200
	EMEMSZ	= <<<RBCNT*BUFSZ>+IATSZ+SETSZ>/2+<KTGRAN-1>>/KTGRAN
	.IIF LT RBCNT-2	.ERROR
	.IIF NDF NQ$WDT	NQ$WDT = 0
	C.JNUM	=: 6
	C.COMP	=: 14
	.MACRO	BEQ.	DST,?LOC
	BNE	LOC
	JMP	DST
LOC:
	.ENDM
	.MACRO	BNE.	DST,?LOC
	BEQ	LOC
	JMP	DST
LOC:
	.ENDM
	.SBTTL	DEQNA Port Handler Device Definitions
	QN$SAR	=: 0
	QN$RAL	=: 4
	QN$RAH	=: 6
	QN$TAL	=: 10
	QN$TAH	=: 12
	QN$VEC	=: 14
	QN$CSR	=: 16
	CS.RI	=: 100000
	CS.CA	=: 020000
	CS.OK	=: 010000
	CS.SE	=: 002000
	CS.EL	=: 001000
	CS.ILD	=: 000400
	CS.XI	=: 000200
	CS.IE	=: 000100
	CS.RLI	=: 000040
	CS.XLI	=: 000020
	CS.BD	=: 000010
	CS.NXM	=: 000004
	CS.SR	=: 000002
	CS.REN	=: 000001
	.SBTTL	DEQNA Port Handler Data Structure Definitions
	BD.FLG	=: 0
	BD.ADH	=: 2
	BD.ADL	=: 4
	BD.LEN	=: 6
	BD.SW1	=: 10
	BD.SW2	=: 12
	BD.ESZ	=: 14
	FL.INI	=: 100000
	FL.USE	=: 040000
	AH.VLD	=: 100000
	AH.CHN	=: 040000
	AH.EOM	=: 020000
	AH.SET	=: 010000
	AH.TER	=: 000200
	AH.STA	=: 000100
	AH.HOM	=: 000077
	S1.LN	=: 100000
	S1.ERU	=: 040000
	S1.LOC	=: 010000
	S1.NOC	=: 004000
	S1.STE	=: 002000
	S1.ABO	=: 001000
	S1.FAI	=: 000400
	S1.CCM	=: 000360
	S1.ESE	=: 020000
	S1.DIS	=: 010000
	S1.RNT	=: 004000
	S1.RBL	=: 003400
	S1.FE	=: 000004
	S1.CRC	=: 000002
	S1.OV	=: 000001
	.SBTTL	DEQNA Port Handler Installation Code
	.ENABL	LSB
	.DRINS	NI
	BR	10$
	BR	O.BAD
10$:	MOV	@#SYSPTR,R0
	BIT	#PROS$,CONFG2(R0)
	BNE	O.BAD
	MOV	INSCSR,R0
	BIC	#CS.SE,QN$CSR(R0)
	BIT	#CS.OK,QN$CSR(R0)
	BEQ	O.BAD
	MOV	@#SYSPTR,R1
	MOV	MEMPTR(R1),R0
	ADD	R1,R0
	MOV	CORPTX(R0),R5
	ADD	R1,R5
20$:	CMP	(R5)+,#-1
	BNE	20$
30$:	CMP	(R5),#-1
	BEQ	O.BAD
	TST	(R5)
	BEQ	40$
	ADD	#GR.ESZ,R5
	BR	30$
40$:	MOV	P1EXT(R1),R0
	MOV	(PC)+,R2
NIXSIZ:	 .WORD	EMEMSZ
	CALL	XALLOC(R0)
	BCS	O.BAD
	MOV	R2,(R5)+
	MOV	R1,(R5)+
	MOV	#GR.PVT,(R5)+
	MOV	(PC)+,(R5)+
	 .WORD	NI$HND
	MOV	#<^R$  >,(R5)
	BR	O.GOOD
	.DSABL	LSB
	.IIF GT .-400 .ERROR
	.SBTTL	DEQNA Port Handler Set Code
	.DRSET	CSR,	160000,	O.CSR,	OCT
	.DRSET	VECTOR,	500,	O.VEC,	OCT
	.DRSET	SHOW,	NOP,	O.SHOW
O.CSR:	CMP	R0,R3
	BLO	O.BAD
	MOV	R0,INSCSR
	MOV	R0,DISCSR
	MOV	R0,NICSR
O.GOOD:	TST	(PC)+
O.BAD:	SEC
	RETURN
O.VEC:	CMP	R0,R3
	BHIS	O.BAD
	MOV	R0,NISTRT
	MOV	R0,NIVEC
	BR	O.GOOD
	.MCALL	.ADDR,	.PRINT,	.TTYOU
	.MCALL	.TRPSE
O.SHOW:	.ADDR	#TSAREA,R0
	.ADDR	#NQNXM,R1
	.TRPSE	R0,R1
	TST	@INSCSR
	NOP
	BCS	O.BAD
	.ADDR	#M.PADD,R0
	.PRINT
	MOV	INSCSR,R1
	MOV	#6.,R2
	BR	20$
10$:	.TTYOU	#'-
20$:	MOV	(R1)+,-(SP)
	MOVB	(SP),R0
	ASR	R0
	ASR	R0
	ASR	R0
	ASR	R0
	BIC	#^C<17>,R0
	.ADDR	#HEX,R0,ADD
	.TTYOU	(R0)
	MOVB	(SP)+,R0
	BIC	#^C<17>,R0
	.ADDR	#HEX,R0,ADD
	.TTYOU	(R0)
	DEC	R2
	BGT	10$
	.ADDR	#M.CRLF,R0
	.PRINT
	RETURN
TSAREA:	.BLKW	2
NQNXM:	BIS	#1,2(SP)
	RTI
M.PADD:	.ASCII	/Station address = /<200>
M.CRLF:	.BYTE	0
HEX:	.ASCII	/0123456789ABCDEF/
	.IIF GT .-1000 .ERROR
	.SBTTL	INIT	- OnceOnly Initialization Code
	.PSECT	NIDVR
INIT:	MOV	NICSR,R0
	BIS	#CS.SR,QN$CSR(R0)
	BIC	#CS.SR,QN$CSR(R0)
	MOV	NIVEC,QN$VEC(R0)
	.ADDR	#NIPHAD,R1
	MOV	#6.,R2
10$:	MOV	(R0)+,-(SP)
	MOVB	(SP)+,(R1)+
	DEC	R2
	BGT	10$
	CLC
	RETURN
	.SBTTL	RESRNG	- Reset Receive Ring Structure
	.PSECT	NIDVR
RESRNG:	CALL	SAV30
	.ADDR	#RCVBDL,R1
	.ADDR	#BUFADR,R2
	CLR	RCVIDX
	MOV	#RBCNT,R3
	.ADDR	#FQELEM,R4
	MOV	#20000,Q$BUFF(R4)
	MOV	NIXADR,Q$PAR(R4)
	MOV	R1,-(SP)
	BR	20$
10$:	ADD	#BD.ESZ,R1
20$:	MOV	Q$BUFF(R4),(R2)+
	MOV	Q$PAR(R4),(R2)+
	.ASSUME BD.FLG EQ 0
	MOV	#FL.INI,(R1)
	MOV	R4,R5
	ADD	#Q$BUFF-Q$BLKN,R5
	CALL	@$MPPTR
	MOV	(SP)+,BD.ADL(R1)
	MOV	(SP)+,R0
	ASH	#-4,R0
	BIC	#^C<AH.HOM>,R0
	BIS	#AH.VLD,R0
	MOV	R0,BD.ADH(R1)
	MOV	#-<BUFSZ/2>,BD.LEN(R1)
	MOV	#S1.LN,BD.SW1(R1)
	MOV	#S1.LN,BD.SW2(R1)
	ADD	#BUFSZ,Q$BUFF(R4)
	CALL	FIXPAR
	DEC	R3
	BGT	10$
	MOV	Q$BUFF(R4),(R2)+
	MOV	Q$PAR(R4),(R2)+
	MOV	R1,RCVINV
	BIC	#AH.VLD,BD.ADH(R1)
	ADD	#BD.ESZ,R1
	MOV	(SP)+,BD.ADL(R1)
	CLR	BD.ADH(R1)
	.ASSUME BD.FLG EQ 0
	MOV	#FL.INI,(R1)+
	.ASSUME BD.ADH EQ 2
	BIS	#<AH.VLD!AH.CHN>,(R1)
	MOV	NICSR,R0
	CALL	GETADR
	MOV	R1,QN$RAL(R0)
	CLR	QN$RAH(R0)
	BIS	#<CS.IE!CS.ILD>,QN$CSR(R0)
	RETURN
	.SBTTL	ENABLE	- Enable Interrupts
	.PSECT	NIDVR
ENABLE:	CALL	RESRNG
	MOV	#-1,XMITFG
	MOV	#-1,RECVFG
	CALL	SETUP
	CLC
	RETURN
	.SBTTL	SETUP	- Update Address Filtering Table
	.PSECT	NIDVR
SETUP:	CALL	SAV30
	CALL	SAVPAR
	MOV	SETADR+2,@#KISAR1
	MOV	SETADR,R1
	MOV	#14.,R2
10$:	.ADDR	#NIPHAD,R0
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
	DEC	R2
	BGT	10$
	ADD	#<UA.ESZ-IATSZ>,R1
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
	MOV	#8.,R2
20$:	MOV	(R0)+,-(SP)
	BIS	(R0)+,(SP)
	BIS	(R0)+,(SP)+
	BEQ	30$
	SUB	#UA.ESZ,R0
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
30$:	DEC	R2
	BGT	20$
	MOV	SETADR,R0
	MOV	R0,R1
	ADD	#IATSZ,R1
	MOV	#2.,R3
40$:	MOV	#7.,R2
50$:	INC	R1
	MOVB	(R0)+,(R1)
	MOVB	(R0)+,10(R1)
	MOVB	(R0)+,20(R1)
	MOVB	(R0)+,30(R1)
	MOVB	(R0)+,40(R1)
	MOVB	(R0)+,50(R1)
	DEC	R2
	BGT	50$
	ADD	#71,R1
	DEC	R3
	BGT	40$
	.BR	SNDSET
	.SBTTL	SNDSET	- Build and Send SETUP Packet
SNDSET:	MOV	SP,SETUFG
	INC	XMITFG
	BNE	20$
	.ADDR	#FQELEM,R4
	MOV	SETADR,Q$BUFF(R4)
	ADD	#IATSZ,Q$BUFF(R4)
	MOV	SETADR+2,Q$PAR(R4)
	CALL	FIXPAR
	MOV	#SETSZ,R5
	TST	NIPMFG
	BEQ	10$
	BIS	#2,R5
10$:
	ASR	R5
	MOV	R5,Q$WCNT(R4)
	CALLR	XMTCOM
20$:	RETURN
	.SBTTL	DISABL	- Disable Interrupts
	.PSECT	NIDVR
DISABL:	CALL	SAV30
	MOV	NICSR,R0
	BIC	#<CS.IE!CS.ILD!CS.REN>,QN$CSR(R0)
	.IF NE TIM$IT
	 .IF NE NQ$WDT
	CALL	CTIMER
	 .ENDC
	.ENDC
	RETURN
	.SBTTL	NQABRT	- Port Handler Abort Code
	.PSECT	NIDVR
NQABRT:
	.IF NE TIM$IT
	 .IF NE NQ$WDT
	MOV	R5,-(SP)
	MOV	NIOCQE,R5
	BEQ	10$
	MOVB	Q$JNUM(R5),-(SP)
	BIC	#^C<JOBMK>,(SP)
	ASR	(SP)
	ASR	(SP)
	ASR	(SP)
	CMPB	R4,(SP)+
	BNE	10$
	CALL	CTIMER
10$:	MOV	(SP)+,R5
	 .ENDC
	.ENDC
	CALLR	NIABRT
	.SBTTL	NIINT	- Interrupt Entry Point
	.PSECT	NIDVR
	.DRAST	NI,NI$PRI,NQABRT
	MOV	NICSR,R5
	MOV	QN$CSR(R5),R4
	MOV	R4,QN$CSR(R5)
	BIT	#CS.RI,R4
	BEQ	10$
	CALL	NQIINT
10$:	BIT	#CS.XI,R4
	BEQ	20$
	CALL	NQOINT
20$:	RETURN
	.SBTTL	NQIINT	- Routine to Process Receive Interrupts
	.PSECT	NIDVR
	.ENABL	LSB
NQIINT:	TST	NIQCHG
	BNE.	190$
RECV:	INC	RECVFG
	BNE.	190$
	CALL	SAV30
	CALL	SAVPAR
	MOV	R4,-(SP)
	MOV	R5,-(SP)
10$:	CALL	GETADR
	.ASSUME BD.FLG EQ 0
	BIT	#FL.USE,(R1)
	BEQ.	170$
	BIT	#S1.LN,BD.SW1(R1)
	BEQ	30$
	BIT	#S1.ERU,BD.SW1(R1)
	BEQ.	170$
20$:	CMPB	BD.SW2(R1),BD.SW2+1(R1)
	BNE.	170$
30$:	BIT	#<S1.ERU!S1.ESE>,BD.SW1(R1)
	BNE.	140$
	MOV	NIICQE,R4
	BEQ.	140$
	TST	NIPMFG
	BNE	120$
	MOV	RCVIDX,R2
	ASL	R2
	ASL	R2
	.ADDR	#BUFADR,R2,ADD
	MOV	(R2)+,R0
	MOV	(R2)+,@#KISAR1
	.ADDR	#NIUPT,R3
	MOV	R3,-(SP)
	MOV	#8.,R2
40$:
	.ASSUME UO.ESZ EQ UP.ESZ
	TST	NIUOT-NIUPT(R3)
	BEQ	45$
	CMP	EF.TYP(R0),(R3)
	BEQ	50$
45$:	TST	(R3)+
	DEC	R2
	BGT	40$
	TST	(SP)+
	BR	140$
50$:	MOV	R3,R2
	SUB	(SP)+,R3
	.ASSUME UP.ESZ EQ 2
	ASR	R3
	.ASSUME UO.ESZ EQ UP.ESZ
	ADD	#NIUOT-NIUPT,R2
	.ASSUME UO.JOB EQ 0
	.ASSUME UO.OFG EQ 1
	TST	(R2)
	BEQ	140$
	.ADDR	#NQADDR,R4
	MOV	R4,-(SP)
	MOV	R3,-(SP)
	.ADDR	#NIPHAD,R3
	MOV	#<UA.ESZ/2>*2,R5
60$:	MOV	(R3)+,(R4)+
	DEC	R5
	BGT	60$
	MOV	(SP)+,R3
	MUL	#UA.ESZ,R3
	.ADDR	#NIUAT,R3,ADD
	MOV	#<UA.ESZ/2>,R5
70$:	MOV	(R3)+,(R4)+
	DEC	R5
	BGT	70$
	MOV	(SP)+,R3
	MOV	#3,R4
80$:	CMP	EF.DST+4(R0),4(R3)
	BNE	90$
	CMP	EF.DST+2(R0),2(R3)
	BNE	90$
	.ASSUME EF.DST EQ 0
	CMP	(R0),(R3)
	BEQ	100$
90$:	ADD	#UA.ESZ,R3
	DEC	R4
	BGT	80$
	BR	140$
100$:	.ADDR	#NIICQE-Q$LINK,R4
110$:	MOV	Q$LINK(R4),R4
	BEQ	140$
	CMPB	(R2),Q$UNIT(R4)
	BNE	110$
120$:	MOV	BD.SW1(R1),-(SP)
	BIC	#^C<3400>,(SP)
	CLR	R5
	BISB	BD.SW2(R1),R5
	BIS	(SP)+,R5
	ADD	#60.,R5
	MOV	R5,-(SP)
	ADD	#2,Q$BUFF(R4)
	CALL	@$PTWRD
	SUB	#4,Q$BUFF(R4)
	INC	R5
	ASR	R5
	MOV	Q$WCNT(R4),R2
	SUB	#2,R2
	CMP	R5,R2
	BLE	130$
	MOV	#RC.TRU,-(SP)
	CALL	@$PTWRD
	SUB	#2,Q$BUFF(R4)
	BIS	#HDERR$,@Q$CSW-Q$BLKN(R4)
	MOV	R2,R5
130$:	MOV	RCVIDX,R2
	ASL	R2
	ASL	R2
	.ADDR	#BUFADR,R2,ADD
	MOV	2(R2),R1
	MOV	(R2),R2
	MOV	Q$PAR(R4),R3
	MOV	R4,-(SP)
	MOV	Q$BUFF(R4),R4
	ADD	#4,R4
	MOV	@#SYSPTR,R0
	MOV	P1EXT(R0),R0
	CALL	BLKMOV(R0)
	MOV	(SP)+,R4
	CALL	NIIDEQ
140$:	CALL	GETADR
	.ASSUME BD.FLG EQ 0
	MOV	#FL.INI,(R1)
	BIC	#AH.VLD,BD.ADH(R1)
	MOV	#S1.LN,BD.SW1(R1)
	MOV	#S1.LN,BD.SW2(R1)
	MOV	RCVINV,R3
	BIS	#AH.VLD,BD.ADH(R3)
150$:	MOV	R1,RCVINV
	MOV	RCVIDX,R1
	INC	R1
	CMP	R1,#RBCNT
	BLT	160$
	SUB	#RBCNT,R1
160$:	MOV	R1,RCVIDX
	JMP	10$
170$:	MOV	NICSR,R0
	BIT	#CS.RLI,QN$CSR(R0)
	BEQ	180$
	CALL	GETADR
	MOV	R1,QN$RAL(R0)
	CLR	QN$RAH(R0)
180$:	MOV	(SP)+,R5
	MOV	(SP)+,R4
	MOV	#-1,RECVFG
190$:	RETURN
	.DSABL	LSB
	.SBTTL	GETADR	- Get Buffer Descriptor Address
GETADR:	MOV	RCVIDX,R1
	MUL	#BD.ESZ,R1
	.ADDR	#RCVBDL,R1,ADD
	RETURN
	.SBTTL	NQOINT	- Routine to Process Transmit Interrupts
	.PSECT	NIDVR
	.ENABL	LSB
NQOINT:	CALL	SAV30
	.ADDR	#XMTBDL,R5
	.IF NE TIM$IT
	 .IF NE NQ$WDT
	CALL	CTIMER
	 .ENDC
	.ENDC
	MOV	#-1,XMITFG
	BIT	#AH.SET,BD.ADH(R5)
	BNE	70$
	BIT	#S1.ABO,BD.SW1(R5)
	BEQ	20$
20$:	MOV	NIOCQE,R4
	BEQ	70$
	MOV	Q$LINK(R4),NIOCQE
	CLR	Q$LINK(R4)
	BIT	#S1.ERU,BD.SW1(R5)
	BEQ	65$
30$:	BIT	#S1.ABO,BD.SW1(R5)
	BEQ	40$
	MOV	#<SC.WEC*400+RC.XMT>,-(SP)
	BR	60$
40$:	BIT	#S1.NOC,BD.SW1(R5)
	BEQ	65$
	MOV	#<SC.WCC*400+RC.XMT>,-(SP)
	BR	60$
60$:	BIS	#HDERR$,@Q$CSW-Q$BLKN(R4)
	CALL	@$PTWRD
65$:	CALL	NIFIN
XMIT:
70$:	CALL	SAV30
	CALL	SAVPAR
	TST	SETUFG
	BEQ	80$
	CALLR	SNDSET
80$:	TST	NOQCHG
	BNE	130$
	MOV	NIOCQE,R4
	BEQ	130$
	INC	XMITFG
	BNE	130$
	TST	(PC)+
XMTCOM:	SEC
	ROL	(PC)+
LSETFG:	 .WORD	0
	.ADDR	#XMTBDL,R0
	MOV	R0,-(SP)
	.ASSUME BD.FLG EQ 0
	MOV	#FL.INI,(R0)+
	TST	LSETFG
	BNE	90$
	ADD	#4,Q$BUFF(R4)
	CALL	FIXPAR
	MOV	Q$PAR(R4),@#KISAR1
	MOV	Q$BUFF(R4),R2
	ADD	#EF.SRC,R2
	MOV	(R2),-(SP)
	BIS	2(R2),(SP)
	BIS	4(R2),(SP)+
	BNE	90$
	.ADDR	#NIPHAD,R1
	MOV	(R1)+,(R2)+
	MOV	(R1)+,(R2)+
	MOV	(R1)+,(R2)+
90$:	MOV	R4,R5
	ADD	#Q$BUFF-Q$BLKN,R5
	CALL	@$MPPTR
	SUB	#4,Q$BUFF(R4)
	CALL	FIXPAR
	MOV	(SP)+,R2
	MOV	(SP)+,R1
	ASH	#-4,R1
	BIC	#^C<AH.HOM>,R1
	BIS	#<AH.VLD!AH.EOM>,R1
	TST	LSETFG
	BEQ	100$
	BIS	#AH.SET,R1
100$:
	.ASSUME BD.ADH EQ 2
	MOV	R1,(R0)+
	.ASSUME BD.ADL EQ 4
	MOV	R2,(R0)+
	MOV	Q$WCNT(R4),R1
	TST	LSETFG
	BNE	110$
	SUB	#2,R1
110$:	NEG	R1
	.ASSUME BD.LEN EQ 6
	MOV	R1,(R0)+
	.ASSUME BD.SW1 EQ 10
	MOV	#S1.LN,(R0)+
	.ASSUME	BD.SW2 EQ 12
	CLR	(R0)+
	.ASSUME BD.FLG EQ 0
	MOV	#FL.INI,(R0)+
	.ASSUME BD.ADH EQ 2
	CLR	(R0)
	TST	LSETFG
	BEQ	120$
	CLR	SETUFG
	CLR	LSETFG
120$:	MOV	(SP)+,R0
	MOV	NICSR,R1
	.IF NE TIM$IT
	 .IF NE NQ$WDT
	CALL	TIMER
	 .ENDC
	.ENDC
	MOV	R0,QN$TAL(R1)
	CLR	QN$TAH(R1)
	BIS	#CS.REN,QN$CSR(R1)
130$:	RETURN
	.DSABL	LSB
	.IF NE TIM$IT
	 .IF NE NQ$WDT
	.SBTTL	DEQNA Port Handler Watchdog routines
TIMER:	TST	XMTWBK+C.COMP
	BNE	10$
	MOV	NIOCQE,R4
	MOVB	Q$JNUM(R4),R4
	BIC	#^C<JOBMK>,R4
	ASR	R4
	ASR	R4
	ASR	R4
	MOV	R4,XMTWBK+C.JNUM
	.ADDR	#XMTTMO,R4
	MOV	R4,XMTWBK+C.COMP
	MOV	(SP),-(SP)
	MOV	@#PSW,2(SP)
	BIC	#340,2(SP)
	.INTEN	NI$PRI,PIC
	.FORK	NQFBLK
	.TIMIO	XMTWBK,0,2*60.
10$:	RETURN
CTIMER:	TST	XMTWBK+C.COMP
	BEQ	10$
	MOV	(SP),-(SP)
	MOV	@#PSW,2(SP)
	BIC	#340,2(SP)
	.INTEN	NI$PRI,PIC
	.FORK	NQFBLK
	.CTIMI	XMTWBK
	CLR	XMTWBK+C.COMP
10$:	RETURN
XMTTMO:	CALL	INIT
	CALL	ENABLE
	CALLR	XMIT
	 .ENDC
	.ENDC
	.SBTTL	Port Handler Impure Data Area
	.PSECT	NIDAT
NINAME:	.WORD	NI$HND
	.RAD50	/$  /
RCVIDX:	.BLKW
RCVINV:	.BLKW
RCVBDL:	.BLKB	<RBCNT+1>*BD.ESZ
BUFADR:	.BLKW	<RBCNT*2>
SETADR:	.BLKW	2
SETUFG:	.WORD	0
RECVFG:	.WORD	-1
XMITFG:	.WORD	-1
NQECFG:	.WORD	0
XMTBDL:	.BLKB	BD.ESZ*2
FQELEM:	.BLKW	6
NQADDR:	.BLKW	3*UA.ESZ
	.IF NE TIM$IT
	 .IF NE NQ$WDT
NQFBLK:	.WORD	0,0,0,0
XMTWBK:	.WORD	0,0,0
	.WORD	0
	.WORD	177000+NI$COD
	.WORD	-1
	.WORD	0
	 .ENDC
	.ENDC
	.END
                                                                                                                                                                                                                                        