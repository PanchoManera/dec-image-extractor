.MCALL .MODULE
.MODULE BSTRAP,VERSION=79,COMMENT=<Secondary Bootstrap>

;                 COPYRIGHT (c) 1984, 1985, 1986 BY
;             DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;                         ALL RIGHTS RESERVED.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;
.MCALL	...CMV
.IF NE	RTE$M
DEFALT	$LRLPZ,	     4
DEFALT	$RMLPZ,	     4
O$FORK	== 402
.ENDC
.ENABL	LC
.NLIST	BEX
.IIF NDF BF,	BF=0
.IIF NDF MMG$T,	MMG$T=0
PRO$S	= BF&<1-RTE$M>
.SBTTL	********************************************
.IF NE BF
 .IF NE MMG$T
.SBTTL	*        Extended Memory Bootstrap         *
 .IFF
   .IF NE RTE$M
.SBTTL	*		RTEM Bootstrap		   *
   .IFF
.SBTTL	*     Foreground/Background Bootstrap      *
   .ENDC
 .ENDC
.IFF
.SBTTL	*           Single/Job Bootstrap           *
.ENDC
.SBTTL	********************************************
.SBTTL	Definitions
..V2..
BOTSTK	= 10000
.IF NE	RTE$M
	BOTTOP	= 12000
.IFF
	BOTTOP	= 10000
.ENDC
MEDINS	= 76600
CISINS	= 76052
VS6.SP	= 172032
MEM.PS	= 172076
MEM.PE	= 172136
CA.CSR	= 177746
P7.LSS	= 177760
.IF NE	PDT$OP
.MACRO	T11NOP
.ENDM
.IFF
.MACRO	T11NOP
	NOP
.ENDM
.ENDC
.IRPC	X,<012>
.MACRO	CK.R'X	LABEL,CHANGE=+2
.IIF LT CHANGE,CK.R'X=CK.R'X''CHANGE
.IIF NB LABEL,				.ASSUME CK.R'X EQ LABEL
.IIF GT CHANGE,CK.R'X=CK.R'X''CHANGE
.ENDM
.ENDR
.SBTTL	Start of Boot code area
.ASECT
.IF NE	RTE$M
.	= 550
BPRINT:
.	= 570
BIOERR:
.	= 576
REPORT:
.IFF
JMPABS	= 137
.	= 664
BIOERR:
.	= 672
REPORT:
.ENDC
.SBTTL	Memory size determination
.ENABL	LSB
	. = 1000
B$BOOT::MOV	#BRTI,@#V.LTC
	CLR	@#V.LTC+2
	CLR	R3
	MOV	@R3,DUPFLG
	CLR	(R3)+
	CLR	(R3)+
	MOV	SP,(PC)+
STKPTR:	 .WORD	0
.IF NE	RTE$M
	CMP	@#$RTEID,#RTE$ID
	BEQ	3$
	MOV	#ILHOST,R0
	CALL	BPRINT
3$:
.IFF
	MOV	#1$,@R3
	MOV	@R3,@#V.TR10
	MFPT
	CMP	R0,#4
	BNE	67$
	INC	FALCON
	TST	@#PS
	T11NOP
	COM	FALCON
	MOV	#77600,R4
	MOV	R4,@R4
	T11NOP
	NEG	FALCON
	BR	1$
67$:
.IF NE PRO$S
	MOV	#173700,R0
	MOV	@R0,R1
	T11NOP
	COM	@R0
	T11NOP
	MOV	@R0,R2
	MOV	R1,@R0
	XOR	R2,R1
	CMP	R1,#200
	BNE	1$
	MOV	#PROS$,PROFLG
	MOV	#JMPABS,BIOERR
	MOV	#BERR05,BIOERR+2
	MOV	#JMPABS,REPORT
	MOV	#BERRXX,REPORT+2
.ENDC
1$:
 .IF EQ	MMG$T
	TST	FALCON
	BMI	NXM
	MOV	#NXM,@R3
BHALT::	BR	4$
	MOV	@#SR,R4
	CMP	R4,#160000
	BLO	NXM
4$:	CLR	R4
5$:	ADD	#4000,R4
..28KW	== .+2
	CMP	R4,#170000
	BEQ	NXM
	MOV	@R4,@R4
	BR	5$
NXM:
 .ENDC
 .IF NE PRO$S
	TST	PROFLG
	BNE	30$
 .ENDC
	MOV	#20$,@R3
	TST	@#1
	MOV	#10$,@#V.TR10
	MFPT
	CMPB	R0,#3
	BNE	10$
	MOV	#10$,@R3
	CLR	@#SR
	BR	30$
20$:	MOV	#30$,@#V.TR10
	MFPT
	CMPB	R0,#5
	BNE	30$
	BIT	#1000,@#177750
	BNE	30$
10$:	INC	BUSTYP
30$:	MOV	#BCLR,@R3
	MOV	@R3,@#V.TR10
.IFT
	MOV	#TRPERR,@R3
	MOV	#BCLR,@#V.TR10
	MOV	#BHIMEM,R2
				CK.R2=BHIMEM
				CK.R2 BHIMEM,+2
	MOV	(R2)+,R4
	MOV	R4,R5
	CLC
	ROR	R5
	.REPT	5
	ASR	R5
	.ENDR
.IFF
 .IF EQ	MMG$T
	BIC	#177,R4
	MOV	R4,R5
	SWAB	R5
	ASL	R5
	ADC	R5
	ASL	R5
 .ENDC
.IFTF
 .IF EQ	MMG$T
	MOV	R5,MEMSIZ
 .ENDC
	MOV	STKPTR,SP
.IFT
				CK.R2 BSVTK,+2
	CALL	@(R2)+
	BCS	6$
	INC	CNFMOD
6$:	MOV	(R2)+,$VSBRO
.ENDC
.DSABL	LSB
.SBTTL	Fix bootstrap's file name
FXDEVN::MOV	#B$DEVN,R5
	MOV	@R5,R0
1$:	MOV	R0,R1
	SUB	#50,R0
	BHIS	1$
	SUB	R1,@R5
	MOV	(R5)+,@R5
	ADD	SUFFX,-(R5)
.SBTTL	CONFIG bits
CFIG::	MOV	#TSLIST,R1
				CK.R1=TSLIST
	MOV	R1,R0
				CK.R0=TSLIST
.IF NE RTE$M
				CK.R0 BCNFG,-2
				CK.R1 TSLSI,+2
	BIC	(R1)+,-(R0)
				CK.R1 TSLKC,+2
	BIC	(R1)+,@R0
				CK.R2 BLK50$,+2
	BIS	(R2)+,@R0
				CK.R2 BLKGRN,+2
	TST	(R2)+
	BNE	1$
				CK.R1 TSCLO,0
	CLR	@R1
.IFF
 .IF EQ	MMG$T
	TST	@#PS
	T11NOP
 .ENDC
				CK.R0 BCNFG,-2
				CK.R1 TSLSI,+2
 	BIC	(R1)+,-(R0)
	TST	@#LKCS
	T11NOP
				CK.R1 TSLKC,+2
	BIS	(R1)+,@R0
	BNE	1$
.IF NE	PRO$S
	TST	PROFLG
	BNE	1$
.ENDC
	TST	@#1
	T11NOP
.IFTF
				CK.R1 TSCLO,+2
1$:	BIS	(R1)+,@R0
.IFT
				CK.R2 BSYFPU,+2
	MOV	(R2)+,@R1
.ENDC
	CFCC
				CK.R1 TSHWF,CHANGE=+2
	BIS	(R1)+,@R0
.IF NE	MMG$T
	TST	@#SR0
	T11NOP
				CK.R1 TSKT,CHANGE=+2
	BIS	@R1,@R0
	TST	(R1)+
	BNE	2$
	JSR	R1,@#REPORT
	 .WORD	NOMMGT
2$:
.ENDC
.IF NE	VT11$!VS60$
	TST	@#VT.CSR
	T11NOP
				CK.R1 TSHWD,CHANGE=+2
	BIS	(R1)+,@R0
.ENDC
.IF EQ	RTE$M
 .IF EQ	KW11$P
	TST	@#172540
	T11NOP
				CK.R1 TSKW,CHANGE=+2
	BIS	(R1)+,@R0
 .ENDC
.ENDC
.IF NE	VT11$!VS60$!<1-KW11$P>
 .IF EQ	MMG$T!RTE$M
	TST	FALCON
	BNE	3$
 .ENDC; EQ MMG$T!RTE$M
	CMP	@R5,#<^RPD >
..NOVT	== .
	BNE	CFIG2
3$:	BIC	#HWDSP$!KW11P$,@R0
 .IF NE	VT11$!VS60$
				CK.R1 TSVS,CHANGE=0
	CLR	@R1
 .ENDC
.ENDC
.SBTTL	CONFG2 bits
				CK.R0 BCNFG2,CHANGE=-2
CFIG2::	TST	-(R0)
.IF NE	VT11$!VS60$
	CLR	@#VS6.SP
	T11NOP
				CK.R1 TSVS,CHANGE=+2
	BIS	(R1)+,@R0
.ENDC
.IF NE	RTE$M
				CK.R1 TSCA,CHANGE=+2
	BIC	(R1)+,@R0
				CK.R1 TS70,CHANGE=+2
	BIC	(R1)+,@R0
.IFF
 .IF NE PRO$S
	TST	PROFLG
	BNE	187$
 .ENDC
	TST	FALCON
	BEQ	87$
	BIS	#LSI11$,BCNFG
187$:	CMP	(R1)+,(R1)+
	BR	88$
87$:
 .IF EQ MPT$Y
	BIS	#1,@#CA.CSR
 .IFF
	CLR	@#CA.CSR
 .ENDC
	T11NOP
				CK.R1 TSCA,CHANGE=+2
	BIS	(R1)+,@R0
	TST	@#P7.LSS
	T11NOP
				CK.R1 TS70,CHANGE=+2
	BIS	(R1)+,@R0
88$:
.IFTF
	MOV	#3,R3
	MUL	R3,R3
	CMP	#9.,R3
	BEQ	1$
	CLR	@R1
				CK.R1 TSEIS,CHANGE=+2
1$:	BIS	(R1)+,@R0
.IFT;	NE RTE$M
				CK.R1 TSSWR,CHANGE=+2
	BIC	(R1)+,@R0
				CK.R1 TSLIT,CHANGE=+2
	BIC	(R1)+,@R0
.IFF
	MOV	@#SR,R2
	T11NOP
				CK.R1 TSSWR,CHANGE=+2
	BIS	(R1)+,@R0
	MOV	#0,@#SR
	T11NOP
				CK.R1 TSLIT,CHANGE=+2
	BIS	(R1)+,@R0
.IF EQ	MMG$T
	BIT	#LSI11$,BCNFG
	BNE	2$
.ENDC
.IFTF
	MOV	R0,-(SP)
	MOV	#2,PCFIX
	 .WORD	MEDINS,100
	CLR	PCFIX
	MOV	(SP)+,R0
				CK.R1 TS60,CHANGE=0
	BIS	@R1,@R0
				CK.R1 TS60,CHANGE=+2
2$:	TST	(R1)+
	MOV	R1,-(SP)
	MOV	R0,-(SP)
	MOV	R4,-(SP)
	CLR	R4
	.WORD	CISINS
	MOV	(SP)+,R4
	MOV	(SP)+,R0
	MOV	(SP)+,R1
				CK.R1 TSCIS,CHANGE=+2
	BIS	(R1)+,@R0
				CK.R1 TSLD,CHANGE=+2
	BIS	(R1)+,@R0
.ENDC
.IF NE PRO$S
				CK.R1 PROFLG,CHANGE=+2
	BIS	(R1)+,@R0
.ENDC
	TST	BUSTYP
	BEQ	10$
	BIS	(R1)+,@R0
10$:
	CLR	@#V.TR4
	CLR	@#V.TR10
.IF NE	MPT$Y
	MOV	#PARTB,R2
	MOV	#MEM.PS,R3
3$:	ADD	#2,R3
	CALL	T4SEC
	MOV	#1,@R3
	T11NOP
	CALL	@(SP)+
	BCS	4$
	MOV	R3,(R2)+
				CK.R1 TSMP,CHANGE=0
	BIS	@R1,@R0
4$:	CMP	R3,#MEM.PE
	BLO	3$
.ENDC
.SBTTL	File lookup
	.ENABL	LSB
LOKFIL:	CLR	-(SP)
	CLR	-(SP)
	MOV	#1,R0
	MOV	#HNAMES,R3
1$:	ASL	R0
	CMP	(R0)+,(R0)+
	MOV	#256.*2,R1
	CALL	BBREAD
	BCS	INPERR
	MOV	#BUFFB+D.STRT,R1
	MOV	(R1)+,R0
.IF NE	RTE$M
	ADD	$VSBRO,R0
.ENDC
				.Assume D.STRT+2 EQ L.HDR
2$:	MOV	R1,R2
				.Assume E.STAT EQ 0
	BIT	#PERM,(R2)+
	BEQ	8$
				.Assume E.STAT+2 EQ E.NAME
	CMP	#^RSYS,E.NAME+4-2(R2)
	BNE	8$
				.Assume E.STAT+2 EQ E.NAME
	MOV	(R2)+,R5
	CMP	R5,B$FNAM
	BNE	3$
	CMP	@R2,B$FNAM+2
	BNE	3$
	MOV	R0,@SP
	BR	8$
3$:	CMP	R5,#^RSWA
	BNE	4$
	CMP	@R2,#<^RP  >
	BNE	4$
	MOV	R0,SWPBLK
	MOV	E.LENG(R1),SWPSIZ
	BR	8$
4$:	TST	@R2
	BNE	8$
	CMP	R5,B$DEVN
	BNE	5$
	MOV	R0,2(SP)
	BR	8$
5$:
.IF NE PRO$S
	SUB	SUFFX,R5
	CMP	R5,#<^RPI >
	BNE	6$
	MOV	R0,PIBLK
	BR	8$
.ENDC
6$:	CMP	R3,#HNAMES+<31.*4>
	BHIS	8$
	SUB	SUFFX,-(R2)
	MOV	(R2)+,R5
.IF	EQ BATC$H
	CMP	R5,#<^RBA >
	BEQ	8$
.ENDC
7$:	SUB	#50,R5
	BHI	7$
	BNE	8$
	MOV	-(R2),(R3)+
	MOV	R0,(R3)+
8$:	BIT	#ENDBLK,@R1
	BNE	9$
	ADD	E.LENG(R1),R0
	ADD	#L.ENTR,R1
	ADD	BUFFB+D.EXTR,R1
	BR	2$
9$:	MOV	BUFFB+D.NEXT,R0
	BNE	1$
	CLR	@R3
	MOV	R4,MEMTOP
.IF NE	RTE$M
	MOV	MEMSIZ,TOTMEM
.IFF
	MOV	@SP,R0
	BEQ	11$
	ADD	#KT11RG/1000,R0
	MOV	#KT11ND-KT11RG/2,R1
	CALL	BBREAD
	BCS	INPERR
	CALL	KT11RG-<KT11RG-BUFFB>
.IFTF
	MOV	(SP)+,MONBLK
.IFT
	BEQ	11$
.IFTF
	MOV	(SP)+,R0
	BEQ	NOHAND
.IFT
	SUB	$VSBRO,R0
.ENDC
	TST	SWPBLK
	BNE	DVREAD
	JSR	R1,@#REPORT
	 .WORD	NSWAP
11$:	JSR	R1,@#REPORT
	 .WORD	NOMON
.IF NE	RTE$M
TRPERR:	JSR	R1,@#REPORT
	 .WORD	UNXTRP
.ENDC
.ASSUME	.-B$BOOT GE STRTEN-STRTOV
.ASSUME	.-B$BOOT GE LDTEND-LDTABL
INPERR:	JMP	@#BIOERR
B.RDER:	CALL	B.READ
	BCS	INPERR
	RETURN
NOHAND:	JSR	R1,@#REPORT
	 .WORD	NOHNDL
	.DSABL	LSB
	.ENABL	LSB
LDHNDL:	MOV	H.SIZ(R2),R1
.IF NE	RTE$M
	MOV	R1,-(SP)
	ADD	#3,R1
	BIC	#3,R1
	SUB	R1,@SP
	ADD	(SP)+,SYHTOP
.ENDC
	MOV	R4,R2
	SUB	R1,R4
	ADD	#1000,R1
	SUB	R1,R2
	BCS	4$
	ROR	R1
	CMP	R2,#BOTTOP
	BLO	4$
	CALL	B.RDER
INSSWT:	BR	1$
	MOV	TOTMEM,R1
	CALL	INSTAL
	BCC	1$
BADINS:	NOP
	NOP
	JSR	R1,@#REPORT
	 .WORD	CNFSGN
1$:	MOV	(SP)+,R1
	ADD	#H.GEN,R2
				.Assume H.GEN-2 EQ H.DSTS
	MOV	-(R2),-(SP)
				.Assume H.DSTS-2 EQ H.DVSZ
	MOV	-(R2),-(SP)
				.Assume H.DVSZ-2 EQ H.SIZ
	MOV	-(R2),-(SP)
.IF NE	RTE$M
	ADD	#3,@SP
	BIC	#3,@SP
.ENDC
	INC	R0
	MOV	R0,-(SP)
	JMP	@R1
INSTAL:	CALL	T4SEC
	MOV	R2,R5
	ADD	#H.GEN,R5
	CMP	@R5,SYOP
	SEC
	BNE	2$
	ADD	#H.ICSR-H.GEN,R5
	TST	@(R5)+
	T11NOP
	BCS	2$
				.Assume H.ICSR+2 EQ H.DKCD
				.Assume H.ICSR+4 EQ H.SYCD
NONSYS:	TST	(R5)+
	BEQ	2$
	CALL	SAVRG1
2$:	RETURN
.IF NE PRO$S
GTPIHD:	TST	#PI.NUM
	BEQ	NOHAND
	MOV	(PC)+,R0
PIBLK:	 .WORD	0
	BEQ	NOHAND
	CALL	BBRD1
	BCS	INPERR
	RETURN
.ENDC
.SBTTL	Read handler and monitor into memory
DVREAD:	MOV	R0,R5
	MOV	(PC)+,R3
G$VEC:	 .WORD	BADINS
.IF NE PRO$S
	TST	PROFLG
	BEQ	3$
	CALL	GTPIHD
	CALL	LDHNDL
	MOV	R4,R3
	ADD	#14.,R3
	MOV	R3,G$VEC
3$:
.ENDC
	TST	(R3)+
	MOV	#NOP,INSSWT
	MOV	R4,SYHTOP
	MOV	R5,R0
	CALL	BBRD1
	BCS	INPERR
	CALL	LDHNDL
	MOV	R4,R5
	MOV	(PC)+,R0
MONBLK:	 .WORD	0
.IF NE	RTE$M
	SUB	$VSBRO,R0
.ENDC
	ADD	#RELLST/1000,R0
	MOV	#RELEND-RELLST/2,R1
	CALL	BBREAD
	BCS	INPERR
	ADD	#BOOTSZ-<RELLST/1000>,R0
	MOV	R0,R3
	ADD	#KMONSZ,R3
.IF NE	RTE$M
	ADD	$VSBRO,R3
.ENDC
	MOV	$RMSIZ,R1
	SUB	R1,R4
	BLO	4$
	ROR	R1
	MOV	R4,R2
	CMP	R2,#BOTTOP
	BHIS	5$
.IF EQ	BF
	CMP	R2,#1000
	BLO	4$
	SUB	#KMLEN,R1
	MOV	R3,R0
	ADD	#KMSIZE,R2
	CMP	R2,#BOTTOP
	BHIS	5$
.ENDC
4$:	JSR	R1,@#REPORT
	 .WORD	NOCORE+<BUFFB-RELLST>
5$:	CALL	B.RDER
	SUB	#KMON,R4
.IF NE	RTE$M
	TST	(PC)+
CNFMOD:	 .WORD	 0
	BEQ	6$
	BIS	#<BKSP$!HWTAB$>,DLTCB(R4)
	BIC	#<CRLF$>,DLTCB(R4)
6$:
.ENDC
	MOV	R0,-(SP)
	MOV	MONBLK,R0
.IF NE	RTE$M
	SUB	$VSBRO,R0
.ENDC
	ADD	#LDTABL/1000,R0
	MOV	#LDTEND-LDTABL/2,R1
	MOV	#B$BOOT,R2
	CALL	B.RDER
	ADD	#6,R5
	MOV	R5,SYENTR(R4)
	MOV	R5,$ENTRY+2(R4)
.IF NE	RTE$M
	MOV	#$RTELK,R1
	CALL	PROTEC
.ENDC
	CALL	LDTABL+<B$BOOT-LDTABL>
14$:	CALL	@(SP)+
	.DSABL	LSB
	.ENABL	LSB
RLMON2:
.IF NE	MMG$T
	CALL	@#XMREL+<BUFFB-RELLST>
	MOV	MEMSIZ,-(R1)
	SUB	#LOWCOR,@R1
	BHIS	1$
	CLR	@R1
1$:	ADD	#<RMSTAK-$XMSIZ>,R1
	MOV	R1,SP
	PUT	#BOTSTK,SP
.ENDC
.IF NE	RTE$M
	MOV	#$LINKB+2+<BUFFB-RELLST>,R0
2$:	ADD	@#$RTELK,@R0
	ADD	R4,-(R0)
	MOV	(R0)+,@(R0)+
	TST	(R0)+
	BNE	2$
.ENDC
	MOV	#0,$MEMSZ(R4)
MEMSIZ	== .-4
	MOV	#0,$RAMSZ(R4)
TOTMEM	== .-4
	BIS	BCNFG,CONFIG(R4)
	BIS	BCNFG2,CONFG2(R4)
.IF NE	RTE$M
	BIS	#<RTEM$>,SYSGEN(R4)
	BIS	#<UCFON>,CLIFLG-$RMON(R4)
.ENDC
.IF NE	MPT$Y
MVPTBL:	MOV	#PARTBL,R3
	ADD	R4,R3
	MOV	#PARTB,R1
3$:	MOV	(R1)+,(R3)+
	CMP	R1,#PARTBE
	BLO	3$
.ENDC
.IF NE	KW11$P
	BISB	PROBTS+<<104/4>&3>,LOWMAP+<104/20>(R4)
.ENDC
.IF NE PRO$S
	TST	PROFLG
	BEQ	33$
	MOV	G$VEC,GETVEC(R4)
	BIC	#CLK50$,CONFIG(R4)
33$:
.ENDC
.IF EQ RTE$M
 .IF NE	BF+TIME$R
HRTZ50::BIT	#CLK50$,CONFIG(R4)
	BEQ	4$
	MOV	#101,GTM.HI(R4)
	MOV	#165400,GTM.LO(R4)
4$:
 .ENDC
.ENDC
	TST	DUPFLG
	BNE	7$
	MOV	#BTIME,R3
	MOV	(R3)+,$TIME(R4)
	MOV	(R3)+,$TIME+2(R4)
	MOV	@R3,$DATE(R4)
7$:
.IF NE	MMG$T
	BISB	PROBTS+<<V.MMU/4>&3>,LOWMAP+<V.MMU/20>(R4)
.ENDC
	.DSABL	LSB
	CALL	SETSIO+<B$BOOT-LDTABL>
	MOV	MONBLK,R0
	ADD	#STRTOV/1000,R0
	MOV	#STRTEN-STRTOV/2,R1
	MOV	#B$BOOT,R2
	CALL	B.RDER
	CALL	CLNUP+<B$BOOT-STRTOV>
	.BR	GTHNDL
.SBTTL	Install handlers
	.ENABL	LSB
GTHNDL:	.RCTRLO
1$:	CLR	LDFLG
	MOV	#HNAMES-2,R3
2$:	TST	(R3)+
	MOV	#$ENTRY,R1
	ADD	R4,R1
	MOV	(R3)+,R2
	BEQ	14$
	CLR	R5
3$:	CMP	(R1)+,#-1
	BEQ	8$
	MOV	$PNAME-<$ENTRY+2>(R1),R0
	BNE	5$
	TST	R5
	BNE	5$
..INSA	==	.
4$:	MOV	R1,R5
5$:	CMP	B$DEVS,R0
	BNE	6$
	TST	-2(R1)
	BNE	6$
	CLR	$PNAME-<$ENTRY+2>(R1)
	CLR	R0
	BR	4$
6$:	CMP	R2,R0
	BNE	3$
	MOV	-(R1),R2
	BIS	$DVREC-$ENTRY(R1),R2
	BNE	2$
	BR	9$
7$:	MOVB	#177,FRSLFL
	BR	2$
8$:	MOV	R5,R1
	BEQ	7$
	TST	-(R1)
9$:	MOV	@R3,R0
	MOV	R1,-(SP)
	CALL	BBRD1
	MOV	(SP)+,R1
	BCS	13$
	MOV	(PC)+,@(PC)+
	 TST	@R5
	 .WORD	NONSYS
	CALL	INSTAL
	BCS	12$
	INC	@R3
	MOV	@R3,$DVREC-$ENTRY(R1)
	MOV	#BUFFB+H.SIZ,R2
	MOV	(R2)+,$HSIZE-$ENTRY(R1)
				.Assume H.SIZ+2 EQ H.DVSZ
	MOV	(R2)+,$DVSIZ-$ENTRY(R1)
				.Assume H.DVSZ+2 EQ H.DSTS
	MOV	(R2)+,$STAT-$ENTRY(R1)
	MOV	-2(R3),$PNAME-$ENTRY(R1)
	BR	2$
12$:	CMP	$PNAME-$ENTRY(R1),#<^RBA >
	BEQ	2$
	CLR	$PNAME-$ENTRY(R1)
	BR	2$
13$:	.PRINT	#ERRHND
	BR	2$
14$:	MOV	R1,-(SP)
15$:	MOV	(R1)+,R0
	BNE	18$
16$:	TST	$DVREC-<$ENTRY+2>(R1)
	BEQ	17$
	CMP	$PNAME-<$ENTRY+2>(R1),#<^RLD >
	BNE	15$
	INCB	(PC)+
LDFLG:	 .BYTE	0
FRSLFL:	 .BYTE	0
	BR	15$
17$:
.IF	NE	BATC$H
	CMP	$PNAME-<$ENTRY+2>(R1),#<^RBA >
	BEQ	15$
.ENDC
	CLR	$PNAME-<$ENTRY+2>(R1)
	INCB	FRSLFL
	BR	15$
18$:	INC	R0
	BNE	15$
	MOV	(SP)+,R1
	TSTB	FRSLFL
	BMI	1$
19$:	MOV	(R1)+,R0
	BEQ	19$
	CMP	R0,#-1
	BEQ	20$
	CMP	R0,$ENTRY+2(R4)
	BHIS	19$
	ADD	R4,-2(R1)
	BR	19$
20$:	JMP	STRTUP+<B$BOOT-STRTOV>
	.DSABL	LSB
.SBTTL	Trap to 4 interceptors
BCLR:	CLR	@R1
	ADD	(PC)+,@SP
PCFIX:	 .WORD	 0
BRTI:	RTI
BSEC:	BIS	#1,2(SP)
	RTI
.IF NE PRO$S
	.ENABL	LSB
BERR05:	MOV	#5,R1
	BR	1$
BERRXX:	MOV	@R1,R0
	CLR	R1
	BISB	-(R0),R1
1$:	MOV	#51124,R0
	JMP	@#167730
	.DSABL	LSB
.ENDC
.SBTTL	Protect vector(s)
PROTEC:	JSR	R5,SAVREG
	ASR	R1
	ASR	R1
	MOV	R1,R2
	BIC	#^C<3>,R1
	ASR	R2
	ASR	R2
	ADD	R4,R2
	BISB	PROBTS(R1),LOWMAP(R2)
2$:	RETURN
.DSABL	LSB
PROBTS:	.BYTE	^B11000000,^B00110000,^B00001100,^B00000011
.SBTTL	Utility subroutines - SAVREG, Readers
SAVRG1:	MOV	R5,-(SP)
SAVREG:	MOV	R4,-(SP)
	MOV	R3,-(SP)
	MOV	R2,-(SP)
	MOV	R1,-(SP)
	MOV	R0,-(SP)
	MOV	R5,-(SP)
	MOV	12.(SP),R5
	CALL	@(SP)+
	MOV	(SP)+,R0
	MOV	(SP)+,R1
	MOV	(SP)+,R2
	MOV	(SP)+,R3
	MOV	(SP)+,R4
	MOV	(SP)+,R5
	RETURN
BREAD1::MOV	R0,AREA+2
	.READW	#AREA,#0,R2,R1
	RETURN
BBRD1:	MOV	#256.,R1
BBREAD:	MOV	#BUFFB,R2
B.READ:	JSR	R5,SAVREG
	CALLR	@B$READ
T4SEC:	MOV	@#V.TR4,1$
	MOV	#BSEC,@#V.TR4
	MOV	@#V.TR10,2$
	MOV	#BSEC,@#V.TR10
	CALL	@(SP)+
	MOV	(PC)+,@(PC)+
1$:	 .WORD	0,V.TR4
	MOV	(PC)+,@(PC)+
2$:	 .WORD	0,V.TR10
	RETURN
.SBTTL	Configuration bits
BCNFG2::.WORD	0
BCNFG::	.WORD	LSI11$
TSLIST::
TSLSI:	.WORD	LSI11$
TSLKC:	.WORD	LKCS$
TSCLO:	.WORD	CLOCK$
TSHWF:	.WORD	HWFPU$
.IF NE MMG$T
TSKT:	.WORD	KT11$
.ENDC
.IF NE VT11$!VS60$
TSHWD:	.WORD	HWDSP$
.ENDC
.IF EQ RTE$M
 .IF EQ KW11$P
TSKW:	.WORD	KW11P$
 .ENDC
.ENDC
.IF NE VT11$!VS60$
TSVS:	.WORD	VS6$0
.ENDC
TSCA:	.WORD	CACHE$
TS70:	.WORD	PDP70$
TSEIS:	.WORD	EIS$
TSSWR:	.WORD	SWREG$
TSLIT:	.WORD	LIGHT$
TS60:	.WORD	PDP60$
TSCIS:	.WORD	CIS$
TSLD:	.WORD	LDREL$
.IF NE PRO$S
PROFLG:	.WORD	0
.ENDC
.IF NE MPT$Y
TSMP:	.WORD	MPTY$
.ENDC
TSBUS:	.WORD	BUS$
.SBTTL	Bootstrap impure data area
.IF EQ RTE$M
FALCON:	.WORD	0
.ENDC
BUSTYP:	.WORD	0
MEMTOP:	.WORD	0
SWPSIZ::.WORD	-1
SWPBLK::.WORD	0
AREA::	.BLKW	5
.IF NE MPT$Y
PARTB::
	.REPT	16.
	.WORD	0
	.ENDR
PARTBE:
.ENDC
.IF NE RTE$M
$VSBRO:	.WORD	0
.ENDC
.SBTTL	Error message text
.IF EQ BF
TTMSG:	.ASCIZ	"?BOOT-W-Invalid or missing TT.SYS"
.ENDC
.IF NE MMG$T
	.BYTE	7
NOMMGT:	.ASCIZ	"No KT11"
.ENDC
	.BYTE	11
NSWAP:	.ASCIZ	"SWAP.SYS not found"
	.BYTE	3
NOHNDL:	.ASCIZ	"Handler file not found"
	.BYTE	10
SPTSML:	.ASCIZ	"Swap file too small"
ERRHND:	.ASCIZ	"?BOOT-W-Error reading handler"
	.BYTE	6
NOMON:	.ASCIZ	"Monitor file not found"
	.BYTE	2
CNFSGN:	.ASCIZ	"Conflicting SYSGEN options"
.IF NE	RTE$M
UNXTRP:	.ASCIZ	"Unexpected trap"
ILHOST:	.ASCII	<CR><0><0><0><0><LF>
	.ASCII	"?BOOT-U-Host system incorrect for RTEM"<CR><LF><LF><200>
.IFTF
	.EVEN
.IFT
.SBTTL	Fixed storage locations for RTEM-11 (MONITOR I/O CHECK)
.ASSUME .	LE	4714
.	= 4714
RTEVER::.WORD	RTS$ID
.ENDC
.ASSUME	.	LE	4716
.SBTTL	Fixed storage locations for primary boot and DUP
.	= 4716
B$DEVN::.WORD	0
B$DEVS::.WORD	0
.IF EQ	RTE$M
B$DEVU::.WORD	<^RBOT>
.IFF
B$DEVU::.WORD	<^RRTE>
.ENDC
B$FNAM::.WORD	0
	.WORD	0
B$READ::.WORD	0
SYHTOP::.WORD	0
DUPFLG::.WORD	0
$RMSIZ::.WORD	$RMEND-KMON
.SBTTL	Boot message
.ASSUME	.	EQ	4740
BSTRNG::
	.ASCII	<CR><LF><NAME$1><NAME$2>"-"<NAME$3><NAME$4><NAME$5><NAME$6>" "
 .IF DF	SYSG$N
	.ASCII	"(S)"
 .ENDC
	.ASCII	" "
	...CMV	PART=PREFIX,TYPE=I
	...CMV	PART=RELEASE,TYPE=I
	.ASCII	"."
	...CMV	PART=VERSION,TYPE=I
	.ASCII	" "
..PLVL	== .
	...CMV	PART=SUFFIX,TYPE=Z
	.EVEN
.ASSUME	.	LE	4774
.	= 4774
..SUFF	== .
SUFFX::	ASCR50	040,040,SUFX$H
	.WORD	...V2
SYOP:	.WORD	<ERL$G*ERLG$>+<MMG$T*MMGT$>+<TIM$IT*TIMIT$>+<RTE$M*RTEM$>
BTIME	= .
BDATE	= BTIME + 4
BUFFB	= BDATE + 2
HNAMES	= BUFFB + 2000
.IF NE RTE$M
BHIMEM	= BUFFB
BSVTK	= BHIMEM+2
BLK50$	= BSVTK+2
BLKGRN	= BLK50$+2
BSYFPU	= BLKGRN+2
.ENDC
.SBTTL	Relocation list
.ASSUME	.&777	EQ	0
RELLST::
	.WORD	USRLOC
	.WORD	$USRLC
	.WORD	QCOMP
	.WORD	$KMLOC
	.WORD	SYSLOW
	.WORD	CORPTR+2
	.WORD	SYNCH
	.WORD	$TCFIG
	.WORD	$INDDV
	.WORD	GETVEC
.IF NE	BF!<MTT$Y-1>
	.WORD	TTIBUF
	.WORD	TTIBUF+2
	.WORD	TTIBUF+6
	.WORD	TTIBUF+10
	.WORD	TTOBUF
	.WORD	TTOBUF+4
	.WORD	TTOBUF+6
.ENDC
.IF NE	HSR$B
	.WORD	PHSRRT
	.WORD	HSRB
	.WORD	HSRBEP
	.WORD	HSRBRP
	.WORD	HSRBGP
 .IF NE	<DL11$N-1>!<MTT$Y-1>
	.WORD	PHSRRB
 .ENDC
.ENDC
.IF NE	MTT$Y
 .IF NE	HSR$O
  .IF GT	DL11$N-1
	.WORD	PHSRBO
	.WORD	HSROPP
	.WORD	HSROEP
	.WORD	HSRORP
	.WORD	HSROGP
  .ENDC
 .ENDC
.ENDC
.IF NE	<VT11$!VS60$> & ^CMTT$Y
	.WORD	SCLNK2
.ENDC
.IF NE	BF
	.WORD	IMPLOC
	.WORD	TTIUSR
	.WORD	TTOUSR
	.WORD	FUDGE1
	.WORD	FUDGE2
	.WORD	BKGND1
	.WORD	BKGND2
	.WORD	BKGND3
	.WORD	CNTXT
	.WORD	BCNTXT
	.WORD	PBSYCH
	.WORD	SWIPTR
	.WORD	SWOPTR
	.WORD	.$CRTN
.IF NE	MTT$Y
	.WORD	BKCNSL
.ENDC
 .IF EQ	MMG$T
	.WORD	RMONSP
 .IFF
	.WORD	P1EXT
	.WORD	BGWPTR
	.WORD	$TRPLS
	.WORD	TRPLST+4
	.WORD	TRPLST+10
	.WORD	TRPLST+14
  .IF NE	FPU$11
	.WORD	BGFPPT
  .ENDC
 .ENDC
.ENDC
.IF NE	MTT$Y
	.WORD	TTITPT
	.WORD	TTOTPT
 .IF GT	DL11$N-1
 .IIF EQ HSR$B,	.WORD	PDLTB0
	.WORD	PDLTB1
 .ENDC
 .IF NE	DL11$M
	.WORD	DLCRP1
	.WORD	DLCRP2
 .ENDC
 .IF NE	MTI$M
	.WORD	PDLCS1
	.WORD	DLTMCP
 .ENDC
 .IF GT	DZ11$N-1
	.WORD	PDZTB0
	.WORD	PDZCS0
	.WORD	PDZTB1
	.WORD	PDZCS1
 .ENDC
 .IF NE	DZ11$N
	.WORD	PBMSK1
	.WORD	PBMSK2
	.WORD	PBMSK3
  .IF NE	DZ11$M
	.WORD	PBMSK4
	.WORD	PBMSK5
	.WORD	PDZCS2
	.WORD	PDZTB2
	.WORD	DZTMCP
  .ENDC
 .ENDC
.ENDC
.IF EQ	BF
	.WORD	TRAPLC
	.WORD	TRAPER
	.WORD	MONLOC
	.WORD	I.CSW
	.WORD	AVAIL
	.WORD	PAVAIL
	.WORD	PMONLC
	.WORD	P$SYSC
	.WORD	PQCNT
	.WORD	PI.CSW
	.WORD	P$SWPB
.IF NE	FPU$11
	.WORD	FPPADD
	.WORD	FPPIGN
.ENDC
.IF EQ	MTT$Y
	.WORD	PTIBF4
	.WORD	PTTPRE
	.WORD	PTOBF2
	.WORD	PTOBF4
	.WORD	PTIBF6
.IFF
	.WORD	PMTCBB
	.WORD	PBCTCB
	.WORD	I.CNSL
.ENDC
.IF NE	PANI$C
	.WORD	PSPTR
.ENDC
.IF NE	TIME$R
	.WORD	FUDGE1
	.WORD	FUDGE2
	.WORD	FUDGE3
	.WORD	PLKQUE
	.WORD	P$TIM2
	.WORD	PLKQU2
.IF EQ	MTT$Y
	.WORD	PTBCNT
.ENDC
.ENDC
.ENDC
.IF NE	MMG$T
	.WORD	TRPLST
.ENDC
	.WORD	0
	...REL =: 1
VECLST::
	.WORD	0
		BIC	R0,R0
.IF EQ	MMG$T
		.EXIT
.IFF
		.ASTX
.ENDC
	.WORD	V.TR4!...REL,	TRAP4,	PR7
	.WORD	V.TR10!...REL,	TRAP10,	PR7+1
.IF NE	MMG$T
	.WORD	V.BPT!...REL,	TRAPBP,	PR7
	.WORD	V.IOT!...REL,	TRAPIO,	PR7
.ENDC
.IF EQ	PWF$L
	.WORD	V.PWFL,	V.PWFL+2,0
.IFF
	.WORD	V.PWFL!...REL,	TRAPPF,	PR7
.ENDC
	.WORD	V.EMT!...REL,	EMTPRO,	PR0
.IF NE	MMG$T
	.WORD	V.TRAP!...REL,	TRAPTR,	PR7
.ENDC
	.WORD	JSW,	100000,	0
..TFIL	== .+4
	.WORD	SYSPTR!...REL,	$RMON,	0
	.WORD	V..TKB!...REL,	TTIINT,	PR7
.IF NE	BF!MTT$Y
	.WORD	V..TPS!...REL,	TTOINT,	PR7
.IFF
	.WORD	V..TPS!...REL,	TTOINT,	PR4
.ENDC
.IF NE KW11$P
	.WORD	V.LTC,	V.LTC+2,RTI
.ENDC
	.WORD	LKVEC!...REL,	LKINT,	PR7+1
.IF EQ	MPT$Y
	.WORD	V.MPTY,	V.MPTY+2,0
.IFF
	.WORD	V.MPTY!...REL,	TRAPMP,	PR7
.ENDC
	.WORD	0
VECHI:
	.WORD	V.TKB!...REL,	TTIINT,	PR7
.IF NE	BF!MTT$Y
	.WORD	V.TPS!...REL,	TTOINT,	PR7
.IFF
	.WORD	V.TPS!...REL,	TTOINT,	PR4
.ENDC
.IF EQ	FPU$11
	.WORD	V.FPP,	V.FPP+2, 0
.IFF
	.WORD	V.FPP!...REL,	FPPINT,	PR7
.ENDC
.IF NE	MMG$T
	.WORD	V.MMU!...REL,	TRAPMM,	PR7
.ENDC
	.WORD	0
	.BR	LDSTRT
LDSTRT:
.IF EQ SUFX$H-040
	.ASCII	"!RUN SY:LD"
..BLDS==.
	.ASCII	".SYS  /C:-1"<CR><LF>
.IFF
	.ASCII	"!RUN SY:LD"
..BLDS==.
	.ASCII	<SUFX$H>".SYS /C:-1"<CR><LF>
.ENDC
	.BYTE	0
	.BR	ATFILE
ATFILE:
.IF NE	STAR$T
	.ASCIZ	"@START"<SUFX$S>
.ENDC
	.EVEN
.IF EQ	RTE$M
LSIMOD:
.IF NE	BF
	.WORD	^B<11011010>
	.WORD	M$SV11
MSV11::	.WORD	160000
.IFF
	.WORD	^B<1101101>
.ENDC
	.WORD	GETPSW
	MFPS	-(SP)
	NOP
	.WORD	PUTPSW
	MTPS	2(SP)
	NOP
.IF EQ	BF
 .IF EQ	TIME$R
	.WORD	$INTEN+2
 .IFF
	.WORD	$INTEN+6
 .ENDC
.IFF
	.WORD	RMONPS
.ENDC
	MFPS	R4
	BIC	(R5)+,R4
	MTPS	R4
.ENDC
.IF NE	RTE$M
RTEMOD:
	.WORD	^B<0101001010101001>
	.WORD	$RMON
	CALLR	@(PC)+
	.WORD	.$INTN
	.WORD	GTVECT
	.WORD	0
	.WORD	GETPSW
	CALLR	@(PC)+
	.WORD	.$GTPS
	.WORD	PUTPSW
	CALLR	@(PC)+
	.WORD	.$PTPS
	.WORD	DRINTN
	.WORD	0
P$FORQ:	.WORD	.$FORQ
	.WORD	DRINTN-2
	.WORD	0
P$INTN:	.WORD	.$INTN
	.ASSUM	P$INTN EQ P$FORQ+6
	.ASSUM	TIM$IT!ERL$G!MMG$T EQ 0
	.WORD	BCNTXT+4+<..SDTM*2>
	.WORD	<EMTRTI-TOOBIG>*2+1
	.WORD	FATAL
	JSR	R1,@(PC)+
	.WORD	.$FATA
	.WORD	RTICML
	CALLR	@(PC)+
	.WORD	.$RTIC
	.WORD	^B<0101101011010101>
	.WORD	D$ATE
	CALL	@(PC)+
	.WORD	.$GTDA
	.WORD	EXIHOK
	CALL	@(PC)+
	.WORD	.$DARL
	.WORD	EXRDKM
	CALL	@(PC)+
	.WORD	.$RDKM
	.WORD	GTIHOK
	CALL	@(PC)+
	.WORD	.$GTTI
	RETURN
	.WORD	ENSHOK
	CALLR	@(PC)+
	.WORD	.$GETE
	.WORD	RMONPS
	CALL	@(PC)+
	.WORD	.$SPL0
	TST	(R5)+
	.WORD	RTICMN
	CALLR	@(PC)+
	.WORD	.$RTIC
	.WORD	^B<010101001>
	.WORD	FPSHOK
	CALL	@(PC)+
	.WORD	.$FPST
	.WORD	SCNALL
	MOVB	(PC)+,-(SP)
	.WORD	SCNALL+4
	CALLR	@(PC)+
	.WORD	.$IDLP
	.WORD	CRRHOK
	CALLR	@(PC)+
	.WORD	.$CRTI
	.WORD	$RQSIG
	CALLR	@(PC)+
	.WORD	.$RQSG
	.WORD	^B<01>
	.WORD	DLIHOK
	JSR	R5,@(PC)+
	.WORD	.$INTN
  .IF EQ	HSR$B
   .IF EQ	HSR$O
	.WORD	^B<110>
   .IFF
	.ERROR
   .ENDC
  .IFF
   .IF EQ	HSR$O
	.ERROR
   .IFF
	.WORD	^B<11001>
   .ENDC
  .ENDC
  .IF NE	HSR$B
	.WORD	FRQHOK
	JSR	R5,@(PC)+
	.WORD	.$FORQ
  .ENDC
  .IF EQ	HSR$O
	.WORD	DLOHOK
	BR	.+12
  .IFF
	.WORD	DLOHOK
	BR	.+14
  .ENDC
	.WORD	TTOENB
	CALL	@(PC)+
	.WORD	.$RSTT
	NOP
	.WORD	^B<0101010101001001>
	.WORD	MTTGET
	CALL	@(PC)+
	.WORD	.$GETP
	.WORD	MTTGET+12
	.WORD	NOP
	.WORD	MTTHOK
	CALL	@(PC)+
	.WORD	.$PTPS
	.WORD	ERRHOK
	BR	.+14
	.WORD	TTPS
	.WORD	0
	.WORD	.$TPB
	.WORD	TTKB
	.WORD	0
	.WORD	.$TPS
	.WORD	TTKS
	.WORD	0
	.WORD	.$TKB
	.WORD	SCROLL
	.WORD	0
	.WORD	.$TKS
	.WORD	RCTHOK
	CALL	@(PC)+
	.WORD	.$RSCT
.IF	GT,DL11$N-1
	.WORD	^B<01010000>
.IFF;	GT,DL11$N-1
	.WORD	^B<101>
.IFT;	GT,DL11$N-1
	.WORD	TTIINT
	 NOP
	.WORD	TTIINT+2
	 NOP
	.WORD	DLOINT
	 NOP
	.WORD	DLOINT+2
	 NOP
.ENDC;	GT,DL11$N-1
	.WORD	TIMIO
	CALL	@(PC)+
	.WORD	.$MRKT
	.WORD	CMTHOK
	CALL	@(PC)+
	.WORD	.$CMKT
	.WORD	0
RTEMP::	.BLKW	$LRLPZ * 4
	.WORD	0
.ENDC
.SBTTL	PSW Reference List
.IF EQ	RTE$M
	MOVB	(SP)+,@(PC)+
	MOV	@(PC)+,-(SP)
	CLRB	@(PC)+
PSWPDP:	MOVB	(PC)+,@(PC)+
	.WORD	PS
	.WORD	PS
	.WORD	PS
PSWPD2:	.WORD	PS
	MTPS	(SP)+
	MFPS	-(SP)
	MTPS	(PC)+
PSWLSI:	MTPS	(PC)+
	NOP
	NOP
	.WORD	0
	NOP
.IFF
	CALL	@(PC)+
	CALL	@(PC)+
	CALL	@(PC)+
PSWRTE:	CALL	@(PC)+
	.$PTPS
	.$GETP
	.$SPL0
PSWVR2:	.$SPL7
PSWNOP:	NOP
.ENDC
.SBTTL	System handler relocation table
.IF EQ	RTE$M
HNDLST::.WORD	$FORK
	.WORD	$INTEN
 .IF NE	TIM$IT
	.WORD	$TIMIO
 .ENDC
 .IF NE	ERL$G
	.WORD	$ERLOG
 .ENDC
 .IF NE	MMG$T
	.WORD	$PUTWR
	.WORD	$PUTBY
	.WORD	$GETBY
	.WORD	$MPPHY
	.WORD	$RELOC
 .ENDC
	.WORD	0
.ENDC
.IF NE	RTE$M
.SBTTL	Table of monitor addresses for RTEM linkage
$LINKB::
	.WORD	EXUSER,	.EXUSE
	.WORD	FPPFLG,	.FPPFL
	.WORD	INTACT,	.INTAC
	.WORD	INTLVL,	.INTLV
	.WORD	LKQUE,	.LKQUE
	.WORD	PSCLOK, .PSCLO
	.WORD	RMONSP,	.RMONS
	.WORD	SAVE30, .SAVE3
	.WORD	$SYS,	.SYS
	.WORD	TASKSP,	.TASKS
	.WORD	TIKCTR,	.TIKCT
	.WORD	TTRSET,	.TTRSE
	.WORD	$ENSYS,	.$ENSY
	.WORD	$FORK,	.$FORK
	.WORD	$INTEN,	.$INTE
	N = 0
	.REPT	$RMLPZ
	.IRP	K	\N
	 .WORD	$RMON,	.$RMP'K
	.ENDR
	N=N+1
	.ENDR
	.WORD	0
.ENDC
.SBTTL	Fix references to the PS
FIXPSW:
	.ENABL	LSB
.IF EQ	RTE$M
	MOV	#PSWPDP+<BUFFB-RELLST>,R3
	BIT	#LSI11$,@#BCNFG
	BEQ	4$
	MOV	#PSWLSI+<BUFFB-RELLST>,R3
	MOV	#LSIMOD+<BUFFB-RELLST>,R0
.IFF
	MOV	#RTEMOD+<BUFFB-RELLST>,R0
	MOV	#PSWRTE+<BUFFB-RELLST>,R3
.IFTF
	MOV	(R0)+,R2
.IFT
 .IF NE	BF
	CMP	@#MEMTOP,#160000
	BLOS	1$
	MOV	@#MEMTOP,MSV11
 .ENDC
.IFTF
1$:	MOV	(R0)+,R1
	ADD	R4,R1
2$:	MOV	(R0)+,(R1)+
	ASR	R2
.IFF
	BCC	3$
	ADD	@#$RTELK,(R0)
	MOV	@(R0)+,(R1)+
	ASR	R2
3$:
.IFTF
	BCS	2$
	BNE	1$
.IFF
	MOV	(R0)+,R2
	BNE	1$
	MOV	#DRINTN+4,R0
	MOV	SYHTOP-<BUFFB-RELLST>,R1
	MOV	#$RMON,R2
	ADD	R4,R2
	ADD	R4,R0
	MOV	-(R0),-(R1)
	SUB	R2,@R0
	MOV	@R0,O$FORK(R2)
	MOV	-(R0),-(R1)
	SUB	R2,@R0
.ENDC
4$:
.IF NE	MTT$Y
 .IF GT	DL11$N-1
	MOV	#PSWMTI,R0
 .IFF
  .IF GT DZ11$N-1
	MOV	#PSWMTI,R0
  .IFF
	MOV	#PSWLST,R0
  .ENDC
 .ENDC
.IFF
	MOV	#PSWLST,R0
.ENDC
5$:	ADD	R4,R0
	MOV	(R0)+,R2
	MOV	@R0,R1
.IF NE	RTE$M
	BLT	6$
	CLR	R1
	MOV	PSWNOP,2(R0)
6$:	ADD	R3,R1
	MOV 	PSWVR2-PSWRTE(R1),@R0
	ADD	@#$RTELK,@R0
	MOV	@(R0)+,-(R0)
	MOV	@R1,-(R0)
.IFF
	BGT	7$
	ADD	R3,R1
	MOV 	PSWPD2-PSWPDP(R1),@R0
	MOV	@R1,-(R0)
	BR	8$
7$:	MOV 	PSWPD2-PSWPDP(R3),2(R0)
	MOV	@R3,-(R0)
.ENDC
8$:	MOV	R2,R0
	BNE	5$
RELMON:	MOV	#RELLST+<BUFFB-RELLST>,R0
	MOV	(R0)+,R1
9$:	ADD	R4,R1
	ADD	R4,@R1
	MOV	(R0)+,R1
	BNE	9$
RELVEC:
10$:	MOV	(R0)+,R1
11$:	MOV	(R0)+,-(SP)
	ROR	R1
	BCC	1111$
	ADD	R4,@SP
1111$:	ASL	R1
	MOV	(SP)+,(R1)+
	MOV	(R0)+,(R1)+
	MOV	(R0)+,R1
	BNE	11$
	RETURN
CORUPT:	MOV	#VECHI+<BUFFB-RELLST>,R0
	CALL	RELVEC
	MOV	#CHAINA+2,R1
	MOV	R1,R2
12$:	MOVB	(R0)+,(R1)+
	BNE	12$
	TSTB	-(R1)
13$:	TST	(PC)+
..NIND	== .
START$: .WORD	STAR$T
	BEQ	15$
14$:	MOVB	(R0)+,(R1)+
	BNE	14$
15$:	SUB	R2,R1
	MOV	R1,-(R2)
	RETURN
	.DSABL	LSB
.IF NE MMG$T
XMREL:: MOV	#$XMPTR,R1
	ADD	R4,R1
	RETURN
.ENDC
.SBTTL	Miscellaneous overlaid data
	.BYTE	4
NOCORE:	.ASCIZ	"Insufficient memory"
	.EVEN
RELEND::
.ASSUME	RELEND-RELLST LE 2000
	. = . + 777 / 1000 * 1000
.IF EQ	RTE$M
.SBTTL	KT11 registers and enable memory mapping
	.ENABL	LSB
.ASSUME	.&777	EQ	0
KT11RG::CALL	@#T4SEC
	CLC
	MOV	@#MEMSIZ,@#TOTMEM
	TST	@#SR0
	T11NOP
	BCS	9$
	BIS	#20,@#SR3
.IF NE PRO$S
	TST	@#PROFLG
	BEQ	1$
	CLR	R0
	BISB	@#173050,R0
	SWAB	R0
	ASL	R0
	SUB	#40,R0
	MOV	R0,CHKLIM
.ENDC
1$:	MOV	#PMODE+PR7,@#PS
	MOV	#KISAR0,R3
	MOV	#KISDR0,R1
	MOV	#UISAR0,R2
	MOV	#UISDR0,R0
	MOV	R4,-(SP)
	MOV	#8.,R4
	CLR	R5
2$:	MOV	R5,(R3)+
	MOV	R5,(R2)+
	MOV	#AP$ACF,@R1
	MOV	(R1)+,(R0)+
	ADD	#200,R5
	SOB	R4,2$
	MOV	#177600,-(R3)
	MOV	@R3,-(R2)
	INC	@#SR0
	MOV	#V.MPTY,R0
	MOV	@R0,-(SP)
	MOV	#MPERR+<BUFFB-KT11RG>,(R0)+
	MOV	@R0,-(SP)
	MOV	#PR7,(R0)+
	MOV	#140000,R0
	CLR	-(R3)
	BR	4$
3$:	MOV	#140000,R0
	MOV	@#0,-(SP)
	COM	@R0
	MOV	@#0,-(SP)
	COM	@R0
	CMP	(SP)+,(SP)+
	BNE	5$
	CLC
4$:	MOV	@R0,(R0)+
	T11NOP
	BCS	5$
	CMP	#144000,R0
	BHI	4$
	ADD	#40,@R3
	CMP	@R3,(PC)+
CHKLIM:	 .WORD	177600
	BLO	3$
5$:	MOV	#V.MPTY+2,R0
	MOV	(SP)+,@R0
	MOV	(SP)+,-(R0)
	MOV	(SP)+,R4
	MOV	@R3,R2
	MOV	R2,@#TOTMEM
	MOV	#1400,@R3
.IF NE	MMG$T
	MOV	#LOWCOR,R4
	CMP	R2,R4
	BHIS	6$
	MOV	R2,R4
6$:	MOV	R2,@#MEMSIZ
	ASR	R4
	ASR	R4
	SWAB	R4
	MOV	R4,@#MEMTOP
.IFTF
.IF NE	PRO$S
	TST	@#PROFLG
	BEQ	8$
	CLR	R0
	BISB	@#173050,R0
	SWAB	R0
	ASL	R0
	SUB	#200,R0
	MOV	R0,@#KISAR1
	MOV	#CTI+PROCFG,R0
	MOV	#-1,-(R4)
				.ASSUME	SLOT0 EQ CTI-4
	MOV	@R0,R1
	MOV	R1,R3
	ASL	R3
	ASL	R3
	SUB	R3,R0
7$:	MOV	(R0)+,-(R4)
	TST	(R0)+
	SOB	R1,7$
	MOV	#200,@#KISAR1
8$:
.ENDC
.IFF
	CLR	@#SR0
	CLR	@#SR3
.IFTF
9$:	RETURN
.ENDC
MPERR:	RTI
	.DSABL	LSB
KT11ND::
.ASSUME	KT11ND-KT11RG LE 2000
	. = . + 777 / 1000 * 1000
.ENDC
.ASSUME	.&777	EQ	0
	.ENABL	LSB
.SBTTL	Start the system
STRTOV:
STRTUP:	CLR	R0
	.SETTOP
	CMP	SWPSIZ+<STRTOV-B$BOOT>,#SWAPSZ
	BLO	NOSWAP
	TSTB	LDFLG+<STRTOV-B$BOOT>
	BEQ	15$
	MOVB	#<SPACE>,@#CHAINA+2
15$:	BIS	#CHNIF$,@#JSW
	TST	(PC)+
..SLNT	== .
SILNT$:: .WORD	SILN$T
	BNE	16$
	.PRINT	#BSTRNG
16$:
.IF EQ 	BF!MTT$Y
	TST	$DVREC(R4)
	BNE	17$
	.PRINT	#TTMSG
.ENDC
17$:
	TST	(PC)+
..TTQU	== .
	 .WORD	SILN$T!CONT$N
	BEQ	18$
	BIS	#IFEKO$,STATWD(R4)
18$:
	TST	(PC)+
..INDR 	== .
	.WORD	IND$ON
	BEQ	19$
	BIS	#IFIND,STATWD(R4)
19$:
.IF NE	MTT$Y
 .IF NE	DZ11$M!MTI$M
	TST	(PC)+
..DZOD	== .
MTODT::	 .WORD	0
	BNE	20$
  .IF NE DZ11$M
	CALL	DZMCTL(R4)
  .ENDC
  .IF NE MTI$M
	CALL	DLMPOL(R4)
  .ENDC
 .ENDC
.ENDC
20$:	CLR	R0
	.EXIT
NOSWAP:	JSR	R1,@#REPORT
	 .WORD	SPTSML
CLNUP:
.IF NE	MTT$Y
.SBTTL	Relocate TCB pointers
RELTCB:	MOV	#TCBPEN-TCBLST/2,R5
	MOV	#TCBLST,R0
	ADD	R4,R0
1$:	TST	(R0)+
	BEQ	2$
	ADD	R4,-2(R0)
2$:	SOB	R5,1$
.IF NE	RTE$M
	MOV	@#$RTELK,R1
	MOV	.$TKS(R1),-(SP)
.IFTF
	MOV	#TCBMAX,-(SP)
	ADD	#DLTCB-TCBPEN,R0
3$:
.IFT
	MOV	2(SP),T.CSR(R0)
.IFTF
	MOV	T.VEC(R0),R1
	MOV	T.CSR(R0),R2
.IFF
	BEQ	9$
	CMP	R2,MEMTOP+<STRTOV-B$BOOT>
	BLO	4$
	CALL	T4SEC+<STRTOV-B$BOOT>
	TST	@R2
	T11NOP
	CALL	@(SP)+
	BCC	5$
4$:	CLR	T.CSR(R0)
 .IF NE	DZ11$N
	BIT	#DZ11$,T.STAT(R0)
	BEQ	9$
	MOV	T.PRI(R0),R1
	BIC	#^C<3>,R1
	ASL	R1
	ADD	R4,R1
	CLR	DZCSR(R1)
 .ENDC
	BR	9$
.IFTF
5$:	MOV	R0,R3
	ADD	#T.IRNG,R3
	ADD	R4,(R3)+
	ADD	R4,(R3)+
	TST	(R3)+
	ADD	R4,(R3)+
	ADD	R4,(R3)+
	ADD	#TTYIN,R3
	ADD	R4,(R3)+
	TST	(R3)+
	ADD	R4,(R3)+
	ADD	R4,(R3)+
 .IF NE	DZ11$N
	TSTB	T.PUN(R0)
	BNE	6$
 .ENDC
	CALL	PROTEC+<STRTOV-B$BOOT>
	MOV	@#V.TKB,(R1)+
	MOV	R1,R5
	MOV	T.PRI(R0),(R1)+
	CALL	PROTEC+<STRTOV-B$BOOT>
	MOV	@#V.TPS,(R1)+
	MOV	@R5,@R1
 .IF NE	DZ11$N
	BIT	#DZ11$,T.STAT(R0)
	BEQ	7$
	ADD	#DZIINT-TTIINT,-(R5)
	ADD	#DZOINT-TTOINT,-(R1)
	MOV	#DZMSE$+DZRCV$+DZTIE$,@R2
6$:	MOV	@R0,R1
	BIC	#^C<LINSP$>,R1
	BISB	T.CNF2(R0),R1
	ASLB	R1
	ASLB	R1
	ASLB	R1
	BISB	T.PUN(R0),R1
	BIS	#DZRCO$,R1
	MOV	R1,DZ.LPR(R2)
	BR	9$
 .ENDC
7$:
.IFT
	TST	R2
	BEQ	9$
	CLR	2(SP)
.ENDC
.IF NE PRO$S
	TST	PROFLG+<STRTOV-B$BOOT>
	BNE	8$
.ENDC
	MOV	#IENABL,@R2
8$:
.IF NE	DL11$M
	BIT	#REMOT$,@R0
	BEQ	9$
	BIS	#DL.DIE,@R2
.ENDC
9$:	ADD	#TCBSZ,R0
	DEC	@SP
	BNE	3$
.IF NE	RTE$M
	BIT	(SP)+,(SP)+
.IFF
	MOV	(SP)+,R0
.ENDC
.ENDC
.IF EQ	RTE$M
	TST	FALCON+<STRTOV-B$BOOT>
	BEQ	10$
	MOV	#V.SBRK+4,R1
	MOV	#PR7,-(R1)
	MOV	#170000,-(R1)
	CALL	PROTEC+<STRTOV-B$BOOT>
10$:
.ENDC
.IF NE PRO$S
	TST	PROFLG+<STRTOV-B$BOOT>
	BEQ	13$
	MOV	MONBLK+<STRTOV-B$BOOT>,R0
	ADD	#BSTTBL/1000,R0
	MOV	#BTBLEN-BSTTBL/2,R1
	MOV	#BUFFB+1400,R2
	CALL	B.RDER+<STRTOV-B$BOOT>
	CALL	GTPIHD+<STRTOV-B$BOOT>
	MOV	$ENTRY+PI.NUM(R4),R3
	MOV	#BUFFB+202,R5
	CALL	SAVRG1+<STRTOV-B$BOOT>
	BCC	12$
	JMP	BADINS+<STRTOV-B$BOOT>
12$:
	CALL	PROTEC+<STRTOV-B$BOOT>
	ADD	#4,R1
	CALL	PROTEC+<STRTOV-B$BOOT>
	MOV	#200,R1
	CALL	PROTEC+<STRTOV-B$BOOT>
	MOV	#204,R1
	CALL	PROTEC+<STRTOV-B$BOOT>
	MOV	#230,R1
	CALL	PROTEC+<STRTOV-B$BOOT>
	BR	14$
.ENDC
13$:	MOV	#<LKCS$!CLOCK$>,R1
	BIC	BCNFG+<STRTOV-B$BOOT>,R1
	BNE	14$
	MOV	#1,@#LKPB
	MOV	#LKSTAT,@#LKCS
14$:	RETURN
STRTEN:
	.DSABL	LSB
.ASSUME	STRTEN-STRTOV LE 2000
	. = . + 777 / 1000 * 1000
.SBTTL	Load monitor tables overlay
.ASSUME	.&777	EQ	0
	.ENABL	LSB
LDTABL:	MOV	(SP)+,(PC)+
SAVRET:	 .WORD	0
	MOV	(SP)+,R0
	MOV	(SP)+,$DVREC+2(R4)
	MOV	(SP)+,$HSIZE+2(R4)
	MOV	@#B$DEVS,$PNAME+2(R4)
	MOV	@#SUFFX,HSUFFX(R4)
.IF NE	MMG$T
	MOV	@SP,$SYSCH+4(R4)
.ENDC
	MOV	@SP,$DVSIZ+2(R4)
	MOV	(SP)+,SYDVSZ(R4)
	MOV	(SP)+,$STAT+2(R4)
.IF NE PRO$S
	TST	@#PROFLG
	BEQ	2$
	MOV	@#G$VEC,R1
	SUB	#8.,R1
	MOV	R1,$ENTRY+PI.NUM(R4)
	SUB	#6.,R1
	MOV	(SP)+,$DVREC+PI.NUM(R4)
	ADD	@SP,R1
	MOV	(SP)+,$HSIZE+PI.NUM(R4)
	MOV	(SP)+,$DVSIZ+PI.NUM(R4)
	MOV	(SP)+,$STAT+PI.NUM(R4)
	MOV	#PILST+<B$BOOT-LDTABL>,R5
1$:	MOV	(R5)+,-(R1)
	ADD	R4,@R1
	TST	@R5
	BNE	1$
	BR	3$
2$:	TST	#PI.NUM
	BEQ	3$
	CLR	$PNAME+PI.NUM(R4)
3$:
.ENDC
	MOV	#LOCATE,-(SP)
.IF EQ	BF
	CMP	R0,R3
	BNE	4$
	CLR	KMLOC(R4)
	CLR	KMONIN(R4)
	MOV	#LOCAT1,@SP
4$:
.ENDC
	ADD	R4,@SP
	MOV	@#SWPBLK,$SWPBL(R4)
	MOV	R3,$MONBL(R4)
	MOV	#PR7,-(SP)
	CALL	BRTI+<LDTABL-B$BOOT>
	CALL	@#FIXPSW+<BUFFB-RELLST>
	JMP	@SAVRET
.IF NE	PRO$S
PILST:	.WORD	$FORK
	.WORD	$INTEN
 .IF NE	MMG$T
	.WORD	$PUTWR
	.WORD	$PUTBY
	.WORD	$GETBY
	.WORD	$MPPHY
	.WORD	$RELOC
 .ENDC
	.WORD	0
.ENDC
	.DSABL	LSB
.SBTTL	Set up the system handler, switch to monitor calls for I/O
	.ENABL	LSB
SETSIO:	MOV	#B$DEVU,R0
	BIC	#^C<7>,@R0
	MOVB	@R0,SYUNIT+1(R4)
.IF NE	MMG$T
	MOVB	@R0,$SYSCH+11(R4)
.ENDC
	MOV	@#B$DEVS,R1
	ADD	(R0)+,R1
	ADD	#36,R1
	MOV	R1,DKASSG(R4)
	MOV	R1,SYASSG(R4)
	MOV	(R0)+,MONAME(R4)
	MOV	(R0)+,MONAME+2(R4)
.IF EQ	RTE$M
	TST	(R0)+
	MOV	(R0)+,R1
	MOV	#HNDLST+<BUFFB-RELLST>,R3
1$:	MOV	(R3)+,-(R1)
	ADD	R4,@R1
	TST	@R3
	BNE	1$
.ENDC
	MOV	#$CSW,R0
	ADD	R4,R0
	MOV	#ACTIV$!2,(R0)+
	CLR	(R0)+
	MOV	#-1,(R0)+
	CLR	(R0)+
	CLRB	(R0)+
	MOVB	@#B$DEVU,@R0
	MOV	R4,R3
	ADD	#$ENTRY+2,R3
	MOV	#B.RDER,R0
	MOV	#12,R1
	MOV	@#G$VEC,R5
	CALL	DRCALL(R4)
	MOV	@R3,R2
	SUB	#6.,R2
	CLR	R3
	MOV	(R2)+,R1
	BPL	9$
	ASL	R1
	ADD	R1,R2
	MOV	(R2)+,R1
	BPL	8$
	MOV	(R2)+,-(SP)
	CALL	@R5
	MOV	(SP)+,R3
	BCC	7$
	JMP	@#BADINS
7$:	MOV	(R2)+,R1
8$:	ADD	R3,R1
9$:	BLE	10$
	CALL	@#PROTEC
	MOV	R2,@R1
	ADD	(R2)+,(R1)+
	MOV	(R2)+,@R1
	BR	7$
10$:	CALL	@#CORUPT+<BUFFB-RELLST>
	CLR	-(SP)
	CALL	@#BRTI
	MOV	#BREAD1,@#B$READ
	RETURN
	.DSABL	LSB
LDTEND:
.ASSUME	LDTEND-LDTABL LE 2000
	. = . + 777 / 1000 * 1000
.ASSUME	.&777	EQ	0
BSTTBL::
.IF NE PRO$S
	.BYTE	3.
	.BYTE	1.
	.WORD	^B010
	.WORD	LKVEC
	.WORD	TTKB
	.WORD	204
	.BYTE	3.
	.BYTE	200+2.
	.WORD	^B111
	.WORD	LKINT
	.WORD	TTIIN2
	.WORD	SAVE30
.IF NE	MTT$Y
	.BYTE	10.
	.BYTE	3.
	.WORD	^B1111111111
	.WORD	HKPC03
	.WORD	HKPC03+2
	.WORD	HKPC04
	.WORD	HKPC04+2
	.WORD	HKPC05
	.WORD	HKPC05+2
	.WORD	HKPC07
	.WORD	HKPC07+2
	.WORD	TTIINT
	.WORD	TTIINT+2
.IF NE	HSR$B
	.BYTE	2.
	.BYTE	4.
	.WORD	^B11
	.WORD	HKPC09
	.WORD	HKPC09+2
.IFF
	.BYTE	2.
	.BYTE	5.
	.WORD	^B11
	.WORD	HKPC08
	.WORD	HKPC08+2
.ENDC
.IF NE	MTI$M
	.BYTE	4.
	.BYTE	6.
	.WORD	^B1111
	.WORD	HKPC01
	.WORD	HKPC01+2
	.WORD	HKPC02
	.WORD	HKPC02+2
.ENDC
.IFF
	.BYTE	14.
	.BYTE	7.
	.WORD	^B11111111111111
	.WORD	HKPC06
	.WORD	HKPC06+2
	.WORD	TTIINT
	.WORD	TTIINT+2
	.WORD	HKPC10
	.WORD	HKPC10+2
	.WORD	TTOENB
	.WORD	TTOENB+2
	.WORD	HKPC12
	.WORD	HKPC12+2
	.WORD	NULHOK
	.WORD	NULHOK+2
	.WORD	PC1HOK
	.WORD	PC1HOK+2
.ENDC
	.WORD	0.
.ENDC
BTBLEN = .
.ASSUME	BTBLEN-BSTTBL LE 400
	. = . + 777 / 1000 * 1000
.SBTTL	End of boot clean up
BOOTSZ	== . + 777 / 1000
. = BOOTSZ * 1000
.END
                                                                                                                                                                                                                                                                                                                     