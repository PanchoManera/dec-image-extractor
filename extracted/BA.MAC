.MCALL	.MODULE
.MODULE	BA,VERSION=07,COMMENT=<Resident Batch Handler>,AUDIT=YES

;+
;
;                   COPYRIGHT (c) 1984,1985,1986 BY
;             DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;                         ALL RIGHTS RESERVED.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
	.SBTTL	CONDITIONAL ASSEMBLY SUMMARY
	.SBTTL	CONTROL CHARACTER DEFINITIONS
	.SBTTL	DEFINITIONS
	.MCALL	.DRDEF	.ASSUME	.ADDR
	.DRDEF	BA,4,0,0,0,0
	.DRPTR	FETCH=*NO*,UNLOAD=UNLOAD
	.DREST	CLASS=DVC.TT
.ASECT
.=410
UNLOAD:
	MOV	@#SYSPTR,R1
	MOV	EMT16(R1),R2
	ADD	R1,R2
	MOV	#FB$TIN-BABASE,R3
	BIT	#FBMON$,CONFIG(R1)
	BNE	10$
	MOV	#B$TIN-BABASE,R3
10$:
	ADD	R0,R3
	SUB	R1,R3
	CMP	R3,@R1
	BNE	20$
	BISB	#ERROR$,@#USERRB
	.ADDR	#NOUNLO,R0
20$:
	TST	(PC)+
	SEC
	RETURN
NOUNLO:
	.NLCSI	TYPE=I,PART=PREFIX
	.ASCIZ	"E-Must 'R BATCH', type '/U'"
	JSW	= 44
	ERRWRD	= 52
	USERRB	= 53
	 SUCCS$ =  1
	 WARN$	=  2
	 ERROR$	=  4
	 FATAL$	= 10
	 UNCON$	= 20
	SYSPTR	= 54
	MONCOM	= 356
	CONTXT	= 320
	COMREG	= 7
	EMT16	= 316
	CONFIG	= 300
	FBMON$	= 1
	JOBNUM	= 322
	INBSIZ	= 400
	OUBSIZ	= 400
	BATSTK	= 0
	LABSIZ	= 6
	TCBIT$	= 100
	EMTRTN	= 400
	STATWD	= 366
	IFBEXT	=  40
	KISAR1	= 172342
	BADSIZ	= 0
	PNAME	= ^RBA
	BASTS	= 4
	.SBTTL	MACRO DEFINITIONS
.MACRO	ADDR ADDRESS,REG
	MOV	PC,REG
	ADD	#ADDRESS-.,REG
.ENDM	ADDR
.MACRO	LINK1 N,OLD
	MOV	N*2(R1),R2
	ADD	R1,R2
	ADDR	OLD,R3
	SUB	R3,R2
	MOV	R2,OLD
.ENDM	LINK1
.MACRO	LINK2 N,LABLE
	ADDR	LABLE,R3
	SUB	R1,R3
	MOV	R3,N*2(R1)
.ENDM	LINK2
.IF NE	BATSTK
.MACRO	SAVSTK
	MOV	SP,SPSAVE
	ADDR	SPSAVE,R4
	MOV	R4,SP
.ENDM	SAVSTK
.MACRO	RESSTK
	MOV	SPSAVE,SP
.ENDM	RESSTK
.ENDC
.MACRO	SAVE,A0,A1,A2,A3,A4,A5
.IRP	X,<A0,A1,A2,A3,A4,A5>
.IIF NB <X>,MOV X,-(SP)
.ENDR
.ENDM	SAVE
.MACRO	RESTOR,A0,A1,A2,A3,A4,A5
.IRP X,<A5,A4,A3,A2,A1,A0>
.IIF NB <X>,MOV (SP)+,X
.ENDR
.ENDM	RESTOR
LOADPT:
	.DRBEG	BA,0,BADSIZ,BASTS
BABASE=:BASTRT+6
BA:	BR	BA0
BATSW$	=:10
BATSW1:	.WORD	0
.ASSUME BATSW1 EQ BABASE+BATSW$
		SOURCE	=      4
		BSOURC	=  40000
		NOTTY	=    400
		DESTON	=      2
		BDESTN	=    100
		DATA	=     40
		ACTIVE	=     20
		COMWAT	=     10
		BEXIT	= 100000
		BGET	=    200
		HELP	=      1
BA0:	MOV	BACQE,R0
BRINIT:	BR	INIT
INIT:	BR	INIT1
INIT2:	ADDR	CHAIN,R1
	MOV	Q.BUFF-Q.BLKN(R0),R2
.IF NE	MMG$T
	MOV	@#KISAR1,-(SP)
	MOV	Q.PAR-Q.BLKN(R0),@#KISAR1
.IFTF
1$:	MOV	(R1)+,(R2)+
	BPL	1$
.IFT
	MOV	(SP)+,@#KISAR1
.ENDC
BATDON:	.DRFIN	BA
.IF NE	BATSTK
	.BLKW	BATSTK
SPSAVE:	.WORD	0
.ENDC
INPBUF:
INIT1:	MOV	R0,-(SP)
	ADDR	BATSW1,R0
	MOV	R0,INIT
	INC	BRINIT
	ADDR	INPBUF,R0
	MOV	R0,INBUFF
	ADD	#OUTBUF-INPBUF,R0
	MOV	R0,OBUFF
	MOV	@#SYSPTR,R0
	MOV	EMT16(R0),R1
	ADD	R0,R1
	LINK1	0,O$TIN
	LINK1	1,O$TOT
	LINK1	10,O$EXT
	LINK1	11,O$PRN
	ADDR	FB$EXT,R3
	MOV	R3,JSTATE
	BIT	#FBMON$,CONFIG(R0)
	BNE	FGBGMN
	LINK2	0,B$TIN
	LINK2	1,B$TOT
	LINK2	10,B$EXT
	LINK2	11,B$PRN
	MOV	(SP)+,R0
	JMP	INIT2
FGBGMN:	MOV	@#SYSPTR,R0
	MOV	CONTXT(R0),JSTATE
	LINK2	0,FB$TIN
	LINK2	1,FB$TOT
	LINK2	10,FB$EXT
	LINK2	11,FB$PRN
	MOV	(SP)+,R0
	JMP	INIT2
	OUTBUF	= INBSIZ*2+INPBUF
	. = INPBUF+INBSIZ+INBSIZ+OUBSIZ+OUBSIZ
	.SBTTL	BTTI
BTTI:	JSR	PC,GETCHR
BTTIS:	CMPB	#'\,R0
	BEQ	2$
1$:	TST	(R4)
	BMI	3$
	RTS	PC
3$:	TST	(SP)+
	JMP	BAT03B
2$:	JSR	PC,GETCHR
	CMPB	#'\,R0
	BEQ	1$
	INC	R0
	BIC	(PC),R0
	ASL	R0
	TST	(SP)+
	CMP	#TABSIZ,R0
	BLT	ABORT
	ADD	PC,R0
	ADD	(R0),PC
BATTBL:	.WORD BAT00-BATTBL
	.WORD BAT01-BATTBL
	.WORD BAT02-BATTBL
	.WORD BAT03-BATTBL
	.WORD BAT04-BATTBL
	.WORD BAT05-BATTBL
	.WORD BAT06-BATTBL
	.WORD BAT07-BATTBL
	.WORD BAT08-BATTBL
	.WORD BAT09-BATTBL
	.WORD BAT10-BATTBL
	.WORD BAT11-BATTBL
	.WORD BAT12-BATTBL
TABSIZ	= .-BATTBL
	.SBTTL	I,J,K, AND L DIRECTIVES
GETREG:	JSR	PC,GETCHR
	MOV	@#SYSPTR,R2
	ADD	#MONCOM,R2
	BIC	#177740,R0
	BEQ	JGTBAT
1$:	ADDR	BATREG-1,R2
	ADD	R0,R2
2$:	BR	JGTBAT
BAT09:	JSR	PC,GETREG
	CMPB	(R2),R0
	BLT	BAT10
	JSR	PC,GETLB2
BAT10:	JSR	PC,GETLAB
	ROR	R0
	BCS	1$
	CLR	INBLOK
	CLR	BATICT
1$:	ADDR	LABEL+LABSIZ+2,R1
	MOV	#LABSIZ+2,R2
2$:	JSR	PC,GETBAT
	CMPB	#'$,R0
	BEQ	3$
	CMPB	-(R1),R0
	BNE	1$
3$:	DEC	R2
	BNE	2$
BAT12:	JSR	PC,BTTI
	BR	BAT12
GETLB2:	BEQ	GETLAB
	MOV	PC,-(SP)
GETLAB:	ADDR	LABEL+LABSIZ,R1
	MOV	#LABSIZ,R3
1$:	JSR	PC,GETCHR
	MOVB	R0,-(R1)
	DEC	R3
	BNE	1$
JGTBAT:	JMP	GETCHR
BAT11:	JSR	PC,GETREG
	ROR	R0
	BCC	1$
	JSR	PC,GETCHR
	MOVB	R0,(R2)
	BR	BAT12
1$:	ROR	R0
	BCS	2$
	INCB	(R2)
	BR	BAT12
2$:	TST	(R4)
	BMI	BAT12
	CLR	R0
	BISB	(R2),R0
	BR	B$TIN3
	.SBTTL	\F AND \H DIRECTIVES
BAT08:	BIC	#HELP+NOTTY,(R4)
	MOV	(R4),-(SP)
	BIC	#BEXIT,(R4)
	JSR	PC,BTTI
	MOV	(SP)+,(R4)
	ROR	R0
	ADC	(R4)
	ROR	R0
	ADCB	1(R4)
	BR	BAT12
ABORT:	JSR	R1,BAT06B
	.ASCII	"BC"
BATFF:	CLR	R0
	JSR	PC,PUTBAT
BAT06:	CMP	BATOCT,#OUBSIZ*2
	BNE	BATFF
	JSR	PC,BTTI
	JSR	R1,BAT06B
	.ASCII	"FE"
BAT06B:	CLR	(R4)
	MOV	R2,-(SP)
	ADDR	BAMSG,R2
1$:	MOVB	(R2)+,R0
	BEQ	2$
	JSR	PC,PUTCTY
	BR	1$
2$:	MOV	(SP)+,R2
	BISB	#<UNCON$>,@#USERRB
	JSR	PC,PUTCT2
	BR	J$EXT
BAMSG:	.NLCSI	TYPE=I,PART=PREFIX
	.ASCIZ	/U-/
	.EVEN
	.SBTTL	\@ AND \E DIRECTIVES
BAT05:	BIC	#DATA+BGET,(R4)
	BPL	BAT05B
BR$EX0:	MOV	(SP)+,R0
BR$EX1:	BIC	#BEXIT,(R4)
	BR	J$EXT
BAT05B:	BIT	#ACTIVE,(R4)
	BNE	BR$EX1
	JSR	PC,GETCTY
	BCS	J$EXT
	BIC	#BSOURC+BDESTN,(R4)
	BIS	#ACTIVE,(R4)
	JSR	PC,BTTIS
BAT00:	BIC	#BGET,(R4)
1$:	JSR	PC,BTTI
	JSR	PC,PUTCTY
	BR	1$
	.SBTTL	\A AND \G DIRECTIVES
BAT07:	BIS	#BGET,(R4)
	BMI	BAT00
BAT01:	TST	(R4)
	BMI	BAT00
	BIC	#BSOURC+BDESTN,(R4)
	BR	B$TIN2
B$TIN:	MOV	INIT,R4
B$TIN1:	BIT	#SOURCE,(R4)
	BEQ	J$TIN
.IF NE	BATSTK
	SAVSTK
.ENDC
B$TIN2:	JSR	PC,BTTI
	CMPB	#15,R0
	BNE	B$TIN3
	TSTB	(R4)
	BMI	BAT02
B$TIN3:	BIT	#HELP,(R4)
	BEQ	BATRT0
	BIT	#10000,@#JSW
	BNE	BATRT0
	JSR	PC,PUTCHR
BATRT0:
.IF EQ	BATSTK
	MOV	R0,(SP)
.IFF
	MOV	R0,@SPSAVE
.ENDC
BATRTI:
.IF NE	BATSTK
	RESSTK
.ENDC
	CLR	R2
	MOV	@#SYSPTR,R0
	ADD	EMTRTN(R0),R0
	JMP	(R0)
FB$EXT:	JSR	PC,JNUMCK
	BEQ	B$EXT
J$EXT:	ADD	(PC),PC
O$EXT:	.-.
B$TOT:	MOV	INIT,R4
	BIT	#DESTON,(R4)
	BEQ	J$TOT
.IF NE	BATSTK
	SAVSTK
.ENDC
B$TOT2:	BIT	#NOTTY,(R4)
	BNE	BATRTI
	JSR	PC,PUTBAT
	BR	BATRTI
	.SBTTL	\B AND \C DIRECTIVES
BAT02:	TST	(R4)
	BMI	BAT03A
	JSR	PC,GETCTY
	BCC	BAT02
	BIS	#BSOURC+BDESTN,(R4)
	BIC	#ACTIVE+BGET,(R4)
	BR	B$TIN2
B$EXT:	MOV	INIT,R4
	BIT	#ACTIVE,(R4)
	BEQ	1$
	BIS	#SOURCE+DESTON,(R4)
1$:	BIT	#DATA,(R4)
	BEQ	J$EXT
.IF NE	BATSTK
	SAVSTK
.ENDC
	MOV	R0,-(SP)
	BIS	#BEXIT,(R4)
	MOV	@#SYSPTR,R0
	BIS	#IFBEXT,STATWD(R0)
BAT03:	BIS	#BDESTN,(R4)
BAT03A:	JSR	PC,BTTI
BAT03B:	JSR	PC,PUTCHR
	BR	BAT03A
	.SBTTL	\D DIRECTIVE
BAT04:	BIS	#DATA,(R4)
	BR	B$TIN2
FB$TIN:	JSR	PC,JNUMCK
	BEQ	B$TIN
J$TIN:	ADD	(PC),PC
O$TIN:	.-.
FB$TOT:	JSR	PC,JNUMCK
	BEQ	B$TOT
J$TOT:	ADD	(PC),PC
O$TOT:	.-.
FB$PRN:	JSR	PC,JNUMCK
	BEQ	B$PRN
J$PRN:	ADD	(PC),PC
O$PRN:	.-.
	.SBTTL	GETCTY - GET A CHARACTER FROM THE CTY
GETCTY:	SAVE	(R4)
	CLR	(R4)
	SAVE	R1
	MOV	#JSW,R1
	SAVE	(R1)
	BIS	#TCBIT$,(R1)
	EMT	16*20
	RESTOR	(R1)
	RESTOR	R1
RESSW1:	RESTOR	(R4)
BAINT:
BAINTR:	RTS	PC
	.SBTTL	PUTCTY (PUTCT2) - PUT CHARACTERS TO THE CTY
PUTCT2:	MOV	PC,-(SP)
	MOVB	(R1)+,R0
PUTCTY:	TST	R0
	BEQ	PUTDON
	SAVE	(R4)
	CLR	(R4)
1$:	EMT	16*20+1
	BCS	1$
	BR	RESSW1
B$PRCR:	ADDR	CRLF,R0
B$PRN:	MOV	INIT,R4
	BIT	#DESTON,(R4)
	BEQ	J$PRN
.IF NE	BATSTK
	SAVSTK
.ENDC
	BIT	#NOTTY,(R4)
	BNE	BATRTI
.IF NE	MMG$T
	MOV	R2,-(SP)
	JSR	PC,@$RLPTR
	MOV	R1,@#KISAR1
	MOV	R2,R1
	MOV	(SP)+,R2
.IFF
	MOV	R0,R1
.ENDC
1$:	MOVB	(R1)+,R0
	BEQ	B$PRCR
	CMPB	#200,R0
	BEQ	BATRTI
	JSR	PC,PUTBAT
	BR	1$
GETCHR:	BIT	#BSOURC,(R4)
	BNE	GETBAT
1$:	JSR	PC,GETCTY
	BCS	1$
	RTS	PC
	.SBTTL	JNUMCK - GET JOB NUMBER OF CALLING JOB
JNUMCK:	MOV	@#SYSPTR,-(SP)
	ADD	#JOBNUM,(SP)
	TST	@(SP)+
	RTS	PC
READBA:	JSR	R5,RWBAT
	.WORD	INDATA-.-2
BATIPT:	.-.
BATICT:	.-.
GETBAT:	DEC	BATICT
	BMI	READBA
	MOVB	@BATIPT,R0
	INC	BATIPT
	RTS	PC
PUTBAT:	BIT	#BDESTN,(R4)
	BNE	PUTCHR
	JSR	PC,PUTCTY
PUTCHR:	MOVB	R0,@BATOPT
	INC	BATOPT
	DEC	BATOCT
	BNE	PUTDON
	JSR	R5,RWBAT
	.WORD	ODATA-.-2
BATOPT:	.WORD	.-.
BATOCT:	.WORD	OUBSIZ*2
PUTDON:	RTS	PC
INDATA:	.WORD	10*400+0
INBLOK:	.-.
INBUFF:	.-.
INWC:	.WORD	INBSIZ
	.WORD	0
.IIF NE INDATA-.+12,.ERROR
INSAV:	.BLKW	5
ODATA:	.WORD	11*400+0
OBLOK:	.-.
OBUFF:	.-.
OWC:	.WORD	OUBSIZ
	.WORD	0
.IIF NE ODATA-.+12,.ERROR
OUTSAV:	.BLKW	5
BLKW2:	.BLKW	2
OLDSTA:	.BLKW	5
CHAIN:	BATSW1-BALQE
	INDATA-BALQE
	ODATA-BALQE
	OUTBUF-BALQE
	BATOPT-BALQE
	BATOCT-BALQE
	BATICT-BALQE
	O$EXT-BALQE
	O$TIN-BALQE
	O$TOT-BALQE
	O$PRN-BALQE
RWBAT:	BISB	#2,@JSTATE
	SAVE	R0,R3,R4
	MOV	(R5)+,R4
	ADD	R5,R4
	MOVB	#17,(R4)
RWBAT1:	DECB	(R4)
	BPL	RWBAT2
	RESTOR	R3,R4
	JSR	R1,BAT06B
	.ASCII	"LU"
RWBAT2:	ADDR	BLKW2+2,R3
	CLR	OLDSTA
	CLR	R0
	BISB	(R4),R0
	EMT	374
	BCC	2$
	TSTB	@#ERRWRD
	BEQ	3$
	BR	RWBAT1
2$:	ADDR	OLDSTA,R0
	MOV	R0,(R3)
	MOV	#5*400,-(R3)
	MOV	R3,R0
	MOVB	(R4),(R3)
	TST	(R3)+
	EMT	375
	BCS	RWBAT1
3$:	MOV	R4,(R3)
	ADD	#12,(R3)
	MOV	#6*400,-(R3)
	MOVB	(R4),(R3)
	MOV	R3,R0
	EMT	375
	BCS	RWBAT1
	MOV	R4,R0
	EMT	375
	BCC	4$
	RESTOR	R3,R4
	JSR	R1,BAT06B
	.ASCII	"IO"
4$:	MOV	R3,R0
	MOVB	#7,1(R0)
	EMT	375
	TST	OLDSTA
	BEQ	5$
	MOV	R3,R0
	MOVB	#6,1(R0)
	MOV	R0,2(R0)
	ADD	#4,2(R0)
	EMT	375
5$:	TST	(R4)+
	INC	(R4)+
	MOV	(R4)+,(R5)+
	MOV	(R4),(R5)
	ASL	(R5)+
	RESTOR	R0,R3,R4
	BIC	#2,@(PC)+
JSTATE:	.-.
	RTS	R5
BATREG:	.BLKB	32
	.BYTE	'0,'0,'0
	.BYTE	0,0
CRLF:	.BYTE	15
	.BYTE	12
	.BYTE	200
LABEL:	.BLKB	LABSIZ
	.ASCII "L\"
	.EVEN
PATCH:	.REPT	25.
	.WORD	0
	.ENDR
	.DREND	BA
.PSECT	BADVR
.BLKB	5000-<.-BASTRT>
BATEND=.-BASTRT
	.WORD	-1
.REPT	376
	.WORD	0
.ENDR
.END
                                                                                                                                                                                                                                                                                                                                                                                 