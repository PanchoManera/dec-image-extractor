.MCALL	.MODULE
.MODULE	EL,VERSION=06,COMMENT=<SJ Error Logging Handler>,AUDIT=YES

;                     	  COPYRIGHT (c) 1986 BY
;                DIGITAL EQUIPMENT CORPORATION, MAYNARD,
;                 MASSACHUSETTS.   ALL RIGHTS RESERVED.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
; SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
	.SBTTL	ABSTRACT
	.ENABL	LC
	.SBTTL	COMDITIONAL ASSEMBLY SUMMARY
	ERL$G	= 1
	.IIF NDF ERL$U	ERL$U	= 10.
	.IIF NDF ERL$S	ERL$S	= 1
	.SBTTL	DEFINITIONS
	.MCALL	.DATE,	.DRDEF,	.GTIM
	.MCALL	.PRINT,	.DSTAT	.Assume
	.MCALL	.ADDR
	.DRDEF	EL,2,RONLY$,ERL$S+1,0,0
	.DRPTR	UNLOAD=UNLOAD
	.DREST	CLASS=DVC.PS
	.MACRO	BCS.	LABEL,?ALT
	BCC	ALT
	JMP	LABEL
ALT:
	.ENDM
	SYSPTR	= 54
	CONFIG	= 300
		FBMON$	=      1
	CONFG2	= 370
		CACHE$	=      1
	SYSGEN	= 372
	PNPTR	= 404
	UNITMK	= 7
	GOODIO	= -1
	PARERR	= -2
	CCHERR	= -3
	PCHERR	= -4
	O.UNIT	= 0
	O.ID	= 1
	O.ERL	= 2
	O.ERR	= 4
	O.READ	= 6
	O.WRIT	= 12
	STALEN	= 7.
	D.SIZE	= 0
	D.RNUM	= 1
	D.DVUN	= 2
	D.DVID	= 3
	D.RTRY	= 4
	D.OCUR	= 5
	D.DATE	= 6
	D.HOT	= 10
	D.LOT	= 12
	D.BLKN	= 14
	D.BUFF	= 16
	D.WCNT	= 20
	D.REGN	= 22
	D.MTRY	= 23
	D.REG	= 24
	DEVFIX	= 10.
	M.SIZE	= 0
	M.RNUM	= 1
	M.TYPE	= 2
	M.MREG	= 3
	M.OCUR	= 4
	M.DATE	= 6
	M.HOT	= 10
	M.LOT	= 12
	M.PC	= 14
	M.PS	= 16
	M.REG	= 20
	PARMAX	= 16.
	PARFIX	= 8.
	MSYSER	= 177744
	MCONRG	= 177746
	MHITMS	= 177752
	.SBTTL	INSTALLATION CODE
	.ASECT
	. = 200
	BR	10$
	BR	20$
10$:	MOV	@#SYSPTR,R0
	BIT	#FBMON$,CONFIG(R0)
	BNE	20$
	TST	(PC)+
20$:	SEC
	RETURN
UNLOAD:
	MOV	@R5,R5
	MOV	$ELPTR-ELLQE(R5),R0
	TST	(R0)+
	CLR	@R0
	RETURN
.Assume	. LE 400,MESSAGE=<;Installation area overflow>
	.SBTTL	SET OPTIONS
	.DRSET	LOG,	NOP,	O.LOG,	NO
	.DRSET	PURGE,	NOP,	O.PURG
	.ENABL	LSB
O.LOG:	BR	5$
	NOP
	BR	O.NLOG
5$:	CALL	FINDRV
	BCS	O.BAD
	MOV	@#SYSPTR,R2
	MOV	R1,R0
	ADD	#CNFGW1-ELLQE,R0
	TST	(R0)
	BNE	10$
	MOV	CONFIG(R2),(R0)+
	MOV	SYSGEN(R2),(R0)+
	MOV	R1,-(SP)
	ADD	#GETDAT-ELLQE,(SP)
	CALL	@(SP)+
10$:	MOV	R1,R2
	ADD	#$ELCPY-ELLQE,R2
	BR	20$
O.NLOG:	CALL	FINDRV
	BCS	O.GOOD
	CLR	R2
20$:	MOV	$ELPTR-ELLQE(R1),R0
	TST	(R0)+
	MOV	R2,(R0)
	BR	O.GOOD
	.DSABL	LSB
O.PURG:	CALL	FINDRV
	BCS	O.BAD
	MOV	#1,PNXREC-ELLQE(R1)
	MOV	#1,PNXBLK-ELLQE(R1)
	CLR	PNXWRD-ELLQE(R1)
	CLR	$ELFLG-ELLQE(R1)
	RETURN
FINDRV:
	.ADDR	#DEVNAM,R0
	.ADDR	#DAREA,-(SP)
	EMT	342
	BCS	O.BAD
	MOV	DAREA+4,R1
	BEQ	O.BAD
O.GOOD:	TST	(PC)+
O.BAD:	SEC
	RETURN
DAREA:	.BLKW	4
DEVNAM:	.RAD50	/EL /
.Assume	. LE 1000,MESSAGE=<;Set area overflow>
	.SBTTL	DRIVER REQUEST ENTRY POINT
	.DRBEG	EL
	MOV	ELCQE,R4
	MOV	Q$WCNT(R4),R2
	BEQ	ELDONE
	BLT	ELERR
	MOV	Q$BUFF(R4),R1
	.ADDR	#$ELHDR,R0
	MOV	(R4),R3
	BGT	10$
	CMP	R2,#$HDLEN
	BLE	30$
	MOV	#$HDLEN,R2
	BR	20$
10$:	ADD	#$ELBFR-$ELHDR,R0
	CMP	(R4),#ERL$S
	BGT	ELEOF
	DEC	R3
	SWAB	R3
	ASL	R3
	ADD	R3,R0
	ADD	R2,R3
	ADD	R2,R3
	SUB	#ERL$S*256.*2,R3
	BLE	30$
	ASR	R3
	SUB	R3,R2
20$:;	MOV	R2,Q$WCNT(R5)
30$:	MOV	(R0)+,(R1)+
	DEC	R2
	BGT	20$
	BR	ELDONE
ELEOF:	BIS	#EOF$,@-(R4)
	BR	ELDONE
ELERR:	BIS	#HDERR$,@-(R4)
ELINT:
ELDONE:	.DRFIN	EL
	.SBTTL	$ELCPY	- START OF COPY CODE
$ELCPY:	MOV	R0,-(SP)
	MOV	R1,-(SP)
	MOV	R2,-(SP)
	MOV	R3,-(SP)
	MOV	R4,-(SP)
	MOV	R5,-(SP)
	CLR	-(SP)
	INC	CERECR
	CMPB	R4,#GOODIO
	BGT	DEVERR
	BLT	MEMERR
	DEC	CERECR
	CALL	GESTAT
	BCS	20$
	ADD	#O.READ,R0
	TST	Q$WCNT(R5)
	BEQ	20$
	BPL	10$
	ADD	#O.WRIT-O.READ,R0
10$:	ADD	#1,(R0)+
	ADC	(R0)
20$:	JMP	$ELXIT
	.SBTTL	DEVERR	- DEVICE ERROR RECORD LOGGER
DEVERR:	CALL	GESTAT
	BCS	10$
	INC	O.ERR(R0)
	MOV	R0,(SP)
10$:	TST	PNXWRD
	BEQ	40$
	CLR	R1
	CALL	CHKSIZ
	ADD	(R0),R0
	MOV	R4,R1
	CLRB	R1
	BISB	Q$UNIT(R5),R1
	BICB	#<^CUNITMK>,R1
	CMP	R1,D.DVUN(R0)
	BNE	40$
	CMPB	R4,D.RTRY(R0)
	BGE	40$
	MOV	R0,-(SP)
	MOV	R2,-(SP)
	ADD	#D.REG,R0
	MOVB	R3,R1
20$:	CMP	(R0)+,(R2)+
	BNE	30$
	DEC	R1
	BGT	20$
30$:	MOV	(SP)+,R2
	MOV	(SP)+,R0
	TST	R1
	BNE	40$
	INCB	D.OCUR(R0)
	MOVB	R4,D.RTRY(R0)
	TST	(SP)
	BEQ	80$
	ADD	#O.ERL,(SP)
	INC	@(SP)
	BR	80$
40$:	MOVB	R3,R1
	ADD	#DEVFIX,R1
	CALL	CHKSIZ
	BCS.	$ELERR
50$:	TST	(SP)
	BEQ	60$
	ADD	#O.ERL,(SP)
	INC	@(SP)
60$:
	MOVB	R1,(R0)+
	MOVB	PNXREC,(R0)+
	INC	PNXREC
	MOVB	Q$UNIT(R5),(R0)
	BICB	#<^CUNITMK>,(R0)+
	SWAB	R4
	MOVB	R4,(R0)+
	SWAB	R4
	MOVB	R4,(R0)+
	MOVB	#1,(R0)+
	CALL	GETDAT
	MOV	(R5)+,(R0)+
	TST	(R5)+
	MOV	(R5)+,(R0)+
	MOV	(R5)+,(R0)+
	MOV	R3,(R0)+
	MOVB	R3,R3
70$:	MOV	(R2)+,(R0)+
	DEC	R3
	BGT	70$
	ASL	R1
	ADD	R1,PNXWRD
	NEG	R1
	MOV	R1,(R0)
80$:	BR	$ELXIT
	.SBTTL	MEMERR	- MEMORY ERROR RECORD LOGGER
	STKDPC	= 36
	STKDPS	= 40
MEMERR:	CMPB	R4,#PARERR
	BNE	20$
10$:	INC	CMPARE
	BR	30$
20$:	INC	CCPARE
	CMPB	R4,#PCHERR
	BEQ	10$
30$:	TST	PNXWRD
	BEQ	40$
	CLR	R1
	CALL	CHKSIZ
	ADD	(R0),R0
	CMPB	M.TYPE(R0),#PARERR
	BGT	40$
	CMP	STKDPC(SP),M.PC(R0)
	BNE	40$
	INC	M.OCUR(R0)
	BR	100$
40$:	MOV	R5,-(SP)
	MOV	#PARMAX,R1
50$:	TST	(R5)+
	BEQ	60$
	DEC	R1
	BGT	50$
60$:	MOV	(SP)+,R5
	NEG	R1
	ADD	#PARMAX,R1
	MOV	R1,R3
	ASL	R1
	ADD	#PARFIX,R1
	MOV	@#SYSPTR,R0
	BIT	#CACHE$,CONFG2(R0)
	BEQ	70$
	ADD	#3,R1
70$:	CALL	CHKSIZ
	BCS	$ELERR
	MOVB	R1,(R0)+
	MOVB	PNXREC,(R0)+
	INC	PNXREC
	MOVB	R4,(R0)+
	MOVB	R3,(R0)+
	MOV	#1,(R0)+
	CALL	GETDAT
	MOV	STKDPC(SP),(R0)+
	MOV	STKDPS(SP),(R0)+
80$:	MOV	@(R5),(R0)+
	MOV	(R5)+,(R0)+
	DEC	R3
	BGT	80$
	MOV	@#SYSPTR,R3
	BIT	#CACHE$,CONFG2(R3)
	BEQ	90$
	MOV	@#MSYSER,(R0)+
	MOV	@#MCONRG,(R0)+
	MOV	@#MHITMS,(R0)+
90$:	ASL	R1
	ADD	R1,PNXWRD
	NEG	R1
	MOV	R1,(R0)
100$:	BR	$ELXIT
	.SBTTL	$ELXIT	- EXIT ROUTINES
$ELERR:	TST	(PC)+
$ELFLG:	 .WORD	0
	BNE	10$
	MOV	SP,$ELFLG
	.ADDR	#E.FULL,R0
	.PRINT
10$:	INC	CMENTB
$ELXIT:	TST	(SP)+
	MOV	(SP)+,R5
	MOV	(SP)+,R4
	MOV	(SP)+,R3
	MOV	(SP)+,R2
	MOV	(SP)+,R1
	MOV	(SP)+,R0
	RETURN
	.SBTTL	GESTAT	- GET POINTER TO DEVICE STATISTICS ENTRY
GESTAT:	MOVB	Q$UNIT(R5),-(SP)
	BIC	#<^CUNITMK>,(SP)
	MOV	R4,R0
	CLRB	R0
	BIS	R0,(SP)
	.ADDR	#DEVSTS,R0
	MOV	#ERL$U,R1
10$:	CMP	(R0),#-1
	BEQ	40$
	CMP	(R0),(SP)
	BEQ	60$
	ADD	#STALEN*2,R0
	DEC	R1
	BGT	10$
	TST	(PC)+
20$:	 .WORD	0
	BNE	30$
	.ADDR	#E.STAT,R0
	.PRINT
	MOV	SP,20$
30$:	TST	(SP)+
	BR	70$
40$:	MOV	#STALEN,R1
50$:	CLR	(R0)+
	DEC	R1
	BGT	50$
	MOV	#-1,(R0)
	SUB	#STALEN*2,R0
	MOV	(SP),(R0)
60$:	TST	(SP)+
	TST	(PC)+
70$:	SEC
	RETURN
	.SBTTL	CHKSIZ	- CHECK FOR ROOM IN LOGGING BUFFER
CHKSIZ:	MOV	PNXWRD,R0
	ADD	R1,R0
	ADD	R1,R0
	CMP	R0,#255.*2
	BLT	10$
	CMP	PNXBLK,SMAXSZ
	BGE	20$
	CALL	10$
	MOV	#-1,(R0)
	INC	PNXBLK
	CLR	PNXWRD
10$:	MOV	PNXBLK,R0
	DEC	R0
	SWAB	R0
	ASL	R0
	ADD	PNXWRD,R0
	.ADDR	#$ELBFR,R0,ADD
	TST	(PC)+
20$:	SEC
	RETURN
	.SBTTL	GETDAT	- PLACE DATE/TIME IN RECORD
GETDAT:	MOV	R0,-(SP)
	.ADDR	#ELAREA,R0
	MOV	#21*400,(R0)
	MOV	(SP),2(R0)
	ADD	#2,2(R0)
	.GTIM
	.DATE
	MOV	R0,@(SP)
	MOV	(SP)+,R0
	ADD	#6,R0
	RETURN
	.SBTTL	TEXT
	.NLIST	BEX
E.FULL:	.NLCSI	TYPE=I,PART=PREFIX
	.ASCIZ	/W-Buffer is full, logging suspended/
E.STAT:	.NLCSI	TYPE=I,PART=PREFIX
	.ASCIZ	/W-Device statistics table is full/
	.EVEN
	.LIST	BEX
	.SBTTL	IMPURE DATA AREA
ELAREA:	.BLKW	2
$ELHDR:
OFIXED:	.WORD	<<7*ERL$U+2>*2>
DEVSTS:	.WORD	-1
	.BLKW	<7*ERL$U>
CERECR:	.WORD	0
CMENTB:	.WORD	0
CMENTF:	.WORD	0
CMENTR:	.WORD	0
CMPARE:	.WORD	0
CCPARE:	.WORD	0
PNXREC:	.WORD	1
PNXBLK:	.WORD	1
PNXWRD:	.WORD	0
SMAXSZ:	.WORD	ERL$S
CNFGW1:	.WORD	0
CNFGW2:	.WORD	0
INIDAT:	.WORD	0
INTIM1:	.WORD	0
INTIM2:	.WORD	0
	$HDLEN	= <.-$ELHDR>/2
.Assume $HDLEN LE 256.,MESSAGE=<;Header too long>
$ELBFR:	.BLKW	<ERL$S*256.>
	.DREND	EL
	.END
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               