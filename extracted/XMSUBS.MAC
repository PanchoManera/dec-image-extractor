.MCALL .MODULE
.MODULE XMSUBS,VERSION=20,COMMENT=<XM Monitor Routines>

;                     COPYRIGHT (c) 1984, 1985, 1986 BY
;             DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;                         ALL RIGHTS RESERVED.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
.SBTTL	XM DEFINITIONS
XE.WAE	= 0
XE.TMW	= 1
XE.ILR	= 2
XE.ILW	= 3
XE.OFF	= 4
XE.NMP	= 5
XE.TMR	= 6
XE.SIZ	= 7
XE.ISZ	= 10
XE.DEA	= 11
XE.NGR	= 12
XE.TMG	= 13
XE.RIU	= 14
XE.PRV	= 15
.SBTTL	XM DATA AREA
	.PSECT	XMSUBS
$XMSIZ::.WORD	0
$XMPTR::.WORD	1600
.REPT	9.
	.WORD	0,0
.ENDR
	.WORD	-1
$GLRCB:
	.REPT	X$RCBS-1
	.WORD	0,0,0,0,0
	.ENDR
	.WORD	200,177600,GR.NRF!GR.PRM
	.RAD50	/IOPAGE/
	.WORD	-1
.SBTTL	INTERCEPT DEVICE INTERRUPTS AND FORCE KERNEL MAPPING
.IF NE	XM$FET
	.ENABL	LSB
INTPRO::MOV	@#PS,-(SP)
	MOV	@2(SP),2(SP)
	CMP	@#KISAR1,#200
	BNE	10$
.IF NE	MQH$P2
	CMP	@#KISAR2,#400
	BNE	10$
.ENDC
	MOV	(SP)+,@#PS
	JMP	@(SP)+
10$:	MOV	@#KISAR1,-(SP)
	MOV	#200,@#KISAR1
.IF NE	MQH$P2
	MOV	@#KISAR2,-(SP)
	MOV	#400,@#KISAR2
.ENDC
	MOV	@#PS,-(SP)
.IF NE	MQH$P2
	MOV	6(SP),@#PS
	JSR	PC,@10(SP)
.IFF
	MOV	4(SP),@#PS
	JSR	PC,@6(SP)
.ENDC
	.BR	RTIRTI
RTIRTI:
.IF NE	MQH$P2
	MOV	(SP)+,@#KISAR2
.ENDC
	MOV	(SP)+,@#KISAR1
	ADD	#4,SP
	RTI
.SBTTL	SET UP AN ENTRY IN THE $DVINT TABLE
	.ENABL	LSB
INTSET::MOV	R1,-(SP)
	MOV	4(SP),R1
.IF EQ	MQH$P2
	CMP	R1,#40000
.IFF
	CMP	R1,#60000
.ENDC
	BHIS	30$
	ADD	R2,R1
	CMP	R1,#20000
	BLOS	30$
	.BR	INTFIL
INTFIL:	ADDR	$DVINT,R1
	ADD	#4,R1
10$:	TST	@R1
	BEQ	20$
	CMP	@R1,#-1
	BEQ	40$
	ADD	#6,R1
	BR	10$
20$:	MOV	-(R5),@R1
	SUB	#4,R1
	MOV	R1,(R5)+
30$:	TST	(PC)+
40$:	SEC
	MOV	(SP)+,R1
	RETURN
	.DSABL	LSB
.SBTTL	RELEASE ENTRY FROM INTERRUPT FORWARDING TABLE
INTRLS::JSR	R3,SAVE30
	CALL	KPSAVE
	MOV	@R5,R0
	BEQ	100$
	SUB	#6,R0
	CLR	@R5
	CLR	R1
	MOV	(R0)+,R3
	BEQ	100$
	BPL	30$
	ASL	R3
	ADD	R3,R0
	MOV	(R0)+,R3
	BPL	20$
	MOV	(R0)+,-(SP)
	CALL	@GETVEC
	MOV	(SP)+,R1
	BCS	100$
10$:	MOV	(R0)+,R3
20$:	ADD	R1,R3
	BLE	100$
	CALL	INTCTE
	CMP	(R0)+,(R0)+
	BR	10$
30$:	CALL	INTCTE
100$:	CALL	KPREST
	RETURN
INTCTE:	ADDR	$DVINT,R2
	CMP	@R3,R2
	BLO	10$
	ADD	#$DVITT-$DVINT,R2
	CMP	@R3,R2
	BHIS	10$
	MOV	@R3,R3
	CLR	4(R3)
10$:	RETURN
.ENDC
.SBTTL	POOL MEMORY ALLOCATION ROUTINE
	.ENABL	LSB
PL10WD::ASL	R0
	BCS	30$
PL5WD::	MUL	#10.,R0
	TST	R0
	BNE	30$
	MOV	R1,R0
	BR	444$
GTPOOL	= 500
PLBYTE::CLR	R1
444$:	INC	R0
	BEQ	30$
	BIC	#1,R0
	BIT	#VRUN$,@CNTXT
	BEQ	30$
	MOV	#GTPOOL,-(SP)
	TST	JOBNUM
	BEQ	20$
	MOV	CNTXT,@SP
	ADD	#FMPUR+77,@SP
	BIC	#77,@SP
20$:	CALLR	@(SP)+
30$:	SEC
	RETURN
	.DSABL	LSB
.SBTTL	SET DEFAULT PAR 1 MAPPING ROUTINES
KPSAVE::MOV	(SP),-(SP)
.IF NE	MQH$P2
	MOV	(SP),-(SP)
	MOV	@#KISAR1,2(SP)
	MOV	@#KISAR2,4(SP)
	MOV	#400,@#KISAR2
.IFF
	MOV	@#KISAR1,2(SP)
.ENDC
P1SD::	MOV	#200,@#KISAR1
	RTS	PC
KPREST::MOV	2(SP),@#KISAR1
.IF NE	MQH$P2
	MOV	4(SP),@#KISAR2
	MOV	(SP),4(SP)
	ADD	#4,SP
.IFF
	MOV	(SP),2(SP)
	ADD	#2,SP
.ENDC
	RTS	PC
.SBTTL	MEMORY TO MEMORY BLOCK MOVE ROUTINE
$BLKMV::MOV	@#KISAR1,-(SP)
	MOV	@#UISAR1,-(SP)
	MOV	@#UISDR0+2,-(SP)
	MOV	@#PS,-(SP)
	MOV	#PMODE,@#PS
	MOV	#77406,@#UISDR0+2
10$:	MOV	R1,@#KISAR1
	MOV	R3,@#UISAR1
	MOV	#32.,R0
	CMP	R5,R0
	BHIS	30$
	MOV	R5,R0
30$:	SUB	R0,R5
40$:	PUT	(R2)+,(R4)+
	SOB	R0,40$
	TST	R5
	BEQ	100$
	INC	R1
	INC	R3
	SUB	#64.,R2
	SUB	#64.,R4
	BR	10$
100$:	MOV	(SP)+,@#PS
	MOV	(SP)+,@#UISDR0+2
	MOV	(SP)+,@#UISAR1
	MOV	(SP)+,@#KISAR1
	RETURN
 .SBTTL	EXECUTE CODE CLEAR OF PAR 1
	.ENABL	LSB
$CVPPT:	JMP	$USRPH
	.ASSUME	$CVPPT EQ $P1EXT-14.
$FGRPT:	JMP	FINDGR
	.ASSUME	$FGRPT EQ $P1EXT-10.
$XALPT:	JMP	XALLOC
	.ASSUME	$XALPT EQ $P1EXT-6
$BLMPT:	BR	$BLKMV
	.ASSUME	$BLMPT EQ $P1EXT-2
$P1EXT::MOV	@#KISAR1,-(SP)
	MOV	R1,-(SP)
	MOV	R2,-(SP)
	MOV	SP,R1
	SUB	(R0)+,SP
	MOV	SP,R2
10$:	MOV	(R0)+,(R2)+
	CMP	R2,R1
	BNE	10$
	MOV	-(R2),@#KISAR1
	MOV	(PC)+,@R2
	  RETURN
	MOV	(R1)+,R2
	MOV	R1,-(SP)
	MOV	@R1,R1
	JSR	PC,2(SP)
	MOV	@SP,SP
	TST	(SP)+
	MOV	(SP)+,@#KISAR1
	RTS	R0
.SBTTL	INTERCEPT BPT, IOT, TRAP, MMU TRAPS IN KERNEL MODE
.ENABL	LSB
.IF NE	MPT$Y
TRPXMP::MFPI	@#V.MPTY+2
	MFPI	@#V.MPTY
	MOV	#MPAR.E,-(SP)
	BIT	#WINDW$,@CNTXT
	BEQ	3$
	PUT	#0,@#V.MPTY
	BR	2$
.ENDC
TRAPBP::MFPI	@#V.BPT+2
	MFPI	@#V.BPT
	BR	1$
TRAPIO::MFPI	@#V.IOT+2
	MFPI	@#V.IOT
	BR	1$
TRAPTR::MFPI	@#V.TRAP+2
	MFPI	@#V.TRAP
1$:	MOV	#ISST.E,-(SP)
	BR	2$
TRAPMM::TST	INTLVL
	BPL	4$
 .ROM	INC	MMUFLT,VALUE=-1
	BGT	4$
	MFPI	@#V.MMU+2
	MFPI	@#V.MMU
	DEC	MMUFLT
	MOV	#MMUF.E,-(SP)
	BIT	#WINDW$,@CNTXT
	BEQ	3$
	PUT	#0,@#V.MMU
2$:	TST	2(SP)
	BEQ	3$
	BIT	#1,2(SP)
	BNE	3$
	.BR	XMRERT
XMRERT::MOV	R0,@SP
	GET	SP,R0
	SUB	#4,R0
	PUT	R0,SP
	PUT	6(SP),(R0)+
	PUT	10(SP),(R0)+
	SPL	0
	MOV	(SP)+,R0
	MOV	(SP)+,2(SP)
	BIS	#CMODE+PMODE,@SP
	MOV	(SP)+,2(SP)
	RTI
3$:	SPL	0
	MOV	(SP)+,R3
	CMP	(SP)+,(SP)+
	MOV	(SP)+,R4
	TST	(SP)+
	JMP	ERRCOM
4$:	JMP	FATAL
.DSABL	LSB
.SBTTL	FIXTRP - FIX RMON KERNEL MODE VECTORS FOR BPT, TRAP, MMU
.ENABL	LSB
FIXTRP::JSR	R5,1$
TRPLST::.WORD	TRAPBP,PR7
	.WORD	TRAPIO,PR7
	.WORD	TRAPTR,PR7
	.WORD	TRAPMM,PR7
1$:	MOV	#V.BPT,R2
	MOV	(R5)+,(R2)+
	MOV	(R5)+,(R2)+
	MOV	(R5)+,(R2)+
	MOV	(R5)+,(R2)+
	MOV	#V.TRAP,R2
	MOV	(R5)+,(R2)+
	MOV	(R5)+,(R2)+
	MOV	#V.MMU,R2
	MOV	(R5)+,(R2)+
	MOV	@R5,@R2
	MOV	(SP)+,R5
	RTS	PC
.DSABL	LSB
.SBTTL	$RELOK - CONVERT KERNEL VIRTUAL ADDRESS TO PAR1 VALUE & ADDRESS
.ENABL	LSB
$RELOK::MOV	#KISAR0,-(SP)
	BR	1$
.SBTTL	$RELOC - CONVERT USER VIRTUAL ADDRESS TO PAR1 VALUE & ADDRESS
$RELOC::MOV	#UISAR0,-(SP)
1$:	MOV	R0,R1
	CLR	R2
	ASL	R1
	ROL	R2
	ASL	R1
	ROL	R2
	ASL	R1
	ROL	R2
	ASL	R2
	ADD	(SP)+,R2
	CLRB	R1
	SWAB	R1
	ROR	R1
	ADD	@R2,R1
	MOV	R0,R2
	BIC	#^C<77>,R2
	BIS	#20000,R2
	RTS	PC
.DSABL	LSB
$KADR::	MOV	R0,R2
	BIT	#WINDW$,@CNTXT
	BEQ	1$
	BIT	#VRUN$,@CNTXT
	BNE	2$
	ADD	#V.MAX,R2
	CMP	R2,$USRLC
	BHIS	2$
1$:	TST	(PC)+
2$:	SEC
	RETURN
$U2P1::	CALL	$USRPH
	BCS	1$
	CMP	#17777,R2
	BHIS	1$
	CMP	R2,#40000
1$:	RETURN
$USRPH::JSR	PC,$RELOC
	.BR	$CNPHY
$CNPHY:	ASL	R2
	ASL	R2
	ASL	R2
	ASR	R2
	ROR	R1
	RORB	R2
	ASR	R1
	RORB	R2
	SWAB	R2
	BISB	R1,R2
	SWAB	R2
	CLRB	R1
	ASR	R1
	ASR	R1
	ASR	R1
	ASR	R1
	SEC
	BNE	1$
	CMP	#157777,R2
1$:	RTS	PC
$MPPHY::CLR	-(SP)
	MOV	2(SP),-(SP)
	MOV	R1,-(SP)
	MOV	R2,-(SP)
	MOV	Q.PAR-Q.BUFF(R5),R1
	MOV	(R5)+,R2
	JSR	PC,$CNPHY
	MOV	R1,10(SP)
	MOV	R2,6(SP)
	MOV	(SP)+,R2
	MOV	(SP)+,R1
	RTS	PC
$GETBYT::MOV	@SP,-(SP)
	MOV	@#KISAR1,-(SP)
	MOV	Q.PAR-Q.BLKN(R4),@#KISAR1
	MOVB	@Q.BUFF-Q.BLKN(R4),4(SP)
	MOV	(SP)+,@#KISAR1
	BR	XIOSUB
$PUTBYT::MOV	@#KISAR1,-(SP)
	MOV	Q.PAR-Q.BLKN(R4),@#KISAR1
	MOVB	4(SP),@Q.BUFF-Q.BLKN(R4)
	MOV	(SP)+,@#KISAR1
	MOV	(SP)+,@SP
	BR	XIOSUB
$PUTWRD::MOV	@#KISAR1,-(SP)
	MOV	Q.PAR-Q.BLKN(R4),@#KISAR1
	MOV	4(SP),@Q.BUFF-Q.BLKN(R4)
	MOV	(SP)+,@#KISAR1
	MOV	(SP)+,@SP
	INC	Q.BUFF-Q.BLKN(R4)
XIOSUB:	INC	Q.BUFF-Q.BLKN(R4)
	BIT	#40000,Q.BUFF-Q.BLKN(R4)
	BEQ	1$
	SUB	#20000,Q.BUFF-Q.BLKN(R4)
	ADD	#200,Q.PAR-Q.BLKN(R4)
1$:	RTS	PC
REGABT::JSR	R3,SAVE30
	MOV	R5,R3
	ADD	#I.RGN,R3
	MOV	#R.GNUM,-(SP)
1$:	TST	R.BSIZ(R3)
	BEQ	2$
	CMP	#1600,@R3
	BHI	2$
	CALL	ELRG
2$:	ADD	#R.BLGH,R3
	DEC	@SP
	BNE	1$
	TST	(SP)+
	RTS	PC
.ENABL	LSB
ACHBK2::MOV	#2*2,R1
ACHBKM::JSR	PC,ACHBK
	BCS	1$
	.BR	$RELOM
$RELOM::JSR	PC,$RELOC
	MOV	R1,@#KISAR1
	MOV	R2,R0
1$:	RTS	PC
.SBTTL	ACHJBM - ADDRESS CHECK 3 WORD USER VIRTUAL RANGE, MAP TO IT
ACHJBM::MOV	#3*2,R1
	JSR	PC,ACHBKM
	BCC	1$
	JMP	ADERR
.DSABL	LSB
.SBTTL	ACHBK - CHECK USER VIRTUAL ADDRESS RANGE FOR VALIDITY
ACHBK::	TST	R1
	BEQ	1$
	DEC	R1
	BIC	#1,R1
1$:	ADD	R0,R1
	BCS	5$
	MOV	CNTXT,R2
	MOV	I.WPTR(R2),R2
	MOV	(R2)+,-(SP)
2$:	TST	(R2)+
	BEQ	3$
	CMP	R0,@R2
	BLO	3$
	CMP	R1,W.BHVR-W.BLVR(R2)
	BLOS	4$
3$:	ADD	#W.BLGH-2,R2
	DEC	@SP
	BGT	2$
	BIT	#WINDW$,@CNTXT
	BEQ	4$
	COM	(SP)+
	RTS	PC
4$:	TST	(SP)+
5$:	RTS	PC
.SBTTL	MAPWN - MAP A VIRTUAL ADDRESS WINDOW TO PHYSICAL MEMORY
MAPWN::	ADD	#W.BLGH,R4
	MOV	-W.BLGH(R4),R3
	BEQ	2$
	CMP	-(R4),-(R4)
	MOV	@R3,R0
	ADD	W.BOFF-W.BFPD(R4),R0
	MOVB	(R4)+,R1
	MOVB	(R4)+,R3
1$:	MOVB	@R4,(R1)+
	MOVB	#177,(R1)+
	MOV	R0,UISAR0-UISDR0-2(R1)
	ADD	#200,R0
	DEC	R3
	BGT	1$
	MOV	(R4)+,-(R1)
2$:	RTS	PC
.SBTTL	MAPLO - SET USER MAPPING REGISTERS IDENTICAL TO KERNEL MAP
MAPLO::	MOV	#UISDR0,R0
	MOV	#77406,@R0
1$:	MOV	(R0)+,@R0
	CMP	R0,#UISDR0+16
	BLO	1$
	MOV	#UISAR0,R1
	MOV	#KISAR0,R0
	MOV	#8.,R2
2$:	MOV	(R0)+,(R1)+
	DEC	R2
	BNE	2$
	MOV	#200,@#UISAR1
	RTS	PC
.SBTTL	CLRPDR - CLEAR USER PDRS (ERASE PREVIOUS USER MAPPING)
CLRPDR::MOV	#UISDR0,R0
	MOV	#7,-(SP)
1$:	CLR	(R0)+
	DEC	@SP
	BNE	1$
	MOV	(SP)+,@R0
	RTS	PC
.SBTTL	.ASTX	- AST EXIT ROUTINE
.ENABL	LSB
A$STX::	MOV	SP,R2
	ADD	#SAVEST+2,R2
	TST	JOBNUM
	BNE	1$
	TST	KMONIN
	BEQ	1$
	TST	@SP
	BNE	2$
1$:	TST	@R5
	BPL	5$
	MOV	PC,@R2
	ADD	#$CRTR2-.,(R2)+
	BR	4$
2$:	ADDR	RDOVLY,R3
	CMP	#-1,@SP
	BNE	3$
	ADD	#ENTRPG-RDOVLY,R3
3$:	MOV	R3,(R2)+
	BIT	#VIRT$,@#JSW
	BEQ	4$
	BIS	#WINDW$,@R5
4$:	MOV	#PMODE,@R2
GOERTI:	JMP	EMTRTI
5$:	JMP	GOEXIT
.DSABL	LSB
.SBTTL	PLAS DIRECTIVE DISPATCH
P$LAS::	CMP	#PLASMX,R4
	BLOS	4$
	MOV	#R.GLGH,R1
	CMP	#4,R4
	BHI	1$
	MOV	#W.NLGH,R1
1$:	JSR	PC,ACHBKM
	BCS	5$
	ADDR	6$,R4,ADD
	MOV	@#SYSPTR,R3
	ADD	@R4,R3
	ENSYS	3$
	JSR	PC,@R3
	BCC	2$
	INC	10(SP)
2$:	RTS	PC
3$:	BCC	GOERTI
	MOVB	R1,@#ERRBYT
	BIS	#1,OLDPS(SP)
	BR	GOERTI
4$:	JMP	TOOBIG
5$:	JMP	ERRARG
6$:	.WORD	C$RRG - $RMON
	.WORD	E$LRG - $RMON
	.WORD	C$RAW - $RMON
	.WORD	E$LAW - $RMON
	.WORD	M$AP  - $RMON
	.WORD	U$NMAP - $RMON
	.WORD	G$MCX - $RMON
PLASMX	= <. - 6$>
.SBTTL	.CRAW	- CREATE VIRTUAL ADDRESS WINDOW EMT
C$RAW:	MOV	I.WPTR(R5),R4
	MOV	(R4)+,R1
	MOV	(R0)+,R2
	CLRB	R2
	CMP	R2,#7*400
	BHI	6$
	ASR	R2
	MOV	R2,@R0
	ASR	@R0
	ASR	@R0
	SWAB	(R0)+
	TST	@R0
	BEQ	6$
	MOV	R2,-(SP)
	ADD	@R0,@SP
	BCS	5$
	CMP	@SP,#2000
	BHI	5$
	CMP	-(R0),-(R0)
	BIC	#WS.CRW!WS.UNM!WS.ELW,W.NSTS(R0)
	MOV	R1,-(SP)
	BIT	#WINDW$,@R5
	BNE	1$
	ADD	#W.BLGH,R4
	DEC	R1
1$:	TST	W.BSIZ(R4)
	BEQ	2$
	MOV	W.BLVR(R4),R3
	SWAB	R3
	ASL	R3
	ASL	R3
	CMP	2(SP),R3
	BLOS	3$
	ADD	W.BSIZ(R4),R3
	CMP	R2,R3
	BHIS	3$
	CMP	R1,@SP
	BEQ	4$
	JSR	PC,ELAW
2$:	TST	@SP
	BEQ	3$
	CMP	(R0)+,(R0)+
	MOV	@R0,W.BSIZ(R4)
	MOV	-(R0),W.BLVR(R4)
	MOVB	-(R0),R3
	ASL	R3
	ADD	#UISDR0,R3
	MOVB	R3,W.BFPD(R4)
	MOVB	@SP,-(R0)
	SUB	R1,@R0
	CLR	@SP
3$:	ADD	#W.BLGH,R4
	DEC	R1
	BNE	1$
	MOV	(SP)+,(SP)+
	BNE	7$
	BIS	#WS.CRW,W.NSTS(R0)
	BIT	#WS.MAP,W.NSTS(R0)
	BNE	M$AP
	RTS	PC
4$:	TST	(SP)+
5$:	TST	(SP)+
6$:	CLR	R1
.ASSUME	XE.WAE	EQ	0
	BR	8$
7$:	INC	R1
.ASSUME	XE.TMW	EQ	1
8$:	SEC
	RTS	PC
.SBTTL	ELIMINATE ADDRESS WINDOW
E$LAW:	JSR	PC,GETWND
	BIC	#WS.CRW!WS.UNM,W.NSTS(R0)
ELAW:	JSR	PC,UNMAPP
	CLR	W.BSIZ(R4)
	BIS	#WS.ELW,W.NSTS(R0)
	RTS	PC
.SBTTL	MAP ADDRESS WINDOW TO REGION
M$AP:	JSR	PC,GETWND
	ADD	#W.NRID,R0
	JSR	PC,GETREG
	CMP	@R3,#1600
	BHIS	1$
	CLR	KMLOC
1$:	MOV	R3,-(SP)
	MOV	W.BLVR(R4),-(SP)
	TST	(R0)+
	MOV	(R0)+,R2
	CMP	R2,R.BSIZ(R3)
	BHIS	8$
	MOV	@R0,R1
	BNE	2$
	MOV	R.BSIZ(R3),R1
	SUB	R2,R1
	CMP	R1,W.BSIZ(R4)
	BLOS	2$
	MOV	W.BSIZ(R4),R1
2$:	MOV	R1,(R0)+
	MOV	R1,-(SP)
	SWAB	@SP
	RORB	@SP
	ROR	@SP
	ROR	@SP
	DEC	@SP
	ADD	2(SP),@SP
	MOV	W.BSIZ(R4),-(SP)
	CMP	R1,@SP
	BHI	7$
	MOV	R2,-(SP)
	ADD	R1,R2
	CMP	R2,R.BSIZ(R3)
	BHI	6$
	MOV	W.BFPD(R4),-(SP)
	MOV	#77406,-(SP)
3$:	INCB	R.BNWD(R3)
	SUB	#W.NSTS,R0
	JSR	PC,UNMAPS
	MOVB	W.BFPD(R4),R0
	MOV	R.BADD(R3),R3
	ADD	4(SP),R3
	CLRB	3(SP)
4$:	INCB	3(SP)
	MOV	R3,UISAR0-UISDR0(R0)
	MOV	@SP,(R0)+
	ADD	#200,R3
	SUB	#200,R1
	BGT	4$
	SWAB	R1
	CLRB	R1
	ADD	R1,@SP
	ADD	R1,-(R0)
	MOV	R4,R3
	ADD	#W.BLGH,R3
5$:	MOV	(SP)+,-(R3)
	CMP	R3,R4
	BHI	5$
	RTS	PC
6$:	TST	(SP)+
7$:	CMP	(SP)+,(SP)+
8$:	CMP	(SP)+,(SP)+
	MOV	#XE.OFF,R1
	SEC
	RTS	PC
.SBTTL	UNMAP AN ADDRESS WINDOW
U$NMAP:	JSR	PC,GETWND
	MOV	#XE.NMP,R1
UNMAPS:	BIC	#WS.UNM,W.NSTS(R0)
UNMAPP:	JSR	PC,UNMAP
	BCS	1$
	BIS	#WS.UNM,W.NSTS(R0)
1$:	RTS	PC
.SBTTL	CREATE AN EXTENDED MEMORY REGION
C$RRG:	CLR	(PC)+
CGRREQ:	 .WORD	0
	BIC	#RS.CRR!RS.NEW!RS.UNM,R.GSTS(R0)
	MOV	R.GSIZ(R0),R2
	ADD	#I.RGN,R5
	MOV	#R.GNUM-1+1,R4
	MOV	#XE.TMR,R1
1$:	ADD	#R.BLGH,R5
	DEC	R4
	BEQ	14$
	TST	R.BSIZ(R5)
	BNE	1$
	CLR	R.BSTA(R5)
	BIT	#RS.GBL,R.GSTS(R0)
	BEQ	4$
	MOV	R5,-(SP)
	MOV	R0,R5
	ADD	#R.NAME,R5
	CALL	FINDGR
	MOV	(SP)+,R5
	BCS	3$
	TSTB	GR.SHC(R1)
	BMI	11$
	BISB	#R.SHAR,R.BSTA(R5)
	MOV	R2,R3
	BNE	2$
				.ASSUME GR.SIZ EQ 0
	MOV	@R1,R3
				.ASSUME GR.SIZ EQ 0
2$:	MOV	(R1)+,R2
	CMP	R3,R2
	BHI	12$
	INCB	GR.SHC-2(R1)
				.ASSUME GR.ADD EQ GR.SIZ+2
	MOV	@R1,R1
	BR	5$
3$:	BIT	#RS.CGR,R.GSTS(R0)
	BEQ	8$
	MOV	R1,CGRREQ
	BEQ	9$
4$:	TST	R2
	BEQ	10$
	CALL	XALLOC
	BCS	12$
5$:	MOV	R5,(R0)+
	MOV	R2,(R0)+
	BIS	#RS.CRR,@R0
	MOV	R1,(R5)+
	MOV	R2,(R5)+
	MOV	CGRREQ,R4
	BEQ	7$
	BIS	#RS.NEW,@R0
	BIS	#R.SHAR,@R5
	BIT	#RS.EXI,@R0
	BEQ	6$
	BIS	#R.EXIT,@R5
				.ASSUME GR.SIZ EQ 0
6$:	MOV	R2,(R4)+
				.ASSUME GR.ADD EQ GR.SIZ+2
	MOV	R1,(R4)+
				.ASSUME GR.STA EQ GR.ADD+2
				.ASSUME GR.SHC EQ GR.STA+1
	MOV	#<377*400>,@R4
	BIT	#RS.AGE,@R0
	BEQ	7$
	BIS	#GR.AGE,@R4
7$:	TST	(R5)+
	RETURN
8$:	MOV	#XE.NGR,R1
	BR	14$
9$:	MOV	#XE.TMG,R1
	BR	14$
10$:	MOV	#XE.ISZ,R1
	BR	13$
11$:	MOV	#XE.PRV,R1
	BR	14$
12$:	MOV	#XE.SIZ,R1
13$:	MOV	R2,14(SP)
14$:	SEC
	RETURN
.SBTTL	GET WINDOW MAPPING CONTEXT
G$MCX:	JSR	PC,GETWN0
	INC	R0
	MOV	(R4)+,R3
	MOV	(R4)+,R1
	MOVB	-1(R4),@R0
	ASLB	@R0
	ROLB	@R0
	ROLB	@R0
	ROLB	(R0)+
	MOV	R1,(R0)+
	MOV	(R4)+,R2
	MOV	(R4)+,(R0)+
	MOV	R3,(R0)+
	BEQ	3$
	ADD	#I.RGN,R5
	CMP	R3,R5
	BNE	1$
	BIC	-(R0),(R0)+
1$:	MOV	(R4)+,(R0)+
	SUB	R1,R2
	ADD	#77,R2
	BIC	#77,R2
	ROL	R2
	ROL	R2
	ROLB	R2
	SWAB	R2
	MOV	R2,(R0)+
	BIS	#WS.MAP,(R0)+
2$:	RTS	PC
3$:	CLR	(R0)+
	CLR	(R0)+
	CLR	@R0
	RTS	PC
.SBTTL	ELIMINATE AN EXTENDED MEMORY REGION
ELRG:	BIT	#R.EXIT,R.BSTA(R3)
	BNE	1$
	JSR	R0,ELRG1
	 .WORD	0
1$:	JSR	R0,ELRG1
	 .WORD	RS.EGR
E$LRG:	TST	@R0
	BNE	1$
	JMP	PLERR2
1$:	JSR	PC,GETREG
	BIT	(R0)+,(R0)+
				.ASSUME R.GSTS EQ R.GID+4
	BIC	#RS.CRR!RS.NEW!RS.UNM,@R0
	MOV	I.WPTR(R5),R4
	MOV	(R4)+,-(SP)
2$:	TST	W.BSIZ(R4)
	BEQ	3$
	CMP	@R4,R3
	BNE	3$
	JSR	PC,UNMAP
	BIS	#RS.UNM,@R0
3$:	ADD	#W.BLGH,R4
	DEC	@SP
	BNE	2$
ELRG1:	MOV	(R3)+,R1
	MOV	(R3)+,R2
	MOV	@R3,@SP
	CLR	@R3
	CLR	-(R3)
	CLR	-(R3)
	BIT	#R.SHAR,(SP)+
	BEQ	XDEALC
	CALL	FGRADR
	TSTB	GR.SHC(R1)
	BPL	1$
	CLRB	GR.SHC(R1)
	BR	3$
1$:	DECB	GR.SHC(R1)
	BEQ	2$
	BIT	#RS.EGR,@R0
	BEQ	5$
	MOV	#XE.RIU,R1
	SEC
	RETURN
2$:	BIT	#GR.AGE,GR.STA(R1)
	BNE	4$
3$:	BIT	#RS.EGR,@R0
	BEQ	5$
4$:	JSR	R5,VMDAL1
5$:	CLC
	RETURN
.SBTTL	XDEALC	- DEALLOCATE A REGION IN EXTENDED MEMORY
XDEALC:	MOV	R4,-(SP)
	MOV	R3,-(SP)
	MOV	R2,-(SP)
1$:	MOV	@SP,-(SP)
	ADD	R1,@SP
	CLR	R4
	ADDR	$XMSIZ-2,R2
2$:	TST	(R2)+
	MOV	(R2)+,R3
	CMP	R3,#-1
	BEQ	5$
	TST	R3
	BNE	3$
	TST	R4
	BNE	2$
	MOV	R2,R4
	BR	2$
3$:	CMP	@R2,@SP
	BEQ	4$
	ADD	@R2,R3
	CMP	R3,R1
	BNE	2$
	MOV	@R2,R1
4$:	TST	(SP)+
	ADD	-(R2),@SP
	CLR	@R2
	BR	1$
5$:	MOV	R4,(SP)+
	BEQ	7$
	MOV	R1,@R4
	MOV	(SP)+,-(R4)
6$:	MOV	(SP)+,R3
	MOV	(SP)+,R4
	RTS	PC
7$:	COM	(SP)+
	MOV	#XE.DEA,R1
	BR	6$
.SBTTL	PLAS SUBROUTINES
.SBTTL	GETWND	- GET WCB CORRESPONDING TO WINDOW ID
.ENABL	LSB
GETWND:	TSTB	@R0
	BEQ	1$
GETWN0:	MOV	I.WPTR(R5),R4
	MOVB	@R0,R3
	CMP	R3,(R4)+
	BHIS	1$
	MUL	#W.BLGH,R3
	ADD	R3,R4
	TST	W.BSIZ(R4)
	BNE	2$
1$:	COM	(SP)+
	MOV	#XE.ILW,R1
2$:	RTS	PC
.DSABL	LSB
.SBTTL	GETREG	- GET RCB CORRESPONDING TO REGION ID
.ENABL	LSB
GETREG:	MOV	R5,R3
	ADD	#I.RGN,R3
	TST	@R0
	BEQ	5$
	CMP	@R0,R3
	BEQ	5$
	CMP	#-1,@R0
	BNE	1$
	ADD	#R.BLGH,R3
	BR	5$
1$:	MOV	#R.GNUM+1,R2
	BR	3$
2$:	ADD	#R.BLGH,R3
3$:	DEC	R2
	BEQ	4$
	CMP	@R0,R3
	BNE	2$
	TST	@R3
	BNE	5$
4$:	TST	(SP)+
PLERR2:	MOV	#XE.ILR,R1
	SEC
5$:	RTS	PC
.DSABL	LSB
.SBTTL	UNMAP	- UNMAP A WINDOW
UNMAP:	MOV	R1,-(SP)
	SEC
	MOV	@R4,R1
	BEQ	3$
	CLR	@R4
	DECB	R.BNWD(R1)
	MOVB	W.BFPD(R4),R1
	MOV	#77406,-(SP)
	BIT	#WINDW$,@R5
	BEQ	1$
	CLR	@SP
1$:	MOV	KISAR0-UISDR0(R1),UISAR0-UISDR0(R1)
	CMP	R1,#UISDR0+2
	BNE	2$
	MOV	#200,UISAR0-UISDR0(R1)
2$:	MOV	@SP,(R1)+
	DECB	W.BNPD(R4)
	BGT	1$
	TST	(SP)+
3$:	MOV	(SP)+,R1
	RTS	PC
	.SBTTL	XALLOC	- ALLOCATE A REGION IN EXTENDED MEMORY
XALLOC:	ADDR	$XMSIZ,R1
	CLR	R3
	CLR	-(SP)
	MOV	#-1,-(SP)
10$:	CMP	@R1,#-1
	BEQ	40$
	CMP	@R1,R2
	BLO	20$
	BEQ	50$
	CMP	@R1,@SP
	BHIS	20$
	MOV	@R1,@SP
	MOV	R1,2(SP)
20$:	CMP	@R1,R3
	BLOS	30$
	MOV	@R1,R3
30$:	CMP	(R1)+,(R1)+
	BR	10$
40$:	MOV	2(SP),R1
	BEQ	70$
50$:	SUB	R2,(R1)+
	MOV	@R1,@SP
	ADD	R2,@R1
	MOV	(SP)+,R1
	TST	(SP)+
	RETURN
70$:	CMP	(SP)+,(SP)+
	MOV	R3,R2
	MOV	#XE.SIZ,R1
60$:	SEC
	RETURN
.SBTTL	XMSTOP	- SETTOP FOR JOBS CREATED WITH THE LINKER /V SWITCH
	.ENABL	LSB
XMSTOP::BNE	1$
	TST	KMONIN
	BNE	2$
1$:	MOV	I.VHI(R4),R3
	BNE	4$
	TST	R2
	BNE	3$
2$:	BIT	#WINDW$,@R4
	BEQ	3$
	BIT	#VRUN$,@R4
	BNE	3$
	MOV	#V.MAX,(PC)+
V$BIAS:: .WORD	0
	ADD	V$BIAS,R0
	BCC	3$
	MOV	#-2,R0
3$:	RETURN
4$:	TST	(SP)+
	ADD	#2,R3
	BEQ	11$
	BIT	#WINDW$,@R4
	BNE	5$
	CMP	R0,R3
	BLO	11$
	CMP	R3,SYSLOW
	BHIS	11$
	JMP	S$EPRV
				.ASSUME R.GSTS EQ R.GLGH-2
5$:	CLR	-(SP)
				.ASSUME R.GLGH EQ 6
	CMP	-(SP),-(SP)
	MOV	#R.GNUM,R5
	ADD	#I.RGN,R4
6$:	BIT	#R.STOP,R.BSTA(R4)
	BNE	7$
	ADD	#R.BLGH,R4
	DEC	R5
	BNE	6$
	CLR	R4
7$:	MOV	R4,@SP
	BEQ	8$
	MOV	2(R4),R4
	MOV	R4,R.GSIZ(SP)
8$:	CMP	R0,R3
	BHIS	13$
9$:	MOV	SP,R0
	ENSYS	10$
	MOV	CNTXT,R5
	JSR	PC,E$LRG
	RETURN
10$:	ADD	#R.GLGH,SP
11$:	MOV	CNTXT,R0
	MOV	I.VHI(R0),R0
12$:	JMP	S$ERTN
13$:	SUB	#W.NLGH+2,SP
	ENSYS	22$
	CLR 	W.NOFF+14(SP)
	MOV	#WS.MAP,W.NSTS+14(SP)
	SUB	R3,R0
	ADD	#77+2,R0
	BIC	#77,R0
	ASL	R0
	ROL	R0
	ROLB	R0
	SWAB	R0
	ROR	R3
	ASR	R3
	ASR	R3
	ASR	R3
	ASR	R3
	MOV	R3,W.NID+14(SP)
	TST	R.GID+W.NLGH+14(SP)
	BNE	17$
14$:	MOV	R0,R.GSIZ+W.NLGH+14(SP)
	MOV	R0,W.NSIZ+14(SP)
	MOV	R0,W.NLEN+14(SP)
	MOV	SP,R0
	ADD	#W.NLGH+R.GID+14,R0
	MOV	CNTXT,R5
	JSR	PC,C$RRG
	MOV	12(SP),R0
	BCS 	15$
	BIS	#R.STOP,-(R5)
	BR	19$
15$:	CMP	#7,R1
	BEQ	14$
16$:	MOV	CNTXT,R0
	MOV	I.VHI(R0),R0
	BR	21$
17$:	MOV	R4,W.NSIZ+14(SP)
	CMP	R0,R4
	BLE	18$
	MOV	R4,R0
18$:	MOV	R0,W.NLEN+14(SP)
19$:	MOV	R.GID+W.NLGH+14(SP),W.NRID+14(SP)
	MOV	SP,R0
	ADD	#W.NID+14,R0
	MOV	CNTXT,R5
	JSR	PC,C$RAW
	BCS	16$
20$:	MOV	W.NLEN+14(SP),R0
	SWAB	R0
	RORB	R0
	ROR	R0
	ROR	R0
	ADD	W.NBAS+14(SP),R0
	SUB	#2,R0
21$:	RETURN
22$:	ADD	#R.GLGH+W.NLGH+2,SP
	BR	12$
	.DSABL	LSB
.SBTTL	VMDALC, VMDAL1 - DEALLOCATE A GLOBAL REGION
	.ENABL	LSB
VMDALC::CALL	FINDGR
	BIT	(R5)+,(R5)+
	SEZ
	BCS	2$
VMDAL1:	BITB	#GR.PRM,GR.STA(R1)
	BNE	2$
	MOVB	GR.SHC(R1),-(SP)
	ASLB	(SP)+
	BNE	2$
	MOV	R3,-(SP)
	MOV	@R1,R2
	CLR	(R1)+
	MOV	(R1)+,R3
	BITB	#GR.NRF,@R1
	BNE	1$
	MOV	R3,R1
	CALL	XDEALC
1$:	MOV	(SP)+,R3
	TST	(PC)+
2$:	SEC
	RTS	R5
	.DSABL	LSB
.SBTTL	FINDGR  - FIND A GLOBAL REGION CONTROL BLOCK
FINDGR::ADDR	<$GLRCB-GR.ESZ>,R1
	CLR	2$
1$:	ADD	#GR.ESZ,R1
	CMP	#-1,@R1
	BEQ	4$
	TST	@R1
	BNE	3$
	MOV	R1,(PC)+
2$:	 .WORD	0
	BR	1$
3$:	CMP	GR.NAM(R1),@R5
	BNE	1$
	CMP	GR.NAM+2(R1),2(R5)
	BNE	1$
	RETURN
4$:	MOV	2$,R1
	BEQ	5$
	MOV	(R5)+,GR.NAM(R1)
	MOV	(R5)+,GR.NAM+2(R1)
5$:	SEC
	RETURN
.SBTTL	FGRADR  - FIND A GLOBAL REGION CONTROL BLOCK
FGRADR::ADDR	<$GLRCB-GR.ESZ>,R1,PUSH
1$:	ADD	#GR.ESZ,R1
	CMP	#-1,@R1
	BEQ	2$
	TST	@R1
	BEQ	1$
	CMP	GR.ADD(R1),@SP
	BNE	1$
	TST	(PC)+
2$:	SEC
	INC	(SP)+
	RETURN
	.END
                                                                                                                                                                                                                                                                                                                                                