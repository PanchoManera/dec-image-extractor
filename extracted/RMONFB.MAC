.MCALL .MODULE
.MODULE RMONFB,VERSION=69,COMMENT=<FB/XM Resident Monitor>

;                        COPYRIGHT (c) 1986 BY
;             DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;                         ALL RIGHTS RESERVED.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
	.IIF DF NLRMON,	.NLIST
	.NLIST	BEX
.SBTTL	**************************
.SBTTL	*	RMON		 *
.SBTTL	**************************
.SBTTL	MONITOR DATA BASE
.SBTTL	MACROS FOR MONITOR ONLY
.MACRO	SPL	N
	 .WORD	PSWLST
PSWLST	== .-2
.IF EQ	N
	 .WORD	-2
.IFF
	 .WORD	N*40,PS
.ENDC
.ENDM	SPL
.MACRO	GETPSW
	 .WORD	PSWLST,-4
PSWLST	== .-4
.ENDM	GETPSW
.MACRO	PUTPSW
	 .WORD	PSWLST,-6
PSWLST	== .-4
.ENDM	PUTPSW
PSWLST	= 0
.MCALL	...CMV
.SBTTL	MONITOR DATA BASE
	.PSECT	RTDATA
$RMON::	JMP	$INTEN
$CSW::	BSS	CHNUM*CHNWDS
SB17	== $CSW+<CHOVLY*CHNWDS*2>+2
.IF EQ	MTT$Y
WRWT$	= 100000
.ENDC
$SYSCH::.WORD	<100002*MMG$T>
	.WORD	0
	.WORD	0
	.WORD	0
	.WORD	0
BLKEY::	.WORD	0
CHKEY::	.WORD	0
$DATE::	.WORD	0
DFLG::	.WORD	0
$USRLC::.WORD	USRBUF
QCOMP::	.WORD	COMPLT
SPUSR:	.WORD	0
SYUNIT::.WORD	0
...CMV	PART=ALL,TYPE=V
SYSVER:	.BYTE	RT$REL
SYSUPD:	.BYTE	RT$VER
CONFIG::.WORD	FBMON$!CLK50!<USR$*MMG$T>
SCROLL::.WORD	0
TTKS::	.WORD	TKS
TTKB::	.WORD	TKB
TTPS::	.WORD	TPS
TTPB::	.WORD	TPB
MAXBLK:	.WORD	-1
E16LST:	.WORD	LST16-$RMON
CNTXT::	.WORD	BKGND
JOBNUM::.WORD	0
SYNCH::	.WORD	$SYNCH
LOWMAP::.RADIX	2
	.BYTE	11111111,00111100,00001111,11110000
	.BYTE	11000011,00000000,00000000,00000000
	.BYTE	00000000,00000000,00110000,00000000
	.BYTE	00000000,00000000,00000000,00000000
	.BYTE	00000000,00000000,00000000,00000000
	.RADIX	8.
MAPSIZ	= <. - LOWMAP> / 2
MAPOFF	== LOWMAP - $RMON
USRLOC::.WORD USRBUF
GTVECT::.WORD	VT.VEC
ERRCNT:	.WORD	0
$MTPS::	BR	PUTPSW
$MFPS::	BR	GETPSW
SYINDX::.WORD	2
SYINDO	== SYINDX - $RMON
STATWD::.WORD	0
CONFG2::.WORD	<GSCCA>
SYSGEN::.WORD	SYSOP$
USRARE:	.WORD	USRSIZE
ERRLEV::.BYTE	ERROR$!FATAL$!UNCON$
IFMXNS::.BYTE	MXN$ST
EMTRTN:	.WORD	EMTRTI-$RMON
FORK::	.WORD	$FORK-$RMON
PNPTR::	.WORD	$PNAME-$RMON
MONAME::ASCR50	NAME$1,NAME$2,NAME$3
	.WORD	...V2
	ASCR50	NAME$4,NAME$5,NAME$6
	.WORD	...V2
HSUFFX::ASCR50	040,040,SUFX$H
	.WORD	...V2
SPSTAT::.WORD	0
EXTIND::.BYTE	0
INDSTA::.BYTE	0
$MEMSZ::.WORD	0
CONLOG::.WORD	GTIHOK-$RMON
.IF EQ MTT$Y
$TCFIG::.WORD	TTCNFG
.IFF
$TCFIG::.WORD	DLTCB
.ENDC
$INDDV::.WORD	INDDEV
MEMPTR::.WORD	CORPTR-$RMON
.IF NE	MMG$T
P1EXT::	.WORD	$P1EXT
.IFF
P1EXT::	.WORD	0
.ENDC
.IF NE	MMG$T
$TRPLS:: .WORD	TRPLST
.IFF
$TRPLS:: .WORD	0
.ENDC
GETVEC:: .WORD	ERRRTN
DWTYPE:: .WORD	0
MAXOFF	== . - $RMON
.IF NE	SYT$K
NULCNT:	.WORD	0
.ENDC
USRLVL:	.BYTE	0
USROWN:	.BYTE	377
USRSWP:	.WORD	0
$SWPBL::.WORD	0
EXLIST:	.WORD	0
	.WORD	-<USRLEN+KMLEN>
	.WORD	0
$KMLOC::.WORD	KMON
	.WORD	USRLEN+KMLEN
	.WORD	0
KMLOC::	.WORD	KMON
$TIME::	BSS	2
$RAMSZ:: .WORD	0
CORPTR::.WORD	0
	.WORD	CORPTR
.IF NE	MMG$T
CORPTX::.WORD	$XMSIZ-$RMON
	.WORD	BGWPTR-BKGND+2
.ENDC
IMPLOC::.WORD	$IMPUR+MXJBNM+2
KMONIN::.WORD	1
.IF NE	MMG$T
PROGDF::.BYTE	200!$$KEX
.IFF
PROGDF::.BYTE	200!$$KED
.ENDC
	.BYTE	200!$$FORTRAN
WILDEF::.BYTE	1
	.BYTE	0
.SBTTL	GETPSW
	.ENABL	LSB
GETPSW::MOV	@#PS,-(SP)
.IF EQ	MMG$T
	CLRB	1(SP)
.ENDC
	MOV	2(SP),-(SP)
	MOV	2(SP),4(SP)
	BR	1$
.SBTTL	PUTPSW
PUTPSW::MOVB	2(SP),@#PS
1$:	MOV	(SP)+,@SP
	RTS	PC
	.DSABL	LSB
SPSIZE:	.WORD	0
CCB::	BSS	10
SWIIOB:	.WORD	0,USRLEN,0
SWOIOB:	.WORD	0,-USRLEN,0
KMBLK::	BSS	3
.IF NE	BF
DRVTBL:	.WORD	0
.IF NE	MMG$T
	.WORD	$RELOC-$RMON
	.WORD	$MPPHY-$RMON
	.WORD	$GETBYT-$RMON
	.WORD	$PUTBYT-$RMON
	.WORD	$PUTWRD-$RMON
.ENDC
.IF NE	ERL$G
	.WORD	$ERLOG-$RMON
.ENDC
.IF NE	TIM$IT
	.WORD	$TIMIO-$RMON
.ENDC
DRINTN::.WORD	$INTEN-$RMON
	.WORD	$FORK-$RMON
DRVTSZ	= . - DRVTBL
.ENDC
INBFPT:	.WORD	0
IFSVST::.WORD	0
CURLEV::.WORD	0
FRKCQE:	.WORD	0
FRKLQE:	.WORD	0
SYDVSZ::.WORD	0
$JBLIM::
SYSLOW::
BLIMIT::
.IF EQ	MMG$T
	.WORD	$RMON,0
.IFF
	.WORD	USRBUF,0
.ENDC
.REPT	FJOBS
	.WORD	0,0
.ENDR
.SBTTL	DESCRIPTION OF MONITOR DATA BASE
.SBTTL	MONITOR DEVICE TABLE LAYOUT
	.PSECT	OWNER$
$OWNER::
	.PSECT	UNAM1$
$UNAM1::
	.PSECT	UNAM2$
$UNAM2::
	.PSECT	PNAME$
$PNAME::
	.PSECT	ENTRY$
$ENTRY::
	.PSECT	STAT$
$STAT::
	.PSECT	DVREC$
$DVREC::
	.PSECT	HSIZE$
$HSIZE::
	.PSECT	DVSIZ$
$DVSIZ::
.IF NE	MMG$T
	.PSECT	DVINT$
$DVINT::
.ENDC
	.PSECT	RMON
RTCODE::
.SBTTL	IMPURE AREA OFFSET DEFINITONS
DSECT	GLOBAL=YES
	DS	I.STATE
	DS	I.QHDR
	DS	I.CMPE
	DS	I.CMPL
	DS	I.CHWT
	DS	I.PCHW
	DS	I.PERR
.IF EQ	MTT$Y
	DS	I.TTLC
	DS	I.PTTI
.IFF
	DS	I.CNSL
	DS	,1
.ENDC
	DS	I.TID
	DS	I.JNUM
	DS	I.CNUM
	DS	I.CSW
	DS	I.IOCT
	DS	I.SCTR
	DS	I.BLOK
.IF NE	SYT$K
	DS	I.JID,6
	DS	I.LNAM,3
.IFF
	DS	I.JID,4
.ENDC
	DS	I.NAME,4
	DS	I.SPLS
	DS	I.TRAP
.IF NE	FPU$11
	DS	I.FPP
.ENDC
.IF NE	MMG$T
	DS	I.SPSV
.ENDC
	DS	I.SWAP,2
	DS	I.SP
	DS	I.BITM,MAPSIZ
.IF NE	MTT$Y
	DS	I.CLUN
	DS	I.TTLC
.ENDC
	DS	I.IRNG
	DS	I.IPUT
	DS	I.ICTR
	DS	I.IGET
	DS	I.ITOP
	DS	,TTYIN BYTES
	DS	I.OPUT
	DS	I.OCTR
	DS	I.OGET
	DS	I.OTOP
	DS	,TTYOUT BYTES
	DS	I.QUE,QWDSIZ
	DS	I.MSG,2
	DS	I.SERR,3
	DS	I.TERM
	DS	I.TRM2
	DS	I.SCCA
.IF NE	MMG$T
	DS	I.SCC1,1
.ENDC
	DS	I.DEVL
.IF NE	MMG$T
.IF NE	FPU$11
	DS	I.FPSA
.ENDC
.IF EQ	MTT$Y
	DS	I.SCOM,15.
.IFF
	DS	I.SCOM,16.
.ENDC
	DS	I.RSAV,8.
	DS	I.WPTR
	DS	I.RGN,RGWDSZ
	DS	I.WNUM
	DS	,WNWDSZ
.IF NE	FPU$11
	DS	I.FSAV,6*4+1
.ENDC
	DS	I.VHI
.ENDC
.IF NE	SPC$PS
	DS	I.ECTR
	DS	I.SPCP
.IF NE	MMG$T
	DS	I.SPC1
.ENDC
.ENDC
	DS	I.SCHP
	DS	I.SYCH,5.
IMPSIZ	== ..TEMP
FMPUR	==	FCHNM*10. + IMPSIZ+10
.SBTTL	BLOCKING CONDITION BIT DEFINITIONS
USRWT$	==     20
KSPND$	==    100
EXIT$	==    400
NORUN$	==   1000
SPND$	==   2000
CHNWT$	==   4000
TTOEM$	==  10000
TTOWT$	==  20000
TTIWT$	==  40000
.SBTTL	BACKGROUND IMPURE AREA
	.PSECT	RMON
BKGND::	.WORD	0
BKGND1::.WORD	BAVAIL
	.WORD	0,0,0,0,0
.IF EQ	MTT$Y
	.WORD	0
	.WORD	0
.IFF
BKCNSL::.WORD	DLTCB
	.WORD	0
.ENDC
BKGND2::.WORD	BKGID
	.WORD	0
	.WORD	CHNUM
BKGND3::.WORD	$CSW
	.WORD	0
	.WORD	0
	.WORD	0
BKGID:	.ASCIZ	<CR><LF>"B>"<CR><LF>
.IF NE	SYT$K
	.BLKB	BKGID+12.-.
	.ASCII	/*KMON*/
.IFF
	.BLKB	BKGID+8.-.
.ENDC
BNAME:	.WORD	0,0,0,0
	.WORD	0
	.WORD	0
.IF NE	FPU$11
	.WORD	0
.ENDC
.IF NE	MMG$T
	.WORD	0
.ENDC
	.WORD	0,0
	.WORD	0
	BSS	MAPSIZ
.IF NE	MTT$Y
	.WORD	0
	.WORD	0
.ENDC
TTIBUF::.WORD	IBUFR
	.WORD	IBUFR
	.WORD	0
	.WORD	IBUFR
	.WORD	IBUFR+	TTYIN
IBUFR:	.BLKB	TTYIN
TTOBUF::.WORD	OBUFR
	.WORD	0
	.WORD	OBUFR
	.WORD	OBUFR+	TTYOUT
OBUFR:	.BLKB	TTYOUT
BAVAIL:	BSS	QWDSIZ
	.WORD	ACTIV$+<MSGENT-$ENTRY>
	.WORD	0,0,0
	.BYTE	0
	.BYTE	MXJBNM
	.WORD	0
	.WORD	0
	.WORD	0
.IF NE	MMG$T
	.WORD	0
.ENDC
	.WORD	0
.IF NE	MMG$T
.IF NE	FPU$11
BGFPPT::.WORD	BGFPSV
.ENDC
.IF EQ	MTT$Y
	BSS	15.
.IFF
	BSS	16.
.ENDC
	BSS	8.
BGWPTR::.WORD	BGWNUM
	BSS	RGWDSZ
BGWNUM:	.WORD	W.NNUM
	BSS	WNWDSZ
.IF NE	FPU$11
BGFPSV:	BSS	6*4+1
.ENDC
BGVHI::	.WORD	0
.ENDC
.IF NE	SPC$PS
	.WORD	0
	.WORD	0
.IF NE	MMG$T
	.WORD	0
.ENDC
.ENDC
PBSYCH:: .WORD	$SYSCH
.IF NE	<. - BKGND> - IMPSIZ+CHSIZ
.ERROR
.ENDC
.SBTTL	IMPURE AREA POINTERS
	.WORD	-1
$IMPUR::
BCNTXT::.WORD	BKGND
.REPT	FJOBS
	.WORD	0
.ENDR
FCNTXT == . - 2
MXJBNM	= . - $IMPUR - 2
.SBTTL	EMT DISPATCH TABLE
.MACRO	EMTDEF	ENTRY,R0CHK=NO,R1CHK=NO,ABBR
.GLOBL	ENTRY
.IF NB	ABBR
..'ABBR	== ..TEMP
.ENDC
..TEMP	= ..TEMP + 1
	 .WORD	<<ENTRY-EMTCAL>+R1CHK>*2+R0CHK
.ENDM	EMTDEF
..TEMP	= 0
NO	= 0
YES	= 1
.SBTTL	EMT 375 DISPATCH TABLE
EMTLST:
10$:
EMTDEF	D$LETE	NO	NO
EMTDEF	L$OOK	NO	NO
EMTDEF	E$NTER	NO	NO
EMTDEF	S$TRAP	YES	NO
EMTDEF	R$NAME	NO	NO
EMTDEF	S$AVST	YES	NO
EMTDEF	R$OPEN	YES	NO
EMTDEF	C$LOSE	NO	NO
EMTDEF	R$EAD	NO	YES
EMTDEF	W$RITE	NO	YES
EMTDEF	W$AIT	NO	NO
EMTDEF	C$PYCH	NO	NO
EMTDEF	D$VICE	YES	NO
EMTDEF	C$DFN	YES	NO
EMTDEF	EMT16	NO	NO
EMTDEF	EMT17	NO	NO
EMTDEF	G$TJB	YES	NO
EMTDEF	G$TIM	YES	NO	GTIM
EMTDEF	M$RKT	YES	YES	MRKT
EMTDEF	C$MKT	NO	YES	CMKT
EMTDEF	T$WAIT	YES	NO	TWAI
EMTDEF	S$DAT	NO	YES
EMTDEF	R$CVD	NO	YES
EMTDEF	C$STAT	YES	NO
EMTDEF	S$FPP	NO	NO
EMTDEF	P$ROTE	NO	NO
EMTDEF	S$PFUN	NO	YES
EMTDEF	S$SWAP	YES	NO
EMTDEF	G$VAL	NO	NO
EMTDEF	S$CCA	YES	NO
EMTDEF	P$LAS	YES	NO
EMTDEF	M$TTIO	NO	NO
EMTDEF	S$DTTM	YES	NO	SDTM
EMTDEF	S$PCPS	YES	NO
EMTDEF	S$FDAT	YES	NO
EMTDEF	F$PROT	YES	NO
E375MX	= <. - 10$> / 2
.SBTTL	EMT 374 DISPATCH TABLE
11$:
EMTDEF	W$AIT
EMTDEF	S$SPND
EMTDEF	R$SUME
EMTDEF	P$URGE
EMTDEF	S$ERR
EMTDEF	H$ERR
EMTDEF	C$LOSE
EMTDEF	T$LOCK
EMTDEF	C$HAIN
EMTDEF	M$WAIT
EMTDEF	D$ATE
EMTDEF	A$BTIO
E374MX	= <. - 11$> / 2
EMTMAX	= <. - 10$> / 2
.SBTTL	ERROR LOGGING HOOKS
.IF NE	ERL$G
	.ENABL	LSB
$ERLOG::
 .ROM	TST	$ELHND,GLOBAL=YES
	BEQ	1$
	JSR	PC,@$ELHND
	BCC	1$
	MOV	R5,-(SP)
 .ROM	MOV	$ELIMP,R5,GLOBAL=YES
	CLR	I.SCTR(R5)
	JSR	R4,UNBLOK
	 .WORD	SPND$
	MOV	(SP)+,R5
1$:	RTS	PC
	.DSABL	LSB
.ENDC
.SBTTL	ERROR PROCESSOR
.IF NE	FPU$11
.SBTTL	FPP ERROR HANDLER
.IF NE	MMG$T
FPPERR::GET	SP,R4
	BIT	#HWFPU$,CONFIG
	BEQ	1$
	TST	(R4)+
1$:	GET	@R4,R4
.IFF
FPPERR::BIT	#HWFPU$,CONFIG
	BEQ	1$
	TST	(SP)+
1$:	MOV	(SP)+,R4
.ENDC
	MOV	#FPP.E,R3
	JMP	ERRCOM
.ENDC
.SBTTL	POWER FAIL
	.ENABLE	LSB
.IF NE	PWF$L
TRAPPF::ADDR	POWRUP,R0
	MOV	R0,@#V.PWFL
	BR	SYHALT
POWRUP::MOV	#1000,SP
	JSR	R1,1$
	 .ASCIZ	<CR><LF>/?MON-F-Power fail halt/<SPACE>
	 .EVEN
.ENDC
.SBTTL FATAL ERROR PROCESSING, SYSTEM HALT
FATAL::	RESET
.IF NE	PWF$L
.IF EQ	MMG$T
 .ROM	MOV	R1,R1SAVE
	ADDR	SHLT,R1
	BR	1$
.IFF
	JSR	R1,1$
.ENDC
SHLT:	.ASCIZ	<CR><LF>/?MON-F-System halt/<SPACE>
	.EVEN
1$:	TSTB	@TTPS
	BPL	1$
HKPC13 == .
	MOVB	(R1)+,@TTPB
.ASSUME	.-HKPC13 EQ 4
	BNE	1$
.IF EQ	MMG$T
	MOV	R1SAVE,R1
.IFF
	MOV	(SP)+,R1
.ENDC
.ENDC
SYHALT::HALT
	BR	.-2
	.DSABL	LSB
.SBTTL	MEMORY PARITY TRAP HANDLING
.IF NE	MPT$Y
	.ENABL	LSB
TRAPMP::MOV	#-2,-(SP)
	BIT	#CACHE$,CONFG2
	BEQ	3$
	BIT	#360,@#177744
	BEQ	3$
	DEC	@SP
3$:
 .IF NE	ERL$G
	MOV	R4,-(SP)
	MOV	2(SP),R4
 .IFTF
	JSR	R5,4$
PARTBL:: BSS	16.
4$:
 .IFT
	JSR	PC,$ERLOG
 .IFTF
	MOV	(SP)+,R5
 .IFT
	MOV	(SP)+,R4
 .ENDC
	CMP	#-3,(SP)+
	BNE	5$
	RTI
5$:	TST	INTLVL
	BPL	FATAL
.IF EQ	MMG$T
	MOV	#MPAR.E,R3
	MOV	(SP)+,R4
	BR	ERRCOM
.IFF
	JMP	TRPXMP
.ENDC
	.DSABL	LSB
.ENDC
.SBTTL	TRAPS TO 4, 10
	.ENABL	LSB
TRAP10::
TRAP4::	ROL	@#ERRBYT
	TST	INTLVL
	BPL	FATAL
.IF EQ	MMG$T
	CMP	#400,SP
	BHIS	12$
.ENDC
	SPL	0
.IF EQ	MMG$T
	MOV	R5,-(SP)
	MOV	CNTXT,R5
	MOV	I.TRAP(R5),-(SP)
	BEQ	11$
	CLR	I.TRAP(R5)
	MOV	(SP)+,R5
	ASR	@#ERRBYT
	RTS	R5
.IFF
	CLR	-(SP)
	MOV	R5,-(SP)
	MOV	CNTXT,R5
	MOV	I.TRAP(R5),-(SP)
	BEQ	10$
	ASR	@#ERRBYT
	ROL	4(SP)
	CLR	I.TRAP(R5)
	MOV	2(SP),R5
	MOV	@SP,2(SP)
	JMP	XMRERT
10$:	TST	(SP)+
.ENDC
11$:	CMP	(SP)+,(SP)+
12$:	MOV	(SP)+,R4
.IF EQ	MMG$T
	MOV	@#USERSP,SP
.IFF
	TST	(SP)+
	BIS	#PMODE,@#PS
	GET	@#USERSP,-(SP)
	PUT	(SP)+,SP
.ENDC
	BEQ	FATAL
	SPL	0
	ASR	@#ERRBYT
	MOV	#TR04.E,R3
	ADC	R3
	.BR	ERRCOM
	.DSABL	LSB
.SBTTL	FATAL ERRORS - COMMON PROCESSING
	.MACRO	ERRMSG	CODE,TEXT
		.ASCII	TEXT<200>
		CODE'.E	== ...ERN
		...ERN	= ...ERN + 1
	.ENDM	ERRMSG
...ERN	= 0
	.ENABL	LSB
ERRCOM::.HRESET
	.RCTRLO
.IF EQ	MTT$Y
	JSR	PC,CTRLQ2
.IFF
ERRHOK::
.IF EQ	PDT$OP
	BIC	#TPS$MK,@TTPS
.IFF
	CLR	@TTPS
	NOP
.ENDC
	BIS	#100,@TTPS
.ASSUME	.-ERRHOK EQ 14
.ENDC
	JSR	R0,2$
	.ASCII	<CR><LF>"?MON-F-"<200>
	ERRMSG	USRX,<"Inv USR">
	ERRMSG	NODV,<"No dev">
	ERRMSG	DIRI,<"Dir I/O err">
	ERRMSG	FETC,<"Bad fetch">
	ERRMSG	OVLY,<"">
	ERRMSG	DOVR,<"Dir ovflo">
	ERRMSG	ADDR,<"Inv addr">
	ERRMSG	CHAN,<"Inv chan">
	ERRMSG	EMT,<"Inv EMT">
	ERRMSG	TR04,<"Trap to 4">
	ERRMSG	TR10,<"Trap to 10">
	ERRMSG	ILLD,<"Inv dir">
	ERRMSG	UDRV,<"Unloaded driver">
	ERRMSG	FPP,<"FPU trap">
	ERRMSG	MPAR,<"Mem err">
	ERRMSG	MMUF,<"MMU fault">
	ERRMSG	ISST,<"Inv SST">
	ERRMSG	OVER,<"Ovly err">
	.EVEN
1$:	TSTB	(R0)+
	BPL	1$
	DEC	R3
	BPL	1$
2$:	.PRINT
	TST	R3
	BPL	1$
	.TTYOUT	#SPACE
	MOVB	#30,R0
	SEC
3$:	ROL	R4
	ROLB	R0
	.TTYOUT
	MOV	#206,R0
4$:	ASL	R4
	BEQ	5$
	ROLB	R0
	BCS	4$
	BR	3$
5$:	JSR	R0,6$
	.ASCII	<0>"?MON-W-Directory unsafe"
MZEROB:	.BYTE	0
	.EVEN
6$:	CMPB	JOBNUM,USROWN
	BNE	7$
	TST	DFLG
	BEQ	7$
	INC	R0
	CLR	DFLG
7$:	.PRINT
	TST	JOBNUM
	BNE	8$
	BIS	#IFABRT,STATWD
	BISB	#<FATAL$>,@#USERRB
8$:	JMP	UABORT
	.DSABL	LSB
.SBTTL	EMT 376 PROCESSING - MONITOR FATAL TRAPS
	.ENABL	LSB
1$:	COM	R3
2$:	MOV	-(R2),R4
.IF NE	MMG$T
	CMP	(R2)+,(R2)+
.ENDC
	MOV	R2,SP
	JMP	ERRCOM
E376::	MOV	SAVEST+2(SP),R1
.IF EQ	MMG$T
	MOVB	(R1)+,R2
	CMPB	@R1,#^C<OVLY.E>
	BEQ	3$
	ADD	SP,R2
	ADD	#ERRPS,R2
	MOVB	(R1)+,R3
.IFF
	GET	(R1)+,R3
	MOVB	R3,R2
	ADD	SP,R2
	ADD	#ERRPS,R2
	SWAB	R3
	CMPB	R3,#^C<OVLY.E>
	BEQ	3$
	BIT	#CMODE,OLDPS(SP)
	BNE	4$
	MOVB	R3,R3
.ENDC
	BMI	1$
	MOV	CNTXT,R5
	TSTB	I.SERR(R5)
	BEQ	2$
	COM	R3
	MOVB	R3,@#ERRBYT
	BIS	#1,@R2
	MOV	R1,SAVEST+2(SP)
	JMP	EMTRTI
3$:	MONERR	OVER,,FATAL
.IF NE	MMG$T
4$:	JMP	TOOBIG
.ENDC
	.DSABL	LSB
.SBTTL	CONSOLE TTY CONFIGURATION DATA
.IF	NE,RTE$M
CLIFLG::.BYTE	UCLON!CCLON!DCLON!UCFON
.IFF;	NE,RTE$M
CLIFLG::.BYTE	UCLON!CCLON!DCLON
.ENDC;	NE,RTE$M
CLITYP::.BYTE	-1
INDDEV::.ASCII	/SY0:/
.IF EQ	MTT$Y
.IF NE	SYT$K
XFLAG::	.BYTE	0
XCOUNT:	.BYTE	0
XPREV:	.WORD	0
XBUFF:	.BLKB	6
XPROMT:	.ASCIZ	<CR><LF>/JOB> /
.ENDC
TTWIDT::.BYTE	80.
	.BYTE	CR
FILCHR:	.BYTE	0
FILCTR:	.BYTE	0
OUTCHR:	.BYTE	0
LINPOS:	.BYTE	0
TTCNFG::.WORD	PAGE$!FBTTY$!HWTAB$!BKSP$
.ENDC
.SBTTL	EMT PROCESSOR
	.ENABL	LSB
EMTPRO::BIC	#1,2(SP)
	MOV	R5,-(SP)
	MOV	R4,-(SP)
	JSR	R3,SAVE30
	TST	(SP)+
.IF NE	MMG$T
	MOV	@#KISAR1,@SP
	MOV	R0,-(SP)
.ENDC
.IF NE	SPC$PS
	MOV	CNTXT,R5
	INC	I.ECTR(R5)
.ENDC
	CLR	R2
	MOV	SAVEST+2(SP),R5
	GET	-(R5),R4
.IF NE	MMG$T
	BIT	#PMODE,@#PS
	BEQ	2$
	MOV	#SYSCOM,R1
1$:	GET	@R1,(R1)+
	CMP	R1,#SYSPTR
	BLO	1$
2$:
.ENDC
	MOV	SP,R1
	CMPB	R4,#374
	BHIS	NEWEMT
.IF EQ	MMG$T
	ADD	#SAVEST+6,R1
.IFF
	BIT	#PMODE,@#PS
	BNE	3$
	ADD	#SAVEST+6,R1
	BR	4$
3$:	GET	SP,R0
	JSR	PC,$RELOM
	MOV	R0,R1
	MOV	@SP,R0
	CLR	R2
.ENDC
4$:	MOV	R4,R5
	BIC	#^C<17>,R4
	BIC	#^C<17*20>,R5
	ASR	R5
	ASR	R5
	ASR	R5
	BR	EMTCOM
NEWEMT:	BNE	5$
	ADD	#E375MX*400,R0
	BR	7$
5$:	CMPB	R4,#376
	BHI	EMTOUT
	BEQ	E376
.IF NE	MMG$T
	BIT	#PMODE,@#PS
	BEQ	6$
.ENDC
	JSR	R5,CHKSP
	 BR	ERRARG
.IF NE	MMG$T
	JSR	PC,$RELOM
.ENDC
6$:	MOV	#100000,R2
	MOV	R0,R1
	MOV	(R1)+,R0
	MOV	(R1)+,@SP
7$:	CLR	R4
	BISB	R0,R4
	BEQ	8$
	MOV	CNTXT,R5
	CMPB	R4,I.CNUM(R5)
	BHIS	CHANER
8$:	MOV	R0,R5
	CLRB	R5
	SWAB	R5
	CMPB	#EMTMAX,R5
	BLOS	TOOBIG
	ASL	R5
	MOV	@SP,R0
	.BR	EMTCOM
EMTCOM::ADD	PC,R5
	MOV	EMTLST-.(R5),R5
	ROR	R5
	BCC	9$
	JSR	R5,CHKSP
	 BR	ERRARG
9$:	ASR	R5
	BCC	10$
	MOV	@R1,-(SP)
	JSR	R5,CHKSP
	 BR	ERRARH
	TST	(SP)+
10$:	ASL	R5
	MOV	R5,-(SP)
	MOV	CNTXT,R5
	ASL	R4
	MOV	R4,R3
	ASL	R3
	ASL	R3
	ADD	R4,R3
	ADD	I.CSW(R5),R3
	CLRB	@#ERRBYT
	ADD	(SP)+,PC
EMTCAL:
TOOBIG::MONERR	EMT
	BR	EMTOUT
ERRARH:	TST	(SP)+
ERRARG::MONERR	ADDR
	BR	EMTOUT
CHANER:	MONERR	CHAN
EMTOUT:	JMP	EMTDON
	.DSABL	LSB
.SBTTL	MARKTM - GET A QUEUE ELEMENT AND PLACE IT ON THE TIMER QUEUE
	.ENABL	LSB
MARKTM::TST	(R5)+
	SPL	7
	MOV	@R5,R3
	BEQ	6$
	MOV	@R3,@R5
	SPL	0
	GET	(R0)+,(R3)+
	GET	(R0)+,(R3)+
	ADD	#C.COMP-C.LINK,R3
	MOV	(R1)+,@R3
	CLR	-(R3)
.IF NE	MMG$T
	CMP	#177700,@R1
	BNE	1$
	MOV	#-3,@R3
.ENDC
1$:	MOV	(R1)+,-(R3)
	MOV	JOBNUM,-(R3)
	TST	-(R3)
	ENSYS	5$
	.BR	TIMIO
.SBTTL	TIMIO - PUT AN ELEMENT ON THE TIMER QUEUE
TIMIO::	ADD	PSCLOK,-(R3)
	ADC	-(R3)
	MOV	(R3)+,R0
	ADDR	LKQUE,R2
2$:	MOV	R2,R1
	MOV	@R1,R2
	BEQ	4$
	MOV	(R2)+,R4
	MOV	(R2)+,R5
	CMP	R0,R4
	BNE	3$
	CMP	@R3,R5
3$:	BHIS	2$
4$:	TST	-(R3)
	MOV	@R1,C.LINK(R3)
	MOV	R3,@R1
5$:	RTS	PC
6$:	SPL	0
ER0SP:	TST	(SP)+
ERRLK0:	JMP	EMTER0
	.DSABL	LSB
.IF NE	TIM$IT
.SBTTL	$TIMIO	- DEVICE I/O TIME OUT SERVICE
	.ENABL	LSB
$TIMIO::JSR	R3,SAVE30
	MOV	R5,R3
	ADD	(R5)+,R3
	MOV	12(SP),-(SP)
	MOV	R4,-(SP)
	TST	(R5)+
	BNE	$CANIO
	MOV	(R5)+,(R3)+
	MOV	(R5)+,(R3)+
	MOV	R5,16(SP)
	MOV	#-1,C.SYS-C.LINK(R3)
	ENSYS	1$
	BR	TIMIO
.SBTTL	$CANIO	- CANCEL DEVICE I/O TIMEOUT
$CANIO::MOV	R5,16(SP)
	MOV	C.SEQ(R3),R0
	MOV	#-1,R1
	MOV	C.JNUM(R3),R2
	CLR	R5
	JSR	PC,CMARKT
1$:	MOV	(SP)+,R4
	MOV	(SP)+,R5
2$:	RTS	PC
	.DSABL	LSB
.ENDC
.SBTTL	.CDFN	- CHANNEL DEFINE EMT
	.ENABL	LSB
C$DFN:	MOV	@R1,-(SP)
.IF NE	MMG$T
	CALL	$U2P1
	BCC	1$
	MOV	@SP,R0
	CALL	PL5WD
	BCS	ER0SP
1$:	MOV	R2,R0
	MOV	R2,2(SP)
	CALL	P1SD
.ENDC
	ADD	#I.CNUM,R5
	MOV	I.CSW-I.CNUM(R5),R2
	CMPB	@SP,@R5
	BLOS	ER0SP
	JSR	PC,QUIESCE
	CLR	R3
2$:	MOV	#CHNWDS,R4
	CMPB	@R5,R3
	BHI	4$
3$:	CLR	(R0)+
	SOB	R4,3$
	BR	5$
4$:	MOV	(R2)+,(R0)+
	SOB	R4,4$
5$:	INCB	R3
	CMPB	@SP,R3
	BHI	2$
	MOV	(SP)+,(R5)+
	BR	12$
.SBTTL	.TWAIT	- TIMED WAIT EMT
FUDGE2::.WORD	RESUM
	.WORD	177700
T$WAIT:	MOV	(PC)+,R1
FUDGE1:: .WORD	FUDGE2
	JSR	PC,MARKTM
	.BR	S$SPND
.SBTTL	.SPND	- SUSPEND JOB EMT
S$SPND:	MOV	CNTXT,R1
	DEC	I.SCTR(R1)
	BPL	RTILK0
	TST	@R1
	BMI	RTILK0
	JSR	R4,$SYSWT
	 .WORD	SPND$
	MOV	I.SCTR(R1),R0
	ASL	R0
	JSR	PC,@(SP)+
	BR	RTILK0
RESUM:	MOV	CNTXT,R0
	INC	I.SCTR(R0)
	RTS	PC
.SBTTL	.RSUM	- RESUME JOB EMT
R$SUME:	INC	I.SCTR(R5)
	BR	RTILK0
.SBTTL	.MRKT	- MARK TIME EMT
M$RKT:	JSR	PC,MARKTM
	BR	RTILK0
.SBTTL	.CNTXSW	- SPECIFY CONTEXT SWITCHED LOCATIONS EMT
S$SWAP:	TST	(R5)+
.IF NE	MMG$T
	TST	(R5)+
	BIT	#WINDW$,I.STATE-4(R5)
	BNE	6$
.ENDC
	TST	@R0
	BNE	7$
6$:	CLR	@SP
7$:	TST	@SP
	BEQ	10$
8$:	MOV	(R0)+,-(SP)
	CMP	#V.MAX,@SP
	BHI	9$
M$SV11	== .+2
	CMP	#160000,@SP
	BLOS	9$
	JSR	R5,CHKSP
	 CLR	@SP
9$:	ASR	(SP)+
	BLOS	EMTER0
	TST	@R0
	BNE	8$
.IF NE	FPU$11
	.BR	S$FPP
.SBTTL	.SFPA	- SET FPU EXCEPTION ADDRESS EMT
S$FPP:	CMP	#1,R0
	BHIS	10$
	JSR	R5,CHKSP
	 BR	EMTER0
.ENDC
10$:
.IF NE	FPU$11
	TST	(R5)+
.ENDC
	.BR	S$TRAP
.SBTTL	.TRPSET	- SET TRAP TO 4/10 INTERCEPT EMT
S$TRAP:	TST	(R5)+
11$:	ADD	#I.SPLS,R5
12$:	MOV	@SP,@R5
.IF EQ	FPU$11
S$FPP:
.ENDC
RTILK0:	JMP	EMTRTI
.SBTTL	.DEVICE	- SET PROGRAM TERMINATION JAM LIST EMT
D$VICE:
.IF NE	MMG$T
	BIT	#WINDW$,@R5
	BEQ	13$
	CLR	@SP
	CLR	R4
13$:	MOV	@SP,R0
	CALL	$USRPH
	BCC	135$
	JMP	EMTER0
135$:
.ENDC
	TSTB	R4
	BEQ	11$
	MOV	@SP,R0
	MOV	I.DEVL(R5),@R0
	MOV	R0,I.DEVL(R5)
	BR	EMTRTI
.SBTTL	.SCCA	- SET CTRL/C AST EMT
S$CCA:
.IF EQ	MMG$T
	MOV	I.SCCA(R5),R0
.IF NE	SCCA$G
	TST	JOBNUM
	BNE	15$
	TST	R4
	BEQ	15$
	CLR	R0
	BITB	#CC$GLB,INDSTA
	BEQ	14$
	MOV	PC,R0
14$:	BICB	#CC$GLB,INDSTA
	TST	@SP
	BEQ	16$
	BISB	#CC$GLB,INDSTA
	BR	16$
.ENDC
15$:	MOV	@SP,I.SCCA(R5)
16$:	MOV	R0,@SP
.IFF
	JSR	R1,17$
SCCATB:: .WORD	.-.
.REPT	FJOBS
	 .WORD	.-.
.ENDR
17$:
.IF NE	SCCA$G
	TST	JOBNUM
	BNE	19$
	TST	R4
	BEQ	19$
	CLR	2(SP)
	BITB	#CC$GLB,INDSTA
	BEQ	18$
	INC	2(SP)
18$:	TST	(SP)+
	BICB	#CC$GLB,INDSTA
	TST	R0
	BEQ	20$
	BISB	#CC$GLB,INDSTA
	BR	20$
.ENDC
19$:	ADD	JOBNUM,R1
	MOV	@R1,2(SP)
	MOV	R0,@R1
	MOV	(SP)+,R1
	MOV	R0,I.SCCA(R5)
	BEQ	RTILK0
	JSR	PC,$RELOC
	MOV	R2,I.SCCA(R5)
	MOV	R1,I.SCCA+2(R5)
.ENDC
20$:	BR	RTILK0
	.DSABL	LSB
.SBTTL	.TTYIN	- TERMINAL INPUT EMT
T$TIN::
.IF EQ	MTT$Y
	MOV	R5,R2
	MOV	R5,R1
	ADD	#I.TTLC,R1
	JSR	PC,TTRSET
	TST	@R1
	BNE	1$
	BIT	#TCBIT$,@#JSW
	BNE	EMTER0
	JSR	R4,$SYSWT
	 .WORD	TTIWT$
	CMP	@R1,#1
	JSR	PC,@(SP)+
1$:	JSR	PC,IGET
	BNE	2$
	TST	I.SCCA(R5)
	BEQ	4$
2$:	MOV	R4,@SP
.IFF
	MOV	I.CNSL(R5),R3
	JSR	PC,MTTIN
	BCS	EMTER0
	BNE	3$
	TST	I.SCCA(R5)
	BEQ	4$
3$:	MOV	R0,@SP
.ENDC
	BR	EMTRTI
4$:	TST	I.JNUM(R5)
	BNE	5$
	BIS	#IFABRT,STATWD
5$:	MOV	R4,R0
GOEXIT::MOV	#..EXIT,R4
	JMP	EMT16
.SBTTL	.TTYOUT - TERMINAL OUTPUT EMT
T$TOUT:
.IF EQ	MTT$Y
	MOV	R0,R4
	JSR	R0,TTOUT
	 .WORD	TCBIT$
.IFF
	MOV	I.CNSL(R5),R3
	JSR	R1,MTTPUT
	.WORD	TCBIT$
.ENDC
	BCC	EMTRTI
EMTER0:	EMTERR+0
	BR	EMTRTI
.SBTTL	RETURN FROM EMT
EMTDON::ASL	R2
	BEQ	EMTRTI
	MOV	SAVEST+2(SP),R3
.IF EQ	MMG$T
	CMP	#EMT+374,-(R3)
.IFF
	GET	-(R3),-(SP)
	CMP	#EMT+374,(SP)+
.ENDC
	BLOS	EMTRTI
.IF NE	MMG$T
	BIT	#CMODE,SAVEST+4(SP)
	BNE	2$
.ENDC
	MOV	SP,R3
	ADD	#OLDPS+2,R3
	ADD	R3,R2
1$:	MOV	-(R3),-(R2)
	CMP	R3,SP
	BHI	1$
	MOV	R2,SP
.IF NE	MMG$T
	BR	EMTRTI
2$:	GET	SP,-(SP)
	ADD	R2,@SP
	PUT	(SP)+,SP
.ENDC
.IF EQ	MMG$T
P$LAS:
.ENDC
.IF EQ	MTT$Y
M$TTIO:
.ENDC
.IF EQ	SPC$PS
S$PCPS:
.ENDC
EMTRTI::
.IF NE	MMG$T
	BIT	#CMODE,SAVEST+4(SP)
	BEQ	2$
	MOV	#SYSCOM,R1
1$:	PUT	@R1,(R1)+
	CMP	R1,#SYSPTR
	BLO	1$
2$:
.ENDC
	MOV	(SP)+,R0
.IF NE	MMG$T
	MOV	(SP)+,@#KISAR1
.ENDC
	MOV	(SP)+,R1
	MOV	(SP)+,R2
	MOV	(SP)+,R3
.IF NE	SPC$PS
	MOV	CNTXT,R5
	DEC	I.ECTR(R5)
	BNE	3$
	MOV	I.SPCP(R5),R4
	BEQ	3$
	TST	@R5
	BMI	3$
.IF EQ	MMG$T
	MOV	6(SP),@R4
	MOV	4(SP),-(R4)
	MOV	-(R4),4(SP)
.IFF
	MOV	@#KISAR1,-(SP)
	MOV	I.SPC1(R5),@#KISAR1
	MOV	10(SP),@R4
	MOV	6(SP),-(R4)
	MOV	-(R4),6(SP)
	MOV	(SP)+,@#KISAR1
.ENDC
	SPL	7
	CLR	I.SPCP(R5)
3$:
.ENDC
RTICML::JMP	RTICMN
.SBTTL	.SETTOP	- SET TOP OF MEMORY IN USE EMT
.ENABL	LSB
S$ETOP:
.IF NE MMG$T
	CLR	V$BIAS
	MOV	CNTXT,R4
.IFTF
	MOV	JOBNUM,R2
.IFT
	CALL	XMSTOP
.ENDC
	ASL	R2
	ADDR	$JBLIM+2,R2,ADD
	CMP	R0,@R2
	BHIS	1$
	MOV	@R2,R0
1$:
.IF NE	MMG$T
	BIT	#VRUN$,@R4
	BEQ	2$
	CMP	R0,#157776
	BLOS	S$ERTN
	MOV	#157776,R0
	BR	S$ERTN
2$:
.ENDC
	CMP	R0,-(R2)
	BLO	S$EPRV
	MOV	@R2,R0
3$:	TST	-(R0)
S$EPRV::TST	JOBNUM
	BNE	S$ERTN
	JSR	PC,ENQUSR
	CLR	USRSWP
.IF NE	MMG$T
	CLR	KMLOC
	CMP	R0,$KMLOC
	BLO	5$
.IFF
	CMP	R0,$KMLOC
	BLO	5$
	CLR	KMLOC
.ENDC
	CMP	R0,$USRLC
	BLO	5$
	BIT	#USR$,CONFIG
	BEQ	4$
	MOV	$USRLC,R0
	BR	3$
4$:	CLR	USRLOC
	MOV	SP,USRSWP
5$:	TSTB	USRLVL
	BNE	S$ERTN
	JSR	PC,DEQUSR
S$ERTN::
.IIF NE MMG$T	SUB	V$BIAS,R0
	MOV	R0,@SP
	MOV	R0,@#USERTOP
	BR	EMTRTI
.DSABL	LSB
.SBTTL	.RCTRLO	- RESET CTRL/O EMT
R$CTLO:	CLRB	I.OCTR+1(R5)
.IF NE	MTT$Y
	MOV	I.CNSL(R5),R3
.ENDC
RCTHOK::
	JSR	PC,TTRSET
RTILK3:	BR	EMTRTI
.SBTTL	.PRINT - PRINT STRING EMT
P$RINT:
.IF NE	MMG$T
	JSR	PC,PRINTR
	BR	EMTRTI
.ENDC
PRINTR::
.IF EQ	MTT$Y
	MOVB	#LF,OUTCHR
.IF NE	MMG$T
	BIT	#PMODE,@#PS
	BEQ	1$
	JSR	PC,$RELOM
1$:
.ENDC
2$:	MOVB	(R0)+,R4
	BEQ	3$
	CMP	R4,#177600
.IF EQ	MMG$T
	BEQ	EMTRTI
.IFF
	BEQ	4$
.ENDC
	JSR	R0,TTOUT
	 .WORD	0
	BR	2$
3$:	ADDR	5$,R0
	BR	2$
.IFF
	MOV	I.CNSL(R5),R3
	MOVB	#LF,T.OCHR(R3)
.IF NE	MMG$T
	BIT	#PMODE,@#PS
	BEQ	1$
	JSR	PC,$RELOM
1$:
.ENDC
	MOV	R0,R1
2$:	MOVB	(R1)+,R0
	BEQ	3$
	CMP	R0,#177600
.IF EQ	MMG$T
	BEQ	EMTRTI
.IFF
	BEQ	4$
.ENDC
	JSR	R1,MTTPUT
	 .WORD	0
	BR	2$
3$:	ADDR	5$,R1
	BR	2$
.ENDC
.IF NE	MMG$T
4$:	RTS	PC
.ENDC
5$:	.BYTE	CR,LF,200,0
	.EVEN
.SBTTL	.TLOCK	- TEST AND LOCK USR EMT
T$LOCK:	ENSYS	2$
	CMPB	#377,USROWN
	BNE	1$
	MOVB	JOBNUM,USROWN
1$:	RTS	PC
2$:	CMPB	JOBNUM,USROWN
	BEQ	L$OCK
EMT0ER:	EMTERR+0
RTILK2:	BR	RTILK3
.SBTTL	.LOCK	- LOCK USR EMT
L$OCK:	JSR	PC,CALUSR
	BR	RTILK3
.SBTTL	.UNLOCK	- UNLOCK USR EMT
.ENABL	LSB
U$NLOK:	CMPB	USROWN,JOBNUM
	BNE	RTILK3
	TSTB	USRLVL
	BEQ	1$
MONOUT::BIC	#USRRN$,@CNTXT
	DECB	USRLVL
	BNE	2$
1$:	JSR	PC,RIDUSR
2$:	JMP	EMTDON
.DSABL	LSB
.SBTTL	INTERNAL ERROR EMT (SET C BIT, ERRBYT)
EMT17:	ASR	R4
	MOVB	R4,@#ERRBYT
	BIS	#1,ERRPS(SP)
	BR	RTILK2
.SBTTL	.SERR	- SET SOFT MONITOR ERRORS EMT
S$ERR:	INC	R2
.SBTTL	.HERR	- DISABLE SOFT MONITOR ERRORS EMT
H$ERR:	MOVB	R2,I.SERR(R5)
RTILK1:	BR	RTILK2
	.SBTTL	DATE, GVAL, PVAL, POKE, and PEEK EMT's
.ENABL	LSB
D$ATE::	MOV	#$DATE-$RMON,R0
	CLR	R4
	BR	1$
G$VAL::	CMP	#6,R4
	BLO	3$
	ASR	R4
	ASR	R4
	BCS	2$
1$:	CMP	R0,#RMSTAK-$RMON
	BHIS	EMT0ER
	ADD	@#SYSPTR,R0
2$:	MOV	@R0,@SP
	ASR	R4
	BCC	RTILK2
	MOV	@R1,@R0
	BR	RTILK2
3$:	JMP	TOOBIG
	.DSABL	LSB
.SBTTL	.SRESET	- SOFT RESET EMT
S$RSET:	JSR	PC,REVERT
	MOV	I.CSW(R3),R1
	MOV	#CHNUM*CHNWDS,R0
	BIT	#OVLY$,@#JSW
	BEQ	1$
	SUB	#CHNWDS,R0
1$:	CLR	(R1)+
	SOB	R0,1$
	BR	RTILK2
QUIESCE::MOV	CNTXT,R3
	JSR	R4,$SYSWT
	 .WORD	EXIT$
	MOV	I.IOCT(R3),-(SP)
	NEG	(SP)+
	JSR	PC,@(SP)+
	RTS	PC
.SBTTL	EMT 16 SUBCODE DISPATCHER
EMT16:	TST	(R4)+
	ADD	PC,R4
	ADD	@R4,PC
LST16::	.WORD	T$TIN-LST16
	.WORD	T$TOUT-LST16
	.WORD	D$STAT-LST16
	.WORD	F$ETCH-LST16
	.WORD	C$SIGN-LST16
	.WORD	C$SISP-LST16
	.WORD	L$OCK-LST16
	.WORD	U$NLOK-LST16
..EXIT	= . - LST16
	.WORD	E$XIT-LST16
	.WORD	P$RINT-LST16
	.WORD	S$RSET-LST16
	.WORD	Q$SET-LST16
	.WORD	S$ETOP-LST16
	.WORD	R$CTLO-LST16
.IF NE	MMG$T
	.WORD	A$STX-LST16
.IFF
	.WORD	E$XIT-LST16
.ENDC
	.WORD	H$RSET-LST16
.IF NE	MMG$T
SL$E16:	.WORD	PRINTR-LST16
.ENDC
.SBTTL	.CLOSE - CLOSE CHANNEL EMT
C$LOSE:	MOV	@R3,R5
	BIC	#^C<INDX$M>,R5
	.ADDR	#$STAT,R5,ADD
	BIT	@R5,#SPECL$
	BEQ	10$
	BIT	@R5,#FILST$
	BNE	20$
10$:	BIT	#<RENAM$!DWRIT$>,@R3
	BEQ	P$URGE
20$:	JMP	C$LOS2
.SBTTL	.PURGE	- PURGE CHANNEL EMT
P$URGE:	CLR	(R3)+
	BR	RTILK1
.SBTTL	.ABTIO - ABORT I/O ON A CHANNEL
	.ENABL	LSB
A$BTIO:	MOV	@R3,R2
	BPL	RTILK1
	TSTB	C.DEVQ(R3)
	BEQ	RTILK1
	BIC	#^C<INDX$M>,R2
	ADD	PC,R2
	ADD	#$ENTRY-.,R2
	MOV	@R2,R0
	BEQ	RTILK1
	ENSYS	RTILK1
.IF NE	MMG$T
 .IF NE	XM$FET
	CALL	KPSAVE
 .ENDC
.ENDC
	CLR	-(SP)
	CLR	-(SP)
	MOV	R3,-(SP)
	MOV	#100000,-(SP)
	MOV	R0,R3
	TST	(R3)+
	CALL	IOQABT
	BIC	#100000,@SP
	BNE	10$
	ADD	#<4*2>,SP
	BR	20$
10$:	MOV	CNTXT,R3
	SUB	(SP)+,I.IOCT(R3)
				.ASSUME I.QHDR EQ 2
	CMP	(SP)+,(R3)+
	SPL	7
	MOV	@R3,@(SP)+
	MOV	(SP)+,@R3
	SPL	0
20$:
.IF NE	MMG$T
 .IF NE	XM$FET
	CALL	KPREST
 .ENDC
.ENDC
	RTS	PC
	.DSABL	LSB
.SBTTL	.CSIGEN AND .CSISPC - CSI CALL EMTS
	.ENABL	LSB
CSIERR::BNE	25$
	MOV	(PC)+,R0
	 .BYTE	9.,3
5$:	EMT	374
	DECB	R0
	BGE	5$
	BR	25$
C$SIGN:	CLR	R4
	BR	10$
C$SISP:	MOV	#100000,R4
10$:	BIS	#CSIRN$,@R5
	MOV	#..CSI,R2
	MOVB	JOBNUM,R3
	BEQ	15$
	BIS	#GTLIN$,@#JSW
15$:	TST	@R1
	BEQ	20$
	JMP	EMTUSR
20$:	INCB	R4
	CMPB	USROWN,R3
	BNE	30$
	INCB	USRLVL
25$:	CLRB	R4
	BISB	USRLVL,R4
	JSR	PC,RIDUSR
30$:
.IF EQ	MMG$T
	MOV	SP,R1
	ADD	#SAVEST+6+4,R1
.IFF
	GET	SP,R0
	JSR	PC,$RELOM
	MOV	R0,R1
	CMP	(R1)+,(R1)+
.ENDC
	MOV	PC,R0
	CMP	(R0)+,(PC)+
	 .BYTE	ASTER,200
.IF NE	MMG$T
 .ROM	CLR	UKFLG
.ENDC
	MOV	@R1,(PC)+
GTLFLG:	.WORD	0
	CMP	@R1,#3
	BHI	35$
	INC	R0
	TST	-(R1)
	BEQ	35$
	MOV	@R1,R0
.IF NE	MMG$T
	INC	UKFLG
.ENDC
35$:	MOV	R0,-(SP)
40$:	CLR	-(SP)
	TST	JOBNUM
	BNE	80$
	BIT	#GTLIN$,@#JSW
	BNE	45$
	TSTB	STATWD
	BMI	120$
45$:	BIT	#IFRVTTY,STATWD
	BNE	80$
	MOV	INBFPT,R0
	BEQ	80$
	CMPB	@R0,#-1
	BEQ	75$
	BIT	#GTLIN$,@#JSW
	BEQ	60$
	MOVB	@R0,-(SP)
	BIC	#^C<177>,@SP
	CMPB	(SP)+,#CTRLC
	BNE	60$
	TSTB	(R0)+
	BPL	50$
	BIS	#IFRVTTY,STATWD
50$:	BIS	#IFGTCC,STATWD
55$:	TSTB	(R0)+
	BNE	55$
	MOV	R0,INBFPT
	TST	(SP)+
	BR	40$
60$:	INC	@SP
65$:	CMPB	@R0,#<177>
	BEQ	70$
	TSTB	@R0
	BPL	120$
70$:	BIT	#<IFEKO$>,STATWD
	BNE	120$
	BR	90$
75$:	BIC	#IFINP,STATWD
80$:	MOV	CNTXT,R1
	BIC	#TTSPC$,I.TERM(R1)
	CMP	GTLFLG,#3
	BHI	85$
	MOV	@#JSW,R0
	BIC	#^CTTLC$,R0
	BIS	R0,I.TERM(R1)
85$:
.IF NE	BATC$H
	TST	JOBNUM
	BNE	95$
.ENDC
90$:
.IF NE	BATC$H
	MOV	$ENTRY+BA.NUM,R0
	BEQ	95$
	TST	BATSW$(R0)
	BNE	120$
.ENDC
95$:	MOV	2(SP),R0
.IF NE	MMG$T
	TST	UKFLG
	BNE	100$
.ENDC
	.PRINT
	MOV	R5,R5
.IF NE	MMG$T
	BR	105$
100$:	MOV	R1,-(SP)
	MOV	R4,-(SP)
	ADDR	LST16,R1
	ADD	SL$E16,R1
	CALL	@R1
	MOV	(SP)+,R4
	MOV	(SP)+,R1
.ENDC
105$:	TST	@SP
	BNE	120$
	TSTB	JOBNUM
	BNE	110$
	BIT	#SLEDI$,CONFIG
	BEQ	110$
	.MCALL	.TTINR
	.TTINR
	  MOV	R4,R4
	BR	120$
110$:	JSR	R4,$SYSWT
	 .WORD	TTIWT$
	CMP	I.TTLC(R1),#1
115$:	JSR	PC,@(SP)+
120$:	CMP	(SP)+,(SP)+
125$:	MOV	#..CSI,R2
	JSR	PC,CALUSR
	MOVB	R4,USRLVL
	CLRB	R4
	BIS	#CSIRN$,@CNTXT
	BR	130$
.SBTTL	DISPATCHER FOR EMTS HANDLED IN THE USR
D$STAT:	INC	R2
R$NAME:	INC	R2
L$OOK:	INC	R2
E$NTER:	INC	R2
C$LOS2:	INC	R2
F$ETCH:	INC	R2
D$LETE:	INC	R2
Q$SET2:
EMTUSR:	JSR	PC,CALUSR
130$:	BIS	#USRRN$,@CNTXT
	JMP	@USRLOC
Q$SET:	JSR	PC,ENQUSR
	CLR	USRLOC
	CLR	KMLOC
	BR	Q$SET2
.DSABL	LSB
.SBTTL	.CHAIN	- CHAIN TO PROGRAM EMT
	.ENABL	LSB
C$HAIN:	BIS	#CHAIN$,@#JSW
	MOV	SP,R0
	BR	1$
.SBTTL	.EXIT - EXIT FROM PROGRAM EMT
E$XIT:	BIC	#CHAIN$,@#JSW
1$:	MOV	R0,-(SP)
.IF NE	MMG$T
	CALL	P1SD
.ENDC
	MOV	JOBNUM,R2
	CMPB	USROWN,R2
	BNE	2$
	CLR	BLKEY
	JSR	PC,RIDUSR
2$:	TST	@CNTXT
	BPL	3$
	JMP	UABORT
3$:	JSR	PC,REVERT
.IF NE	MTT$Y
	JSR	PC,MTRSET
.ENDC
	CLR	@R3
.IF NE	SPC$PS
	CLR	I.ECTR(R3)
	CLR	I.SPCP(R3)
.ENDC
4$:	CLR	I.SERR(R3)
	CLR	I.SCCA(R3)
.IF NE MMG$T
	BIS	#PMODE,@#PS
	ADDR	SCCATB,R1
	ADD	JOBNUM,R1
	CLR	@R1
.ENDC
5$:	MOV	I.DEVL(R3),R1
	BEQ	7$
	MOV	(R1)+,I.DEVL(R3)
6$:	MOV	(R1)+,R2
	BEQ	5$
	MOV	(R1)+,@R2
	BR	6$
7$:	ADD	#I.SPLS,R3
	MOV	@R3,R0
	BEQ	10$
	CLR	@R3
	BR	9$
8$:	MOV	(R0)+,@R2
9$:	MOV	(R0)+,R2
	BNE	8$
10$:	MOV	(R3)+,(R3)+
.IF NE	FPU$11
	CLR	(R3)+
.ENDC
.IF NE	MMG$T
	TST	(R3)+
.ENDC
	CLR	(R3)+
	CMP	(R3)+,(R3)+
	ADDR	LOWMAP,R5
	MOV	#MAPSIZ,R2
11$:	BIC	@R3,(R5)+
	CLR	(R3)+
	SOB	R2,11$
	.DSABL	LSB
EXIHOK::
	TST	JOBNUM
	BEQ	EXITBG
	.ENABL	LSB
EXITFG::MOV	CNTXT,R5
.IF EQ	MTT$Y
	JSR	R4,$SYSWT
	 .WORD	TTOEM$
	MOVB	I.OCTR(R5),-(SP)
	NEGB	(SP)+
	JSR	PC,@(SP)+
	ADDR	TTIUSR,R4
	JSR	PC,CTRL.B
.IFF
	MOV	I.CNSL(R5),R3
	JSR	PC,TTOEWT
	MOV	R3,R2
	MOV	T.CSR(R2),R4
	MOV	BKCNSL,R3
	CMP	R2,R3
	BEQ	1$
	BIC	#CONSL$,T.STAT(R2)
.IF NE	SYT$K
	CLR	T.CNT(R2)
	INC	T.CNT(R3)
.ENDC
	JSR	PC,MTRSET
1$:	BIS	#SHARE$,T.STAT(R3)
	MOV	BCNTXT,R2
	CMP	R5,TTIUSR
	BNE	2$
	MOV	R2,TTIUSR
2$:	CMP	R5,TTOUSR
	BNE	3$
	JSR	PC,TTOSET
3$:
.ENDC
.IF EQ MMG$T
	BIS	#NORUN$,I.BLOK(R5)
	JMP	USWAPO
.IFF
	ENSYS	QGTELT
	CALL	REGABT
	BIS	#NORUN$,I.BLOK(R5)
	JMP	QWAIT
.ENDC
	.DSABL	LSB
	.ENABL	LSB
EXITBG::
 .ROM	MOV	SP,EXTFLG,GLOBAL=YES
	ADD	#SPTR-<LOWMAP+<2*MAPSIZ>>,R5
	MOV	(SP)+,-(R5)
.IF EQ	MMG$T
	MOV	R5,SP
.IFF
	MOV	R5,R2
	ADD	#RMSTAK-<SPTR-2>,R5
	MOV	R5,SP
	BIT	#VIRT$,@#JSW
	BEQ	7442$
	MOV	#500,R0
7441$:	GET	@R0,(R0)+
	CMP	R0,#1000
	BLO	7441$
7442$:
	ENSYS	998$
	PUT	R2,SP
	MOV	CNTXT,R5
	CALL	REGABT
	MOV	I.WPTR(R5),R5
	MOV	(R5)+,R0
12$:	CLR	@R5
	CLR	W.BSIZ(R5)
	ADD	#W.BLGH,R5
	SOB	R0,12$
	CALLR	MAPLO
998$:	JSR	PC,FIXTRP
.ENDC
	MOV	$KMLOC,R2
	TST	KMLOC
	BNE	15$
	JSR	PC,ENQUSR
	ADDR	USRSWP,R5
	CLR	(R5)+
	MOV	(R5)+,R0
.IF NE	MMG$T
	CLR	R3
	BIT	#VIRT$,@#JSW
	BEQ	579$
	MOV	#V.MAX,R3
579$:
.IFTF
	MOV	R2,@R5
.IFT
	SUB	R3,@R5
.IFTF
	BIC	#777,@R5
	MOV	(R5)+,@R5
.IFT
	MOV	USRLOC,R4
	TST	-(R4)
	SUB	R3,R4
	CMP	R4,@#USERTOP
	BHIS	114$
	MOV	R4,@#USERTOP
114$:
.ENDC
	BIT	#<XITSW$>,CONFG2
	BNE	13$
	SUB	@#USERTOP,@R5
	BHI	13$
	ROR	@R5
	DEC	@R5
	TST	-(R5)
	JSR	PC,$SYS
	BCS	SWPERR
	TST	(R5)+
13$:	CMP	(R5)+,(R5)+
	MOV	$MONBL,R0
	SUB	#KMONSZ,R0
	CMP	-(R2),-(R2)
	JSR	PC,$SYS
	BCC	15$
	JSR	R0,14$
	 .ASCIZ	/?MON-F-System read error/
	 .EVEN
14$:	.PRINT
	MOV	(SP)+,R0
EXRDKM::JSR	PC,$SYS
	BCS	EXRDKM
15$:	BIC	#3400,SPSTAT
.IF EQ	MMG$T
	JMP	MEXIT2-KMON(R2)
.IFF
	ADD	#MEXIT2-KMON,R2
	MOV	#CMODE,-(SP)
	MOV	R2,-(SP)
	RTI
.ENDC
	.DSABL	LSB
SWPERR::.HRESET
	.RCTRLO
	CLR	@#USERTOP
	ADDR	SWPMSG,R0
	.PRINT
	CLR	R4
	JMP	GOEXIT
SWPMSG:	.ASCIZ	/?MON-F-Swap error/
	.EVEN
.SBTTL	SWAP USR ROUTINE
.ENABL	LSB
CALUSR::JSR	PC,ENQUSR
	INCB	USRLVL
	TST	USRLOC
	BNE	4$
	MOV	$USRLC,-(SP)
	TST	USRSWP
	BEQ	3$
	MOV	@#UFLOAT,@SP
	BEQ	1$
	JSR	R5,CHKSP
	 BR	5$
	ADD	#USRSIZE-2,@SP
	JSR	R5,CHKSP
	 BR	5$
	SUB	#USRSIZE-2,@SP
	BR	2$
1$:	TST	JOBNUM
	BNE	5$
	MOV	$USRLC,@SP
2$:	MOV	(PC)+,R5
SWOPTR:: .WORD	SWOIOB
	MOV	@SP,@R5
	CMPB	USRLVL,#1
	BHI	3$
	JSR	PC,$SYSSW
	BCS	SWPERR
3$:	MOV	(PC)+,R5
SWIPTR:: .WORD	SWIIOB
	MOV	(PC)+,R0
$MONBL:: .WORD	0
	MOV	@SP,@R5
.IF NE	MMG$T
	MOV	@#PS,-(SP)
	CLRB	@SP
	BIC	#PMODE,@#PS
.ENDC
	JSR	PC,$SYS
.IF NE	MMG$T
	BIS	(SP)+,@#PS
.ENDC
	BCS	SWPERR
	MOV	(SP)+,USRLOC
4$:	RTS	PC
5$:	CMP	(SP)+,(SP)+
	MONERR	USRX,,FATAL
.DSABL	LSB
.SBTTL	ENTER B/G JOB
RDOVLY::
.IF EQ	MMG$T
	CLR	KMONIN
.IFF
	ADDR	SPTR,SP
	PUT	(SP)+,SP
.ENDC
	JSR	PC,$SYS
SWPLNK:	BCS	SWPERR
ENTRPG::
.IF EQ	MMG$T
	CLR	KMONIN
	CLRB	USRLVL
	MOV	@#USERSP,SP
	MOV	R2,-(SP)
	BR	DEQUSR
.IFF
	ENSYS	3$
	PUT	@#USERSP,SP
	CLR	KMONIN
	CLRB	USRLVL
	MOV	#CMODE,10(SP)
	MOV	R2,6(SP)
	JSR	PC,DEQUSR
	MOV	CNTXT,R4
	BIT	#WINDW$,@R4
	BEQ	3$
	JSR	PC,CLRPDR
	MOV	I.WPTR(R4),R4
	TST	(R4)+
	JSR	PC,MAPWN
	CLR	R0
	JSR	PC,$RELOM
	TST	V.EMT(R0)
	BNE	1$
	MOV	@#V.EMT,V.EMT(R0)
1$:	MOV	(PC)+,(R0)+
	 BIC	R0,R0
	MOV	(PC)+,(R0)+
	 .ASTX
	ADD	#SYSCOM-4,R0
	MOV	#SYSCOM,R1
	MOV	#<<SYSPTR+2>-SYSCOM>/2,R2
2$:	MOV	(R1)+,(R0)+
	SOB	R2,2$
	CALL	P1SD
3$:	RTS	PC
.ENDC
.SBTTL	ENQ / DEQ ON USR
ENQUSR::CMPB	JOBNUM,USROWN
	BEQ	1$
	ENSYS	ENQUSR
	CMPB	USROWN,#377
	BNE	2$
	MOVB	JOBNUM,USROWN
1$:	RTS	PC
2$:	JMP	DLYUSR
RIDUSR::BIC	#<USRRN$!CSIRN$>,@CNTXT
	CLRB	USRLVL
	TST	USRSWP
	BEQ	DEQUSR
	CLR	BLKEY
	MOV	SWIPTR,R5
	MOV	SWOIOB,@R5
	BEQ	1$
	JSR	PC,$SYSSW
	BCS	SWPLNK
	CLR	SWOIOB
1$:	CLR	USRLOC
	CLR	KMLOC
	.BR	DEQUSR
.SBTTL	DEQUSR - RELEASE OWNERSHIP OF THE USR
DEQUSR::CMPB	JOBNUM,USROWN
	BNE	2$
	ENSYS	3$
	MOVB	#377,USROWN
	MOV	IMPLOC,R4
1$:	MOV	-(R4),R5
	BEQ	1$
	CMP	#-1,R5
	BEQ	3$
	BIT	#USRWT$,I.BLOK(R5)
	BEQ	1$
	BIT	#KSPND$,I.BLOK(R5)
	BNE	1$
	JSR	R4,UNBLOK
	 .WORD	USRWT$
	MOVB	I.JNUM(R5),USROWN
2$:	RTS	PC
3$:	BIT	#ABPND$,@CNTXT
	BEQ	2$
UABT2:	JMP	UABORT
.SBTTL	RESIDENT TELETYPE HANDLER
.ENABL	LSB
	.WORD	TTCMPL+2-.
	.WORD	0
TTLQE::	.WORD	0
TTCQE::	.WORD	0
	MOV	TTCQE,R3
	MOV	(R3)+,R4
	MOV	(R3)+,R1
	SWAB	R1
	ASR	R1
	ASR	R1
	ASR	R1
	BIC	#^C<7*2>,R1
	ADD	PC,R1
	MOV	$IMPUR-.(R1),R2
	ASL	Q.WCNT-Q.BUFF(R3)
	BEQ	TTCMPL
	BCS	5$
	TST	TTEOF
	BNE	TTCLEF
.IF EQ	MTT$Y
 .ROM	MOV	R2,TTHIUS
.IFF
	MOV	R2,TTHIUS
.ENDC
	TST	R4
	BNE	TTHIN
.IF EQ	MTT$Y
	MOVB	#UPAROW,R4
	JSR	PC,TTOPT2
TTHIN::	MOV	TTCQE,R3
.IF EQ	MMG$T
	CMP	(R3)+,(R3)+
.ENDC
1$:	MOV	TTHIUS,R2
	TST	I.TTLC(R2)
	BEQ	6$
	JSR	PC,IGET
	BEQ	$RQABT
	CMPB	#CTRLZ,R4
	BEQ	3$
.IF EQ	MMG$T
	MOVB	R4,@(R3)+
	DEC	@R3
	BEQ	35$
	INC	-(R3)
	BR	1$
2$:	INC	-(R3)
3$:	CLRB	@(R3)+
	DEC	@R3
	BNE	2$
.IFF
	MOVB	R4,-(SP)
	MOV	R3,R4
	JSR	PC,$PUTBYT
	DEC	Q.WCNT-Q.BLKN(R4)
	BEQ	35$
	MOVB	R0,R4
	BR	1$
3$:	MOV	R3,R4
4$:	CLR	-(SP)
	JSR	PC,$PUTBYT
	DEC	Q.WCNT-Q.BLKN(R4)
	BNE	4$
.ENDC
.IFF
	MOV	I.CNSL(R2),R3
	MOV	T.CSR(R3),R4
	ADD	#I.ICTR,R2
	MOVB	#UPAROW,R0
	JSR	PC,TTOPT2
TTHIN::	MOV	TTCQE,R4
1$:	MOV	TTHIUS,R1
	ADD	#I.IGET,R1
	TST	I.TTLC-I.IGET(R1)
	BNE	10$
	TST	-(R1)
	BR	6$
10$:	JSR	PC,MTTGET
	BEQ	$RQABT
	CMPB	#CTRLZ,R0
	BEQ	3$
.IF EQ	MMG$T
	MOVB	R0,@Q.BUFF-Q.BLKN(R4)
	DEC	Q.WCNT-Q.BLKN(R4)
	BEQ	35$
	INC	Q.BUFF-Q.BLKN(R4)
	BR	1$
2$:	INC	Q.BUFF-Q.BLKN(R4)
3$:	CLRB	@Q.BUFF-Q.BLKN(R4)
	DEC	Q.WCNT-Q.BLKN(R4)
	BNE	2$
.IFF
	MOVB	R0,-(SP)
	JSR	PC,$PUTBYT
	DEC	Q.WCNT-Q.BLKN(R4)
	BEQ	35$
	BR	1$
3$:	CLR	-(SP)
	JSR	PC,$PUTBYT
	DEC	Q.WCNT-Q.BLKN(R4)
	BNE	3$
.ENDC
.ENDC
 .ROM	MOV	SP,TTEOF
35$:	MOV	R5,R2
	JSR	PC,TTCMPL
	MOV	R2,R5
.IF EQ	MTT$Y
	MOV	R0,R4
.ENDC
6$:	RTS	PC
TTCLEF:	CLR	TTEOF
	BIS	#EOF$,@Q.CSW-Q.BUFF(R3)
TTCMPL::CLR	TTHIUS
	CLR	TTHOUS
	ADDR	TTCQE,R4
	JMP	COMPLT
5$:	MOV	(R3)+,-(SP)
	MOV	@R3,-(R3)
.IF EQ	MTT$Y
	BIC	#WRWT$,I.TERM(R2)
.ENDC
	NEG	(R3)+
	MOV	(SP)+,@R3
	MOV	R2,TTHOUS
.IF NE	MTT$Y
	MOV	I.CNSL(R2),R3
	BIC	#WRWT$,T.STAT(R3)
	MOV	T.CSR(R3),R4
	JMP	TTOENB
.IFF
.IF NE	SYT$K
	JMP	TTOENB
.IFF
	BR	TTOENB
.ENDC
.ENDC
.DSABL	LSB
$RQABT::BIS	#100000,INTACT
	BIS	#ABPND$,@R5
	RTS	PC
.IF EQ	MTT$Y
.SBTTL	TERMINAL SERVICE ROUTINES
IGET::	ADD	#I.IGET,R2
	INC	@R2
	CMP	(R2)+,@R2
	BNE	1$
	SUB	#TTYIN,I.IGET-I.ITOP(R2)
1$:	MOVB	@-(R2),R4
	DEC	-(R2)
	JSR	PC,EOLTST
	BNE	2$
	DEC	I.TTLC-I.ICTR(R2)
	CMPB	#'C-100,R4
2$:	RTS	PC
TTRSET::MOV	@#JSW,R3
	BIC	#^C<TTSPC$!TTLC$>,R3
	BIT	#TTSPC$,R3
	BEQ	1$
	ADD	#I.ICTR-I.TTLC,R1
1$:	SPL	7
	BIC	#<TTSPC$!TTLC$>,I.TERM(R5)
	BIS	R3,I.TERM(R5)
	SPL	0
	RTS	PC
.ENABL	LSB
1$:
.IF NE	SYT$K
	TSTB	XFLAG
	BEQ	2$
	ENSYS	TTOUT
	JMP	QWAIT
2$:
.ENDC
	JSR	R4,$SYSWT
	 .WORD	TTOWT$
	CMPB	#TTYOUT-1,@R2
	JSR	PC,@(SP)+
TTOUT::
.IF NE	SYT$K
	TSTB	XFLAG
	BNE	3$
.ENDC
	MOV	CNTXT,R2
	JSR	PC,TTOPT2
	BCC	4$
3$:	BIT	@R0,@#JSW
	BEQ	1$
4$:	BIT	(R0)+,R1
	RTS	R0
.DSABL	LSB
.ENABL	LSB
.IF NE	SYT$K
XRESET:	CLRB	(R3)+
	CLR	(R3)+
	CLR	(R3)+
	CLR	(R3)+
	CLR	(R3)+
	RTS	PC
1$:	JSR	R5,ECHO0C
	 .BYTE	CR,LF
	CLR	XFLAG
	RTS	PC
.SBTTL	PROCESS CTRL/C INPUT
2$:	TSTB	XFLAG
	BNE	1$
.IFF
.SBTTL	PROCESS CTRL/C INPUT
2$:
.ENDC
	TST	I.SCCA(R5)
	BEQ	3$
	BIT	#TTSPC$,I.TERM(R5)
	BNE	4$
3$:	JSR	R5,ECHO0C
	 .BYTE	CR,LF
4$:	CMPB	R0,I.PTTI(R5)
	BNE	TT3LNK
	MOV	I.SCCA(R5),R4
	BNE	TTICCA
	TST	I.JNUM(R5)
	BNE	$RQABT
	BICB	#<LN$IND!IN$RUN!IN$IND>,INDSTA
	BIS	#IFABRT,STATWD
	TST	EXTFLG
	BNE	TT3LNK
.IF NE	BATC$H
	MOV	$ENTRY+BA.NUM,R3
	BEQ	$RQABT
	CLR	BATSW$(R3)
.ENDC
	BR	$RQABT
CTRL.C::BR	2$
.DSABL	LSB
.SBTTL	PROCESS CTRL/Q INPUT
.ENABL	LSB
CTRL.Q::TSTB	TTCNFG
	BPL	TTIDSP
CTRLQ2:	CLR	XEDOFF
HKPC10::
.IF EQ	PDT$OP
	BIC	#TPS$MK,@TTPS
.IFF
	CLR	@TTPS
	NOP
.ENDC
.ASSUME	.-HKPC10 EQ 6
	BR	TTOENB
.IF NE	SYT$K
.SBTTL	PROCESS CTRL/X INPUT
CTRL.X::ADDR	XFLAG,R3
	MOVB	#201,(R3)+
	JSR	PC,XRESET
	MOV	TTIUSR,TTOUSR
	BR	TTOENB
.ENDC
.SBTTL	PROCESS CTRL/B INPUT
CTRL.B::
.IF NE	SYT$K
	CLR	XFLAG
.ENDC
	MOV	BCNTXT,R0
XCOM::	MOV	R0,@R4
	CMP	-(R4),R0
	BEQ	1$
	MOV	R0,@R4
	MOV	I.TID(R0),-(R4)
	.BR	TTOENB
TTOENB::
.IF EQ	PDT$OP
	BIS	#IENABL,@TTPS
.IFF
	MOV	#IENABL,@TTPS
.ENDC
.ASSUME	.-TTOENB EQ 6
1$:	RETURN
.SBTTL	PROCESS CTRL/F INPUT
CTRL.F::
.IF NE	SYT$K
	CLR	XFLAG
.ENDC
	MOV	FCNTXT,R0
	BEQ	2$
	BIT	#NORUN$,I.BLOK(R0)
	BEQ	XCOM
2$:	JSR	R5,ECHO
	 .BYTE	'F,'?
	.BR	ECHOCL
ECHOCL:	JSR	R5,ECHO
	 .BYTE	CR,LF
	RTS	PC
TTICCA::
.IF NE	MMG$T
	MOV	@#KISAR1,-(SP)
	MOV	I.SCCA+2(R5),@#KISAR1
.ENDC
	BIS	#100000,@R4
.IF NE	MMG$T
	MOV	(SP)+,@#KISAR1
.ENDC
TT3LNK:	BR	TTINC3
.IF EQ	HSR$B
.SBTTL	TERMINAL INPUT INTERRUPT PROCESSOR
TTIINT::
	JSR	R5,$INTEN
	 .WORD	^C<PR4>&PR7
	MOV	@TTKB,R4
	JSR	R3,SAVE30
TTIIN2::
.IFF
.SBTTL	TERMINAL INPUT CHARACTER FORK LEVEL PROCESSING
TTIIN2::
TTISTF:
.ENDC
	BIC	#^C<177>,R4
	BEQ	1$
	ADDR	LIST,R2
	MOV	R2,R3
	MOV	-(R3),R5
.IF NE	SCCA$G
	CMPB	R4,#CTRLC
	BNE	33$
	BITB	#CC$ALL,INDSTA
	BEQ	33$
	ADDR	BKGND,R1
	CMP	R5,R1
	BEQ	1$
33$:
.ENDC
	MOV	R5,R1
	ADD	#I.ICTR,R1
	MOV	R4,R0
	MOV	R3,R4
.IF NE	VT11$!VS60$
	JSR	PC,@SCLNK2
	BEQ	1$
.ENDC
.IF NE	SYT$K
	TSTB	XFLAG
	BNE	3$
.ENDC
	BIT	#TTLC$,I.TERM(R5)
	BNE	4$
3$:	CMPB	R0,#'A+40
	BLT	4$
	CMPB	R0,#'Z+40
	BGT	4$
	BICB	#40,R0
4$:
.DSABL	LSB
.ENABL	LSB
1$:	MOVB	(R2)+,R3
	BEQ	TTINCC
	ASLB	R3
	BEQ	TTIDSP
	CMPB	(R2)+,R0
	BNE	1$
	ADD	R3,PC
TTIBAS:
TTIERB:	CLR	@R5
	BR	ECHOCL
.SBTTL	PROCESS CTRL/S INPUT
CTRL.S::MOVB	TTCNFG,XEDOFF
	BMI	SCNOP
	.BR	TTIDSP
TTIDSP::
.IF NE	SYT$K
	TSTB	XFLAG
	BNE	XPROC
.ENDC
	BIT	#TTSPC$,I.TERM(R5)
	BEQ	1$
	BR	TTINC3
.SBTTL	PROCESS ALTMODE INPUT
ALT:	MOV	#ESCAPE,R0
.SBTTL	PROCESS ORDINARY INPUT CHARACTER
TTINCC::CMPB	I.PTTI(R5),#RUBOUT
	BNE	TTINC3
	TST	TTCNFG
	BMI	TTINC3
	JSR	R5,ECHO
	 .BYTE	'\,0
.SBTTL	PUT INPUT CHARACTER INTO RING AND ECHO
TTINC3::CMP	@R1,#TTYIN
	BGE	6$
	MOV	R0,R4
	INC	@R1
	INC	-(R1)
	CMP	@R1,I.ITOP-I.IPUT(R1)
	BNE	2$
	SUB	#TTYIN,@R1
2$:	MOVB	R0,@(R1)+
	JSR	PC,EOLTST
	BNE	3$
	INC	I.TTLC(R5)
	CMP	TTHIUS,R5
	BNE	3$
	JSR	PC,TTHIN
3$:	MOV	R0,I.PTTI(R5)
	JSR	R4,UNBLOK
	 .WORD	TTIWT$
	BIT	#TTSPC$,I.TERM(R5)
	BNE	4$
	JSR	PC,TTOPT3
4$:	ADD	#LF-CR,R0
	CMPB	#LF,R0
	BEQ	TTINC3
SCNOP::	RTS	PC
.IF NE	VT11$!VS60$
SCLNK2:: .WORD	SCNOP
.ENDC
.SBTTL	PROCESS CTRL/O INPUT
CTRL.O::ADD	#I.OCTR-I.ICTR,R1
	CLRB	(R1)+
	MOVB	@R1,-(SP)
	CLRB	(R1)+
	MOV	@R1,I.OPUT-I.OGET(R1)
	JSR	R5,ECHO0C
	 .BYTE	CR,LF
	COM	@SP
	MOVB	(SP)+,-(R1)
	BEQ	5$
	JSR	R4,UNBLOK
	 .WORD	TTOWT$!TTOEM$
5$:	RTS	PC
6$:	MOV	R0,I.PTTI(R5)
DING:	MOV	#BELL,R4
.IF NE	SYT$K
	JMP	TTOPT4
.IFF
	BR	TTOPT4
.ENDC
.DSABL	LSB
.ENABL	LSB
.SBTTL	PROCESS CTRL/U INPUT
CTRL.U::JSR	PC,ECHOR0
	.BR	RUB
.SBTTL	PROCESS RUBOUT INPUT
RUB:	ADD	#I.PTTI,R5
1$:	TST	@R1
TIERBL:	BEQ	TTIERB
	MOVB	@-(R1),R4
	JSR	PC,EOLTST
	BEQ	TTIERB
	CMP	@R1,-2(R1)
	BNE	2$
	ADD	#TTYIN,@R1
2$:	DEC	(R1)+
	DEC	@R1
3$:	CMPB	#CTRLU,R0
	BEQ	1$
4$:	TST	TTCNFG
	BPL	5$
	JSR	R5,ECHO
	 .BYTE	BS,40
	MOV	#BS,R4
	JMP	TTOPT4
5$:	MOV	R4,-(SP)
	CMPB	@R5,R0
	BEQ	6$
	MOV	R0,@R5
	JSR	R5,ECHO
	 .BYTE	'\,0
6$:	MOV	(SP)+,R0
	MOV	R0,R4
	BR	TTOPT3
.IF NE	SYT$K
ECHLNK:	JMP	ECHOCL
.SBTTL	XPROC - PROCESS ^X SEQUENCE CHARACTERS
XPROC::	ADDR	XPREV,R3
	CMPB	R0,#CTRLU
	BEQ	10$
	CMPB	R0,#RUBOUT
	BEQ	11$
	CMPB	@R3,#RUBOUT
	BNE	7$
	TST	TTCNFG
	BMI	7$
	JSR	R5,ECHO
	 .BYTE	'\,0
7$:	MOV	R0,R4
	CMPB	#CR,R0
	BEQ	8$
	JSR	PC,EOLTST
	BEQ	8$
	MOVB	-(R3),R1
	CMP	#6,R1
	BEQ	DING
	INC	R1
	MOVB	R1,(R3)+
	MOVB	R0,(R3)+
	ADD	R3,R1
	MOVB	R0,@R1
	JMP	TTOPT3
8$:	TST	(R3)+
	MOV	R3,R0
	JSR	PC,FNDJOB
	BEQ	9$
	MOV	R2,R0
	BIT	#NORUN$,I.BLOK(R0)
	BNE	9$
	CLR	XFLAG
	ADDR	TTOUSR,R4
	CLR	(R4)+
	JMP	XCOM
9$:	JSR	R5,ECHO
	.BYTE	'?,0
	JSR	PC,ECHOCL
	CLR	XFLAG
	RTS	PC
10$:	JSR	PC,ECHOR0
	DEC	R3
	JSR	PC,XRESET
	BR	ECHLNK
11$:	MOV	R3,R5
	MOVB	-(R3),R1
	BEQ	TIERBL
	ADD	R5,R1
	INC	R1
	MOVB	@R1,R4
	CLRB	@R1
	DECB	@R3
	BR	4$
.ENDC
.DSABL	LSB
.SBTTL	SPECIAL INPUT CHARACTER LIST
.MACRO	INLST	LOC,CHAR
...	= <LOC-TTIBAS>/2
.IF LT	...
.IIF LT ...+177, .ERROR
.IFF
.IIF GT ...-177, .ERROR
.ENDC
	.BYTE	...,CHAR
.ENDM	INLST
TTOID:	.WORD	0
TTOUSR::.WORD	BKGND
TTIUSR::.WORD	BKGND
LIST::	INLST	CTRL.C,'C-100
	INLST	CTRL.O,'O-100
	INLST	CTRL.S,'S-100
	INLST	CTRL.Q,'Q-100
LISTFB::INLST	CTRL.F,'F-100
	INLST	CTRL.B,'B-100
.IF NE	SYT$K
	INLST	CTRL.X,'X-100
.ENDC
	.BYTE	200
	INLST	CTRL.U,'U-100
	INLST	RUB,RUBOUT
	.BYTE	0,0
	.BYTE	0,0
	.BYTE	0
	.EVEN
.SBTTL	CHARACTER OUTPUT SUBROUTINES
.ENABL	LSB
.SBTTL	ECHOR0 - PRINT A CONTROL CHARACTER IN "^X" FORM
ECHOR0:	MOV	#'^,R4
	JSR	PC,TTOPT3
	MOV	R0,R4
	BIS	#100,R4
	.BR	TTOPT3
.SBTTL	TTOPT3 - PRINT A CHARACTER, CHECK FOR SPECIAL CHANGES
TTOPT3::CMPB	#CTRLC,R4
	BEQ	5$
	CMPB	#ESCAPE,R4
	BNE	1$
	MOV	#DOLLAR,R4
1$:	CMPB	#SPACE,R4
	BLOS	TTOPT4
	CMPB	#CR,R4
	BLO	ECHOR0
	CMPB	#TAB,R4
	BHI	ECHOR0
.SBTTL	TTOPT4 - PRINT A CHARACTER FOR TTIUSR
TTOPT4::MOV	TTIUSR,R2
	.BR	TTOPT2
.SBTTL	TTOPT2 - PRINT A CHARACTER FOR SPECIFIED USER
TTOPT2::ADD	#I.OCTR,R2
.IF NE	SYT$K
	TSTB	XFLAG
	BNE	2$
.ENDC
	TST	@R2
	BMI	5$
2$:	BICB	#^C<177>,R4
	CMPB	#TTYOUT-1,@R2
	BLO	5$
	CMP	I.OTOP-I.OCTR(R2),-(R2)
	BHI	3$
	SUB	#TTYOUT,@R2
3$:	MOVB	R4,@(R2)+
	INC	-(R2)
	INC	I.OCTR-I.OPUT(R2)
	JMP	TTOENB
.SBTTL	ECHO0C - PRINT CONTROL CHARACTER, THEN 1 OR 2 CONSTANT CHARACTERS
ECHO0C:	JSR	PC,ECHOR0
.SBTTL	ECHO0C - PRINT CONTROL CHARACTER, THEN 1 OR 2 CONSTANT CHARACTERS
ECHO::	MOVB	(R5)+,R4
	JSR	PC,TTOPT4
	MOVB	(R5)+,R4
	BEQ	4$
	JSR	PC,TTOPT4
4$:	RTS	R5
.SBTTL	EOLTST - TEST FOR END OF LINE
EOLTST:	CMPB	#LF,R4
	BEQ	5$
	CMPB	#CTRLZ,R4
	BEQ	5$
	CMPB	#CTRLC,R4
5$:	RTS	PC
.DSABL	LSB
.SBTTL	TTY OUTPUT INTERRUPT
.ENABL	LSB
1$:	DEC	NFILLS
NULHOK::
	CLR	@TTPB
.ASSUME	.-NULHOK EQ 4
	RETURN
TTOINT::JSR	R5,$INTEN
	 .WORD	^C<PR4>&PR7
 .ROM	TST	NFILLS
	BNE	1$
 .ROM	TSTB	XEDOFF
	BMI	15$
2$:	ADDR	FILCTR,R4
	INCB	@R4
	BMI	14$
	CLRB	(R4)+
	MOV	TTOID,R5
	BEQ	5$
3$:	MOVB	(R5)+,(R4)+
	BNE	4$
	CLR	R5
4$:	MOV	R5,TTOID
	BNE	14$
	DEC	R4
5$:	MOV	TTOUSR,R5
.IF NE	SYT$K
	TSTB	XFLAG
	BNE	TTONXT
.ENDC
	TSTB	I.OCTR(R5)
	BNE	6$
	JSR	R4,UNBLOK
	 .WORD	TTOEM$
6$:	CMPB	@R4,#LF
	BNE	9$
	MOV	IMPLOC,R4
7$:	MOV	-(R4),R5
	BEQ	7$
	CMP	#-1,R5
	BEQ	21$
	BIT	#NORUN$,I.BLOK(R5)
	BNE	7$
 .ROM	CMP	TTHOUS,R5
	BEQ	8$
	TSTB	I.OCTR(R5)
	BEQ	7$
8$:	ADDR	OUTCHR,R4
	CMP	TTOUSR,R5
	BEQ	9$
	MOV	R5,TTOUSR
	MOV	I.TID(R5),R5
	BR	3$
9$:	CMP	TTHOUS,R5
	BEQ	TTHOUT
..TTON	== .+4
TTONXT:	CMPB	I.OCTR(R5),#TTYOUT
	BNE	10$
	JSR	R4,UNBLOK
	 .WORD	TTOWT$
10$:	ADD	#I.OTOP,R5
	CMP	@R5,-(R5)
	BNE	11$
	SUB	#TTYOUT,@R5
11$:	TSTB	-2(R5)
.IF NE	SYT$K
	BEQ	22$
.IFF
	BEQ	21$
.ENDC
	MOVB	@(R5)+,@R4
TTOPUT:	BICB	#200,@R4
	CMPB	(R4)+,#SPACE
	BLO	16$
	CMPB	-1(R4),#RUBOUT
	BEQ	13$
	INCB	@R4
	BIT	#CRLF$,TTCNFG
	BEQ	13$
	CMPB	@R4,TTWIDTH
	BLOS	13$
	CLRB	@R4
	DEC	R4
	MOV	#177000+LF,-(R4)
	BR	14$
12$:	CMPB	(R4)+,#CR
	BNE	13$
	CLRB	@R4
13$:	INC	-(R5)
	DEC	-(R5)
PC1HOK::
14$:	MOVB	-(R4),@TTPB
.ASSUME	.-PC1HOK EQ 4
	CMPB	@R4,@#TTFILL
	BNE	15$
	MOVB	@#TTNFIL,NFILLS
15$:	RETURN
TTHOCM:	JSR	PC,TTCMPL
	BR	2$
16$:	CMPB	-(R4),#TAB
	BEQ	17$
	CMPB	(R4)+,#BS
	BEQ	20$
	CMPB	-(R4),#FF
	BNE	12$
	BIT	#FORM$,TTCNFG
	BNE	19$
	MOV	#<-8.*400>+LF,-(R4)
	BR	19$
17$:	BIT	#HWTAB$,TTCNFG
	BNE	18$
	MOV	@R4,-(R4)
	CLRB	@R4
	BIS	#<-8.*400>+40,@R4
18$:	ADD	#8.*400,LINPOS-1
	BIC	#7*400,LINPOS-1
19$:	INC	R4
	BR	13$
20$:	TST	TTCNFG
	BPL	13$
	DECB	@R4
	BR	13$
21$:
HKPC12::
.IF EQ	PDT$OP
	BIC	#TPS$MK,@TTPS
.IFF
	CLR	@TTPS
	NOP
.ENDC
.ASSUME	.-HKPC12 EQ 6
	RETURN
.IF NE	SYT$K
22$:	TSTB	XFLAG
	BPL	21$
	ASLB	XFLAG
	ADDR	XPROMT,R5
	MOV	R5,TTOID
	JMP	3$
.ENDC
.DSABL	LSB
.SBTTL	RESIDENT TT: OUTPUT INTERRUPTS
.ENABL	LSB
TTHOUT:	TST	I.OCTR(R5)
	BMI	TTHOCM
	BEQ	1$
	BIT	#WRWT$,I.TERM(R5)
	BEQ	TTONXT
1$:	BIS	#WRWT$,I.TERM(R5)
	MOV	TTCQE,R5
	ADD	#Q.BUFF-Q.BLKN,R5
2$:	TST	(R5)+
	BEQ	TTHOCM
.IF NE	MMG$T
	MOV	@#KISAR1,-(SP)
	BIT	#40000,@R5
	BEQ	3$
	SUB	#20000,@R5
	ADD	#200,Q.PAR-Q.WCNT(R5)
3$:	MOV	Q.PAR-Q.WCNT(R5),@#KISAR1
.ENDC
	MOVB	@(R5)+,@R4
.IF NE	MMG$T
	MOV	(SP)+,@#KISAR1
	TST	@R4
.ENDC
	BNE	TTOPUT
	INC	-(R5)
	DEC	-(R5)
	BR	2$
.DSABL	LSB
.IF NE	HSR$B
.SBTTL	HIGH SPEED RING BUFFER FOR TERMINAL INPUT
TTIINT::MOV	R0,-(SP)
PHSRRT	== .+2
	MOV	#HSRB,R0
	MOVB	@TTKB,@(R0)+
	INC	-(R0)
	CMP	(R0)+,(R0)+
	BLO	1$
	MOV	@R0,HSRB
1$:	MOV	(SP)+,R0
	INC	HSRBCC
	BEQ	2$
	RTI
2$:	JSR	R5,$INTEN
	 .WORD	^C<PR4>&PR7
	JSR	R5,$FORK
	 .WORD	TIFBLK-.
PHSRRB	== .+2
3$:	MOV	#HSRBGP,R5
	MOVB	@(R5)+,R4
	INC	-(R5)
	CMP	@R5,HSRBEP
	BLO	4$
	MOV	HSRBRP,@R5
4$:	JSR	PC,TTISTF
	DEC	HSRBCC
	BPL	3$
	RTS	PC
HSRB::	.WORD	HSRBUF
HSRBEP::.WORD	HSRBUE
HSRBRP::.WORD	HSRBUF
HSRBCC::.WORD	-1
HSRBGP::.WORD	HSRBUF
HSRBUF::.BLKB	HSRBSZ
HSRBUE::
TIFBLK::BSS	F.BSIZ/2
.ENDC
.ENDC
.SBTTL	.SPFUN	- SPECIAL I/O FUNCTION EMT
.ENABL	LSB
S$PFUN:	MOV	@R3,R2
	BPL	8$
	BIC	#^C<INDX$M>,R2
	ADD	PC,R2
	BIT	$STAT-.(R2),#SPFUN$
	BEQ	RWXT
	CMP	(R1)+,(R1)+
	TST	@R1
	BPL	RWXTE0
	MOVB	#377,@R1
	MOV	2(R1),R2
	JSR	R4,TSWSPC
	 NOP
	 NOP
	BR	SPREAD
.SBTTL	.RCVD	- RECEIVE DATA EMT
R$CVD:	JSR	PC,MSGSET
	BCS	5$
	.BR	R$EAD
.SBTTL	.READ(W,C) - READ FROM DEVICE EMT
R$EAD:	MOV	4(R1),R2
	JSR	R4,TSWCNT
	 NOP
	 NOP
SPREAD:	MOV	R4,@SP
1$:	TST	-(R1)
	BIT	#HDERR$,@R3
	BNE	6$
	BIT	#EOF$,@R3
	BNE	4$
	MOV	R1,R5
	MOV	@R3,R2
	BIC	#^C<INDX$M>,R2
	ADD	PC,R2
	MOV	$ENTRY-.(R2),R2
	BEQ	2$
	ADD	C.SBLK(R3),R0
	MOV	C.DEVQ(R3),R1
	JSR	PC,QMANGR
	BIT	#HDERR$,@R3
	BNE	6$
	BIT	#EOF$,@R3
	BNE	4$
RWXT:	MOV	#3,R2
	JMP	EMTDON
2$:	MONERR	NODV
	BR	RWXT
3$:	TST	(SP)+
	CLR	@SP
4$:	BIC	#EOF$,@R3
RWXTE0:
5$:	EMTERR+0
	BR	9$
6$:	BIC	#HDERR$,@R3
	EMTERR+1
	BR	RWXT
7$:	TST	(SP)+
8$:	EMTERR+2
9$:	CLR	@SP
	BR	RWXT
.SBTTL	.SDAT/.RCVD COMMON SET UP
MSGSET:	JSR	PC,OTHRJB
	BCS	12$
	MOV	R5,R3
	ADD	#I.MSG,R3
12$:	RTS	PC
.SBTTL	.SDAT - SEND DATA EMT
S$DAT:	JSR	PC,MSGSET
	BCS	5$
	.BR	W$RITE
.SBTTL	.WRIT(W,E,C) - WRITE TO I/O DEVICE EMT
W$RITE:	MOV	4(R1),R2
	JSR	R4,TSWCNT
	 BR	NFWRIT
	 EMTERR+0
	CMP	R5,C.USED(R3)
	BLOS	NFWRIT
	BIT	#DWRIT$,@R3
	BEQ	NFWRIT
	MOV	R5,C.USED(R3)
NFWRIT:	MOV	R4,@SP
	NEG	R4
	BR	1$
.SBTTL	TSWCNT - READ/WRITE COMMON ROUTINE
TSWCNT::MOV	(R1)+,@SP
	MOV	(R1)+,-(SP)
	BEQ	10$
	DEC	@SP
	ASL	@SP
10$:	ADD	(SP)+,@SP
	JSR	R5,CHKSP
	 BR	TSERR
TSWSPC:	CMP	R2,#1
	BLOS	11$
	MOV	R2,@SP
	JSR	R5,CHKSP
	 BR	TSERR
11$:	MOV	-(R1),R5
	MOV	R5,@SP
	MOV	@R3,R2
	BPL	7$
	BIC	#^C<INDX$M>,R2
	ADD	PC,R2
	TST	$STAT-.(R2)
	BPL	TSWOUT
	BIC	#EOF$,@R3
	TST	C.SBLK(R3)
	BEQ	TSWOUT
	CMP	(R4)+,(R4)+
	MOV	C.LENG(R3),R2
	CMP	R0,R2
	BHIS	3$
	ADD	#377,R5
	CLRB	R5
	SWAB	R5
	ADD	R0,R5
	SUB	R5,R2
	BHIS	TSWOUT
	ADD	R2,R5
	MOV	R5,@SP
	SUB	R0,@SP
	SWAB	@SP
	TST	-(R4)
TSWOUT:	RTS	R4
TSERR:	TST	(SP)+
	MONERR	ADDR
	BR	RWXT
.DSABL	LSB
.SBTTL	.SAVES	- SAVE STATUS OF OPEN CHANNEL EMT
S$AVST:	MOV	@R3,R4
	BPL	1$
	TSTB	R4
	BMI	E5ER1
1$:
.IF NE	MMG$T
	MOV	#CHNBYT,R1
	JSR	PC,ACHBKM
	BCS	ADERR
.ENDC
	MOV	R4,(R0)+
	CLR	(R3)+
.REPT	CHNWDS-1
	 MOV	(R3)+,(R0)+
.ENDR
	TST	R4
	BPL	E5ER0
XCLOSE:	JMP	EMTRTI
.SBTTL	.REOPEN	- REOPEN CHANNEL AFTER SAVESTATUS EMT
R$OPEN:	TST	@R3
	BMI	E5ER0
.IF NE	MMG$T
	MOV	#CHNBYT,R1
	JSR	PC,ACHBKM
	BCS	ADERR
.ENDC
.REPT	CHNWDS
	 MOV	(R0)+,(R3)+
.ENDR
	BR	XCLOSE
E5ER0:	EMTERR+0
	BR	XCLOSE
ADERR::	MONERR	ADDR
	BR	XCLOSE
.SBTTL	.MWAIT	- WAIT FOR MESSAGE TRAFFIC COMPLETE EMT
M$WAIT:	MOV	R5,R3
	ADD	#I.MSG,R3
	.BR	W$AIT
.SBTTL	.WAIT	- WAIT FOR I/O ON CHANNEL TO COMPLETE EMT
W$AIT:	TST	@R3
	BPL	E5ER0
	JSR	PC,CHWAIT
	BIT	#HDERR$,@R3
	BEQ	XCLOSE
	DEC	@R3
.ASSUME	HDERR$	EQ	1
E5ER1:	EMTERR+1
	BR	XCLOSE
.SBTTL	.GTJB	- GET JOB PARAMETERS EMT
G$TJB::	NEG	R4
.IF EQ	SYT$K
	BCC	4$
	BIT	#^C<2>,@R1
	BNE	4$
	MOV	@R1,R5
	ADD	PC,R5
	MOV	$IMPUR-.(R5),R5
	BEQ	E5ER0
.IFF
	MOV	#J.BLGH,R4
	BCC	4$
	CMP	@R1,#-3
	BEQ	4$
	ADD	#4*2,R4
1$:	CMP	@R1,#-1
	BEQ	4$
	MOV	R0,R3
	CMP	@R1,#MXJBNM
	BLOS	2$
	MOV	@R1,R0
.IF NE MMG$T
	JSR	PC,ACHJBM
.ENDC
	JSR	PC,FNDJOB
	BNE	3$
	BR	E5ER0
2$:	MOV	@R1,R5
	BIT	#1,R5
	BNE	E5ER0
	ADDR	$IMPUR,R5,ADD
3$:	MOV	@R5,R5
	BEQ	E5ER0
	MOV	R3,R0
.ENDC
4$:
.IF NE	MMG$T
.IF NE	SYT$K
	MOV	R4,R1
.IFF
	MOV	#J.BLGH,R1
.ENDC
	JSR	PC,ACHBKM
	BCS	ADERR
.ENDC
.IF NE	SYT$K
	ADD	R0,R4
.ENDC
	MOV	I.JNUM(R5),R1
	MOV	R1,(R0)+
	ASL	R1
	ADDR	$JBLIM,R1,ADD
.IF NE	MMG$T
	BIT	#VRUN$,@CNTXT
	BEQ	40$
	MOV	#160000,(R0)+
	TST	(R1)+
	BR	45$
.ENDC
40$:	MOV	(R1)+,(R0)+
45$:	MOV	(R1)+,(R0)+
	MOV	I.CSW(R5),(R0)+
	MOV	R5,(R0)+
.IF NE MTT$Y
	MOV	I.CLUN(R5),(R0)+
.IFF
	CLR	(R0)+
.ENDC
.IF NE MMG$T
	MOV	I.VHI(R5),(R0)+
.IFF
	CLR	(R0)+
.ENDC
.IF NE	SYT$K
	CMP	(R0)+,(R0)+
	CMP	R0,R4
	BHI	XCLOSE
	ADD	#I.LNAM,R5
	TST	I.JNUM-I.LNAM(R5)
	BNE	5$
	TST	KMONIN
	BEQ	5$
	CLR	(R0)+
	CLR	(R0)+
	CLR	(R0)+
	BR	6$
5$:	MOV	(R5)+,(R0)+
	MOV	(R5)+,(R0)+
	MOV	(R5)+,(R0)+
6$:
.ENDC
	BR	XCLOSE
.SBTTL	.CSTAT	- GET STATUS OF CHANNEL EMT
.ENABL	LSB
C$STAT:	MOV	@R3,R4
	BIC	#^C<INDX$M>,R4
.IF NE	MMG$T
	MOV	#6*2,R1
	JSR	PC,ACHBKM
1$:	BCS	ADERR
.ENDC
	MOV	(R3)+,(R0)+
2$:	BPL	E5ER0
	MOV	(R3)+,(R0)+
	MOV	(R3)+,(R0)+
	MOV	(R3)+,(R0)+
	MOV	@R3,@R0
	CLRB	@R0
	SWAB	(R0)+
	ADD	PC,R4
	MOV	$PNAME-.(R4),(R0)+
3$:	JMP	XCLOSE
.IF NE	SPC$PS
.SBTTL	.SPCPS	- SAVE/SET MAIN-LINE PC/PS
S$PCPS:
.IF NE	MMG$T
	MOV	#3*2,R1
	JSR	PC,ACHBKM
	BCS	1$
.ENDC
	TST	@R5
	BPL	2$
	TST	I.SPCP(R5)
	BNE	4$
	CMP	(R0)+,(R0)+
	MOV	R0,I.SPCP(R5)
.IF NE	MMG$T
	MOV	@#KISAR1,I.SPC1(R5)
.ENDC
	BR	3$
4$:	EMTERR+1
	BR	3$
.ENDC
.DSABL	LSB
.SBTTL	CHKSP - CHECK USER ADDRESS FOR BOUNDS AND EVENNESS
.IF EQ	MMG$T
CHKSP::	MOV	R2,-(SP)
	MOV	4(SP),-(SP)
	BEQ	2$
	BIT	#<USRRN$!CSIRN$!BATRN$!CMPLT$>,@CNTXT
	BNE	2$
	BIT	#1,@SP
	BNE	3$
	MOV	JOBNUM,R2
	BNE	1$
	TST	KMONIN
	BNE	2$
1$:	ASL	R2
	ADDR	$JBLIM,R2,ADD
	CMP	@SP,(R2)+
	BHIS	3$
	CMP	@SP,@R2
	BLO	3$
2$:	TST	(R5)+
3$:	TST	(SP)+
	MOV	(SP)+,R2
	RTS	R5
.IFF
CHKSP::	MOV	R2,-(SP)
	MOV	R1,-(SP)
	MOV	R0,-(SP)
	MOV	10(SP),R0
	BEQ	3$
	BIT	#<USRRN$!CSIRN$!BATRN$!CMPLT$>,@CNTXT
	BNE	3$
	BIT	#1,R0
	BNE	4$
	BIT	#WINDW$,@CNTXT
	BNE	2$
	JSR	PC,$USRPH
	BCS	2$
	MOV	R2,R0
	MOV	JOBNUM,R2
	BNE	1$
	TST	KMONIN
	BNE	3$
1$:	ASL	R2
	ADDR	$JBLIM,R2,ADD
	CMP	R0,(R2)+
	BHIS	4$
	CMP	R0,@R2
	BHIS	3$
	BR	4$
2$:	MOV	#2,R1
	JSR	PC,ACHBK
	BCS	4$
3$:	TST	(R5)+
4$:	MOV	(SP)+,R0
	MOV	(SP)+,R1
	MOV	(SP)+,R2
	RTS	R5
.ENDC
.SBTTL	OTHRJB - GET POINTER TO OTHER JOB'S IMPURE AREA
	.ENABL	LSB
OTHRJB::MOV	JOBNUM,R2
.IF NE	SYT$K
	BEQ	1$
	CMP	R2,#MXJBNM
	BNE	2$
1$:
.ENDC
	NEG	R2
	ADD	PC,R2
	MOV	$IMPUR+MXJBNM-.(R2),R2
	BEQ	2$
	BIT	#NORUN$,I.BLOK(R2)
	BEQ	3$
ERRRTN:	NOP
	NOP
2$:	CMP	(PC)+,PC
3$:	CLC
	RETURN
	.DSABL	LSB
.SBTTL	SAVE REGISTERS 3-0
SAVE30::MOV	R2,-(SP)
	MOV	R1,-(SP)
	MOV	R0,-(SP)
	JSR	PC,@R3
	MOV	(SP)+,R0
	MOV	(SP)+,R1
	MOV	(SP)+,R2
	MOV	(SP)+,R3
	RTS	PC
.IF NE	SYT$K
.SBTTL	FNDJOB - CONVERT TASKNAME TO POINTER TO IMPURE POINTER
	.ENABL	LSB
FNDJOB::MOV	IMPLOC,R5
	MOV	#<6>,R2
	MOV	R0,-(SP)
5$:	CMPB	@R0,#<'A+40>
	BLT	10$
	CMPB	@R0,#<'Z+40>
	BGT	10$
	BICB	#<40>,@R0
10$:	TSTB	(R0)+
	DEC	R2
	BNE	5$
	MOV	(SP)+,R0
	CMP	#'F,@R0
	BNE	15$
	MOV	-(R5),R2
	BR	35$
15$:	MOV	#I.LNAM,-(SP)
20$:	CMP	#-1,-(R5)
	BEQ	30$
	MOV	@R5,R2
	BEQ	20$
	ADD	@SP,R2
	CMP	(R2)+,@R0
	BNE	20$
	CMP	(R2)+,2(R0)
	BNE	20$
	CMP	(R2)+,4(R0)
	BNE	20$
	MOV	@R5,R2
	TST	I.JNUM(R2)
	BNE	25$
	TST	KMONIN
	BNE	20$
25$:	TST	(SP)+
	BR	35$
30$:	TST	(R5)+
	MOV	@R5,R2
	CMP	#'B,@R0
	BEQ	25$
	CLR	(SP)+
35$:	RETURN
	.DSABL	LSB
.ENDC
.SBTTL	MESSAGE HANDLER
.ENABL	LSB
	.WORD	0,0
MQLQE::	.WORD	0
MQCQE::	.WORD	0
	TST	-(R1)
	MOV	R1,-(SP)
	MOV	@R1,R3
	MOVB	Q.FUNC-Q.BLKN(R3),R4
	BNE	MQUSR
	MOVB	Q.JNUM-Q.BLKN(R3),R4
	ASR	R4
	ASR	R4
	ASR	R4
	BIC	#^C<MXJBNM>,R4
	MOVB	R4,Q.FUNC-Q.BLKN(R3)
	MOV	Q.CSW-Q.BLKN(R3),R1
	MOVB	C.UNIT(R1),R1
	BIC	#177400,R1
	TST	Q.WCNT-Q.BLKN(R3)
	BEQ	MQFIN
	BPL	2$
	MOV	R1,R2
	CMP	R2,#200
	BNE	1$
	JMP	CHANER
1$:	MOV	R4,R1
	BIS	#100000,R1
	MOV	R2,R4
2$:	MOV	R1,@R3
	ADDR	MSGQ+4,R4,ADD
	BR	4$
3$:	MOV	R0,R4
4$:	CMP	-(R4),-(R4)
	MOV	@R4,R0
	BEQ	10$
	CMPB	@R3,@R0
	BEQ	5$
	TSTB	@R0
	BMI	6$
	TSTB	@R3
	BPL	3$
5$:	TST	@R0
	BPL	6$
	TST	@R3
	BPL	7$
	BR	3$
6$:	TST	@R3
	BMI	8$
	BR	3$
7$:	MOV	R3,R0
	MOV	@R4,R3
8$:	CMP	(R3)+,(R3)+
	CMP	(R0)+,(R0)+
	MOV	(R3)+,R1
	MOV	(R0)+,R2
.IF EQ	MMG$T
	MOV	@R3,@R2
	NEG	(R2)+
	MOV	@R0,R0
9$:	MOV	(R1)+,(R2)+
	SOB	R0,9$
.IFF
.IF EQ	MQH$P2
	MOV	#KISAR1,R5
	MOV	@R5,-(SP)
	MOV	Q.PAR-Q.WCNT(R3),@R5
	MOV	@#UISAR1,-(SP)
	MOV	@#UISDR0+2,-(SP)
	MOV	Q.PAR-Q.WCNT(R0),@#UISAR1
	MOV	#77406,@#UISDR0+2
	MOV	@R3,-(SP)
	NEG	@SP
	PUT	(SP)+,(R2)+
	MOV	@R0,R0
9$:	PUT	(R1)+,(R2)+
	SOB	R0,9$
	MOV	(SP)+,@#UISDR0+2
	MOV	(SP)+,@#UISAR1
	MOV	(SP)+,@R5
.IFF
	MOV	#KISAR1,R5
	MOV	(R5)+,-(SP)
	MOV	@R5,-(SP)
	MOV	Q.PAR-Q.WCNT(R0),@R5
	ADD	#20000,R2
	MOV	Q.PAR-Q.WCNT(R3),-2(R5)
	MOV	@R3,@R2
	NEG	(R2)+
	MOV	@R0,R0
9$:	MOV	(R1)+,(R2)+
	SOB	R0,9$
	MOV	(SP)+,@R5
	MOV	(SP)+,-(R5)
.ENDC
.ENDC
	MOV	@R4,R0
	MOV	Q.LINK-Q.BLKN(R0),@R4
	CLR	Q.LINK-Q.BLKN(R0)
	MOV	@SP,R4
	MOV	@R4,R3
	MOV	R0,@R4
	CLRB	Q.FUNC-Q.BLKN(R0)
	JSR	PC,COMPLT
	MOV	R3,@(SP)
	CLRB	Q.FUNC-Q.BLKN(R3)
MQFIN:	MOV	(SP)+,R4
	JMP	COMPLT
10$:	MOV	R3,@R4
	CLR	-4(R3)
	MOV	(SP)+,R0
	CLR	@R0
	CLR	-(R0)
	RTS	PC
.DSABL	LSB
.SBTTL	MQUSR - HANDLE USR OPERATIONS FOR MESSAGE HANDLER
.ENABL	LSB
MQUSR::	CMP	R4,#3
	BLT	MQFIN
	CMP	R4,#4
	BGT	MQFIN
.IF NE	SYT$K
.IF NE	MMG$T
	MOV	@#KISAR1,-(SP)
	MOV	Q.PAR-Q.BLKN(R3),@#KISAR1
.ENDC
	MOV	Q.BUFF-Q.BLKN(R3),R0
	MOV	@R0,R5
	BEQ	1$
	JSR	PC,FNDJOB
	BNE	2$
.IFTF
MQER1:	MOV	#1,SPUSR
.IFF
	BR	MQFIN
.IFT
	BR	MQUNM
1$:	CMP	R4,#4
	BEQ	MQER1
	RORB	R5
	BR	3$
2$:	BIT	#NORUN$,I.BLOK(R2)
	BNE	MQER1
	MOVB	I.JNUM(R2),R5
3$:	MOV	-(R3),R3
	MOVB	R5,C.UNIT(R3)
MQUNM:
.IF NE	MMG$T
	MOV	(SP)+,@#KISAR1
.ENDC
	BR	MQFIN
.ENDC
.DSABL	LSB
.SBTTL	MQABRT - FLUSH MESSAGE QUEUE ON ABORT
.ENABL	LSB
MQABRT::MOV	CNTXT,R0
	JSR	R3,1$
MSGQ::
.REPT	MXJBNM/2+1
	 .WORD	0
.ENDR
	 .WORD -1
3$:	MOV	R2,R1
5$:	MOV	@R2,R2
	BNE	2$
1$:	MOV	R3,R1
	MOV	(R3)+,R2
	BEQ	1$
	CMP	R2,#-1
	BEQ	4$
2$:	CMP	-(R2),-(R2)
	CMPB	Q.FUNC(R2),JOBNUM
	BNE	3$
	MOV	Q.CSW(R2),R4
	DECB	C.DEVQ(R4)
	DEC	I.IOCT(R0)
	MOV	@R2,@R1
	BR	5$
4$:	MOV	(SP)+,R3
	RTS	PC
.DSABL	LSB
.SBTTL	SYSTEM I/O HANDLER
$SYSSW:	MOV	$SWPBL,R0
$SYS::	JSR	R3,SAVE30
	MOV	CNTXT,R3
	MOV	I.SCHP(R3),R3
	MOV	R4,-(SP)
	MOV	R5,-(SP)
	MOV	SYUNIT,R1
 .ROM	MOV	SYENTR,R2,GLOBAL=YES
	MOV	2(R5),R4
.IF NE	MMG$T
	CALL	KPSAVE
.ENDC
	JSR	PC,QMANGR
.IF NE	MMG$T
	CALL	KPREST
.ENDC
	MOV	(SP)+,R5
	MOV	(SP)+,R4
.IF EQ	MMG$T
	ROR	@R3
.IFF
	MOV	@R3,-(SP)
	BIC	#HDERR$,@R3
	ROR	(SP)+
.ENDC
.ASSUME	HDERR$	EQ	1
	RTS	PC
.SBTTL	QUEUE MANAGER
.ENABL	LSB
QMANGR::MOV	R4,-(SP)
	MOV	R1,-(SP)
	MOV	CNTXT,R1
	TST	(R1)+
QGTELT:	SPL	7
	MOV	@R1,R4
	BEQ	QFULL
	CMPB	#255.,C.DEVQ(R3)
	BEQ	QFULL
	MOV	@R4,@R1
	SPL	0
	CLR	(R4)+
	MOV	R3,(R4)+
	INCB	C.DEVQ(R3)
	MOV	R0,(R4)+
	MOV	(SP)+,@R4
	CLRB	@R4
	MOV	JOBNUM,R0
	SWAB	R0
	ASL	R0
	ASL	R0
	ASL	R0
	BIS	R0,(R4)+
.IF EQ MMG$T
	MOV	(R5)+,(R4)+
.IFF
	MOV	R0,-(SP)
	MOV	R1,-(SP)
	MOV	R2,-(SP)
	MOV	(R5)+,R0
	BIT	#PMODE,@#PS
	BNE	1$
	JSR	PC,$RELOK
	BR	2$
1$:	JSR	PC,$RELOC
2$:	MOV	R2,(R4)+
	MOV	R1,Q.PAR-Q.WCNT(R4)
	MOV	(SP)+,R2
	MOV	(SP)+,R1
	MOV	(SP)+,R0
.ENDC
	MOV	(SP)+,(R4)+
	TST	(R5)+
	MOV	(R5)+,@R4
	CMPB	@R4,#377
	BNE	3$
	MOVB	1(R4),Q.FUNC-Q.COMP(R4)
	MOV	(R5)+,@R4
3$:	ADD	#Q.BLKN-Q.COMP,R4
	MOV	R3,-(SP)
	ENSYS	7$
	INC	I.IOCT-I.QHDR(R1)
.IF NE	MMG$T
	CALL	KPSAVE
.ENDC
REQUE:	MOV	R2,R1
	BIS	#100000,-(R1)
	TST	(R2)+
	BNE	4$
	CLR	(R1)+
	MOV	R4,(R1)+
	MOV	R4,(R1)+
	CALL	@R1
.IF EQ	MMG$T
	RETURN
.IFF
	BR	10$
.ENDC
	BR	REQUE
4$:	MOV	@R2,R5
5$:	MOV	R5,R2
	CMP	-(R2),-(R2)
	MOV	@R2,R5
	BEQ	6$
	CMP	2(R5),R0
	BHIS	5$
6$:	MOV	R5,Q.LINK-Q.BLKN(R4)
	MOV	R4,@R2
	ASL	@R1
	BPL	10$
	CLR	(R1)+
	TST	(R1)+
	CALL	CMPLT2
	BR	10$
7$:	MOV	(SP)+,R3
	TST	-(R5)
	BNE	8$
CHWAIT::MOV	CNTXT,R1
	MOV	R3,I.CHWT(R1)
	JSR	R4,$SYSWT
	 .WORD	CHNWT$
	MOVB	C.DEVQ(R3),R2
	NEGB	R2
	JSR	PC,@(SP)+
.IF EQ	MMG$T
10$:
.ENDC
8$:	RTS	PC
QFULL:	SPL	0
USWAPO:	ENSYS	QGTELT
QWAIT::	MOV	JOBNUM,R5
	BEQ	9$
	TST	-(R5)
9$:	JMP	$RQSIG
.IF NE	MMG$T
10$:	CALL	KPREST
	RTS	PC
.ENDC
.DSABL	LSB
.SBTTL	QUEUE COMPLETION
.ENABL	LSB
COMPLT::ASR	-4(R4)
	BMI	8$
	JSR	R3,SAVE30
	MOV	R4,R1
CMPLT2:	MOV	@R1,R4
	MOV	-(R4),R3
	TSTB	Q.FUNC-Q.CSW(R4)
	BLE	1$
	MOV	Q.WCNT-Q.CSW(R4),SPSIZE
1$:	MOVB	Q.JNUM-Q.CSW(R4),R5
	ASR	R5
	ASR	R5
	ASR	R5
	BIC	#^C<16>,R5
	ADD	PC,R5
	MOV	$IMPUR-.(R5),R5
	DECB	C.DEVQ(R3)
	BNE	2$
	CMP	R3,I.CHWT(R5)
	BNE	2$
	JSR	R4,UNBLOK
	 .WORD	CHNWT$
2$:	DEC	I.IOCT(R5)
	BNE	3$
	JSR	R4,UNBLOK
	 .WORD	EXIT$
3$:	MOV	-(R4),(R1)+
	BEQ	4$
	MOV	R1,-(SP)
	BR	5$
4$:	MOV	-(R1),-(R1)
5$:	CMP	Q.COMP(R4),#1
	BLOS	AQLINK
	BIT	#<ABPND$!ABORT$>,@R5
	BNE	AQLINK
	MOV	@R3,Q.BUFF(R4)
	SUB	I.CSW(R5),R3
	MOV	R3,Q.WCNT(R4)
	TST	(R5)+
	MOV	R5,R2
	MOV	I.JNUM-2(R5),R5
	JSR	PC,$RQTSW
	MOV	R2,R5
	BIS	#CPEND$,-(R2)
CQLINK::TST	(R5)+
	CLR	@R4
	GETPSW
	SPL	7
	MOV	(R5)+,R0
	BNE	6$
	MOV	R5,R0
6$:	MOV	R4,@R0
7$:	MOV	R4,-(R5)
	PUTPSW
8$:	RTS	PC
AQLINK::TST	(R5)+
	GETPSW
	SPL	7
	MOV	(R5)+,@R4
	BR	7$
$SYNCH::TST	Q.COMP(R4)
	BNE	9$
	CMP	(R5)+,(SP)+
	MOV	R5,Q.COMP(R4)
	MOV	#-1,Q.WCNT(R4)
	MOV	2(R4),R5
	BIT	#^C<MXJBNM>,R5
	BNE	8$
	JSR	PC,$RQTSW
	ADD	PC,R5
	MOV	$IMPUR-.(R5),R5
	BEQ	8$
	BIT	#<ABPND$!ABORT$>,@R5
	BNE	8$
	BIT	#NORUN$,I.BLOK(R5)
	BNE	8$
	BIS	#CPEND$,@R5
	ADD	#I.CMPL,R5
	GETPSW
	SPL	7
	MOV	(R5)+,@R4
	BNE	7$
	MOV	R4,-(R5)
	BR	7$
9$:	RTS	R5
.DSABL	LSB
.SBTTL	.GTIM	- GET TIME OF DAY EMT
.ENABL	LSB
G$TIM::
.IF NE	MMG$T
	JSR	PC,ACHBK2
	BCC	1$
	JMP	ADERR
1$:
.ENDC
	ENSYS	EMTRTI
GTIHOK::
2$:	ADDR	$TIME+2,R1
	MOV	PSCLKH,(R0)+
	MOV	PSCLOK,@R0
	ADD	@R1,@R0
	ADC	-(R0)
	ADD	-(R1),@R0
	CMP	(R0)+,(PC)+
GTM.HI:: .WORD	TIMHI
	BLO	5$
	BHI	3$
	CMP	@R0,GTM.LO
	BLO	5$
3$:	SUB	GTM.HI,(R1)+
	SUB	(PC)+,@R1
GTM.LO:: .WORD	TIMLO
	SBC	-(R1)
	TST	-(R0)
.IF EQ	ROL$OV
	ADD	#40,$DATE
	BR	2$
.IFF
ROLOVR::MOV	$DATE,R1
	BEQ	2$
	MOV	R1,-(SP)
	MOV	R1,-(SP)
	ASR	R1
	ASR	R1
	SWAB	R1
	BIC	#^C<17>,R1
	ADD	PC,R1
	MOVB	DAYTBL-.-1(R1),R1
	CMPB	R1,#28.
	BNE	NOLEAP
	BIT	#3,@SP
	BNE	NOLEAP
	INCB	R1
NOLEAP:	ASL	@SP
	ASL	@SP
	ASL	@SP
	SWAB	@SP
	BICB	#^C<37>,@SP
	CMPB	(SP)+,R1
	BHIS	LSTDAY
	ADD	#40,@SP
	BR	4$
LSTDAY:	BIC	#<31.*40>,@SP
	ADD	#<1*40>+<1*2000>,@SP
	CMP	@SP,#<13.*2000>
	BLO	4$
	BIC	#<31.*2000>,@SP
	ADD	#2001,@SP
4$:	MOV	(SP)+,$DATE
	BR	2$
DAYTBL:	.BYTE	31.,28.,31.,30.,31.,30.
	.BYTE	31.,31.,30.,31.,30.,31.
.ENDC
.SBTTL	.CMKT	- CANCEL MARK TIME EMT
C$MKT:	ENSYS	EMTRTI
	MOV	JOBNUM,R2
	MOV	@R1,R5
	MOV	#177377,R1
	JSR	PC,CMARKT
	BCC	5$
SYSER0:
.IF EQ	MMG$T
	MOV	TASKSP,R0
	INC	<1+6+4>*2(R0)
.IFF
	BIS	#1,SAVEST+16(SP)
.ENDC
5$:	RTS	PC
.SBTTL	CMARKT - CANCEL ONE OR ALL TIMER REQUESTS FOR A JOB
CMARKT::ADDR	LKQUE+2,R4
	MOV	R2,-(SP)
6$:	MOV	R4,R3
7$:	MOV	-(R3),R4
	BEQ	12$
	ADD	#C.JNUM,R4
	CMP	@SP,@R4
	BNE	6$
	TST	R0
	BNE	8$
	CMP	C.SEQ-C.JNUM(R4),#177377
	BLOS	9$
	CMP	R1,#177777
	BNE	6$
	CMP	C.SEQ-C.JNUM(R4),#177700
	BHIS	9$
8$:	CMP	R0,C.SEQ-C.JNUM(R4)
	BNE	6$
9$:	MOV	-(R4),(R3)+
	MOV	-(R4),R2
	TST	-(R4)
	TST	R0
CMTHOK::
	BEQ	10$
	TST	R5
	BEQ	10$
	SUB	PSCLOK,R2
.IF EQ	MMG$T
	MOV	@R4,@R5
	SBC	(R5)+
	MOV	R2,@R5
.IFF
	MOV	@R4,-(SP)
	SBC	@SP
	PUT	(SP)+,(R5)+
	PUT	R2,@R5
.ENDC
10$:	CMP	#-1,C.SYS(R4)
	BEQ	11$
	MOV	CNTXT,R5
	JSR	PC,AQLINK
11$:	TST	R0
	BEQ	7$
	TST	(SP)+
	RTS	PC
12$:	MOV	R0,@SP
	NEG	(SP)+
	RTS	PC
.DSABL	LSB
.SBTTL	.SDTTM	- SET DATE AND/OR TIME
S$DTTM::
.IF NE	MMG$T
	MOV	#3*2,R1
	JSR	PC,ACHBKM
	BCS	SYSER0
.ENDC
	ENSYS	EMTRTI
	MOV	(R0)+,R1
	BLE	1$
	MOV	R1,$DATE
1$:	MOV	(R0)+,R1
	BMI	2$
	MOV	@R0,R0
	SUB	PSCLOK,R0
	SBC	R1
	SUB	PSCLKH,R1
	MOV	R0,$TIME+2
	MOV	R1,$TIME
2$:	RTS	PC
	.SBTTL	Set file date and protection
	.ENABL	LSB
S$FDAT:	ADDR	FIXDAT,R5
	MOV	@R1,-(SP)
	BNE	1$
	MOV	$DATE,@SP
1$:	BIC	#140000,@SP
	BR	2$
F$PROT:	ADDR	FIXPRO,R5
	MOV	@R1,-(SP)
	BITB	#^C<1>,@SP
	BNE	3$
	BIC	#^C<1>,@SP
2$:	ADDR	INTBLK,R1
	MOV	(SP)+,@R1
	MOV	R5,4(R1)
	ADDR	STRNM,R5
	MOV	R5,@SP
	CALL	MVFNM
	INC	@SP
	CLR	R2
.IF NE MMG$T
	BIC	#PMODE,@#PS
.ENDC
	JMP	R$NAME
3$:	TST	(SP)+
	EMTERR+3
	JMP	EMTRTI
MVFNM:	CALL	4$
4$:	MOV	R0,R2
	.REPT	4
	GET	(R2)+,(R5)+
	.ENDR
	RETURN
FIXDAT:	MOV	INTBLK,@R1
	RETURN
FIXPRO:	BIC	#PROT,E.STAT-E.DATE(R1)
	TST	INTBLK
	BEQ	5$
	BIS	#PROT,E.STAT-E.DATE(R1)
5$:	RETURN
INTBLK:	.WORD	0
	.WORD	0
RT$RTN:	.WORD	0
STRNM:	BSS	10
	.DSABL	LSB
.SBTTL	.PROTE	- PROTECT OR UNPROTECT VECTOR EMT
	.ENABL	LSB
P$ROTE:	CMP	#V.MAX,R0
	BLOS	6$
	ASR	R0
	BCS	6$
	ASR	R0
	BCS	6$
	MOV	R0,R1
	BIC	#^C<3>,R1
	ADD	PC,R1
	MOVB	8$-.(R1),R2
	ASR	R0
	ASR	R0
	ADD	R0,R5
	MOV	R5,R3
	ADD	#I.BITM,R3
	ADDR	LOWMAP,R0,ADD
	ENSYS	EMTRTI
	TST	R4
	BEQ	3$
	TST	JOBNUM
	BNE	1$
	TST	KMONIN
	BNE	2$
1$:	BITB	R2,@R3
	BEQ	5$
2$:	BICB	R2,@R0
	BICB	R2,@R3
	BR	5$
3$:	BITB	R2,@R0
	BNE	13$
	BISB	R2,@R0
	TST	JOBNUM
	BNE	4$
	TST	KMONIN
	BNE	5$
4$:	BISB	R2,@R3
5$:	RTS	PC
6$:	EMTERR+1
7$:	JMP	EMTRTI
8$:	.BYTE	^B11000000,^B00110000,^B00001100,^B00000011
.SBTTL	.CHCOP	- COPY OTHER JOB'S CHANNEL EMT
C$PYCH::TST	@R3
	BMI	6$
	MOV	R0,R4
.IF NE	SYT$K
	MOV	@R1,R0
	BEQ	9$
.IF NE	MMG$T
	JSR	PC,ACHJBM
.ENDC
	JSR	PC,FNDJOB
	BEQ	10$
	BR	11$
.ENDC
9$:	JSR	PC,OTHRJB
	BCC	11$
10$:	JMP	EMTER0
11$:	ENSYS	EMTRTI
	BIC	#^C<377>,R4
	CMPB	I.CNUM(R2),R4
	BLOS	13$
	MOV	R4,R1
	ASL	R4
	ASL	R4
	ADD	R1,R4
	ASL	R4
	ADD	I.CSW(R2),R4
	MOV	(R4)+,R1
	BPL	13$
	MOV	R1,@R3
	BIC	#<DWRIT$!RENAM$>,(R3)+
	MOV	(R4)+,(R3)+
	MOV	(R4)+,(R3)+
	MOV	(R4)+,(R3)+
	TSTB	R1
	BPL	12$
	MOV	-(R3),-(R3)
	BIC	(R3)+,(R3)+
12$:	MOV	(R4)+,@R3
	CLRB	@R3
	RTS	PC
13$:	JMP	SYSER0
.DSABL	LSB
.IF NE	FPU$11
.SBTTL	FLOATING POINT INTERRUPT
FPPINT::
 .ROM	MOV	#100000,FPPFLG,GLOBAL=YES
	CMPB	2(SP),#PR7
	BLO	1$
	RTI
1$:	MOVB	2(SP),2$
	COMB	2$
	JSR	R5,$INTEN
2$:	 .WORD	0
	RTS	PC
.ENDC
.SBTTL	CLOCK INTERRUPT HANDLER
.ENABL	LSB
EXINT:	RTI
LKINT::
 .ROM	INC	TIKCTR,GLOBAL=YES
	TST	INTLVL
	BPL	EXINT
	JSR	R5,$INTEN
	 .WORD	^C<PR6>&<PR7>
	RTS	PC
TIMER::	CLR	TIKCTR
	SPL	0
 .ROM	ADD	R5,PSCLOK,GLOBAL=YES
1$:
 .ROM	MOV	LKQUE,R4,GLOBAL=YES
	BCS	4$
	BEQ	EXUSER
	TST	(R4)+
	BNE	EXUSER
	CMP	PSCLOK,(R4)+
	BLO	EXUSER
2$:	ROR	-(SP)
	MOV	(R4)+,LKQUE
	MOV	@R4,R5
	JSR	PC,$RQTSW
	ADD	PC,R5
	MOV	$IMPUR-.(R5),R5
	BIS	#CPEND$,(R5)+
	SUB	#C.JNUM,R4
	MOV	R0,-(SP)
	JSR	PC,CQLINK
	MOV	(SP)+,R0
	ROL	(SP)+
	BR	1$
3$:	SUB	#1,(R4)+
	BIT	(R4)+,R0
	BCS	2$
	MOV	@R4,R4
4$:	BNE	3$
 .ROM	INC	PSCLKH
	CLC
	BR	1$
.DSABL	LSB
.SBTTL	COMMON INTERRUPT ENTRY AND EXIT
.ENABL	LSB
$ENSYS::MOV	R5,-(SP)
	ADD	(R5)+,@SP
ENSHOK::
	MOV	2(SP),-(SP)
.IF EQ	MMG$T
	GETPSW
	MOV	(SP)+,4(SP)
.IFF
	MOV	@#PS,4(SP)
.ENDC
	SPL	7
$INTEN::MOV	R4,-(SP)
 .ROM	INC	INTLVL,VALUE=-1,GLOBAL=YES
.IF EQ	MMG$T
	BGT	1$
 .ROM	MOV	SP,TASKSP,GLOBAL=YES
	MOV	(PC)+,SP
RMONSP:: .WORD	RMSTAK
1$:	MOV	R4,-(SP)
.ENDC
RMONPS::MOV	#PS,R4
	BIC	(R5)+,@R4
.IF EQ	MMG$T
	MOV	(SP)+,R4
	JSR	PC,@R5
.IFF
	MOV	@SP,R4
	MOV	R5,-(SP)
	MOV	4(SP),R5
	JSR	PC,@(SP)+
.ENDC
	SPL	7
	TST	INTLVL
	BEQ	EXUSER
	DEC	INTLVL
	BR	RTICMN
FRK::	SPL	0
	MOV	R3,-(SP)
	MOV	R2,-(SP)
	MOV	R1,-(SP)
	MOV	R0,-(SP)
.IF NE	MMG$T
	CALL	KPSAVE
.ENDC
	SPL	7
	MOV	@R4,FRKCQE
	BNE	3$
	CLR	FRKLQE
3$:	CLR	(R4)+
	SPL	0
	TST	@R4
	BEQ	4$
	MOV	(R4)+,-(SP)
	MOV	(R4)+,R5
	MOV	(R4)+,R4
	JSR	PC,@(SP)+
4$:
.IF NE	MMG$T
	CALL	KPREST
.ENDC
	MOV	(SP)+,R0
	MOV	(SP)+,R1
	MOV	(SP)+,R2
	MOV	(SP)+,R3
EXUSER::
.IF NE	FPU$11
	ASL	FPPFLG
	BCS	6$
.ENDC
5$:	SPL	7
	MOV	FRKCQE,R4
	BNE	FRK
	MOV	TIKCTR,R5
	BNE	TIMER
 .ROM	MOV	INTACT,R4,,YES
	BNE	EXSWAP
	DEC	INTLVL
.IF EQ	MMG$T
	MOV	TASKSP,SP
.ENDC
	.BR	RTICMN
RTICMN::MOV	(SP)+,R4
	MOV	(SP)+,R5
	RTI
.IF NE	FPU$11
6$:
.IF EQ	MMG$T
	MOV	TASKSP,R4
	MOV	(R4)+,-(SP)
	MOV	(R4)+,-(SP)
	BIT	#HWFPU$,CONFIG
FPSHOK::
	BEQ	7$
	STST	-(R4)
7$:	CLR	-(R4)
	MOV	CNTXT,R5
	MOV	I.FPP(R5),-(R4)
	CMP	#1,@R4
	BLO	8$
	ADDR	FPPERR,@R4
8$:	MOV	#1,I.FPP(R5)
	MOV	(SP)+,-(R4)
	MOV	(SP)+,-(R4)
	MOV	R4,TASKSP
	BR	5$
.IFF
	GET	SP,R4
	MOV	CNTXT,R5
	ADD	#I.FPP,R5
	CMP	#1,@R5
	BLO	9$
	ADDR	FPPERR,R5
	MOV	R5,4(SP)
	MOV	#PMODE,6(SP)
	BR	10$
9$:	PUT	6(SP),-(R4)
	PUT	4(SP),-(R4)
	MOV	@R5,4(SP)
	MOV	#<PMODE!CMODE>,6(SP)
	MOV	#1,@R5
10$:	BIT	#HWFPU$,CONFIG
	BEQ	11$
	STST	-(SP)
	PUT	2(SP),-(R4)
	PUT	(SP)+,-(R4)
	TST	(SP)+
11$:	PUT	R4,SP
	BR	5$
.ENDC
.ENDC
.DSABL	LSB
.SBTTL	EXIT TO USER
.ENABL	LSB
EXSWAP::BMI	ABTENT
	CLR	INTACT
	INC	R4
	ASLB	R4
	MOV	R4,JOBNUM
	SPL	0
	ADDR	$IMPUR,R4,ADD
SCHDLR::
1$:	SUB	#2,JOBNUM
	BMI	3$
	MOV	-(R4),R5
	BEQ	1$
	TST	I.BLOK(R5)
	BEQ	2$
	BIT	#<CMPLT$!CPEND$>,@R5
	BLE	1$
	BIT	#<KSPND$!NORUN$>,I.BLOK(R5)
	BNE	1$
2$:	JSR	PC,CNTXSW
EXUSLK:	BR	EXUSER
3$:
.IF NE	LIGH$T
 .ROM	DEC	LITECT,VALUE=1
	BNE	8$
	ADD	#512.,LITECT
4$:	ROL	7$
	BNE	5$
	COM	7$
5$:	BCC	6$
	ADD	#100,4$
	BIC	#200,4$
6$:	BIT	#LIGHT$,CONFG2
	BEQ	8$
	MOV	(PC)+,@(PC)+
7$:	 .WORD	0,SR
.ENDC
8$:
.IF NE	SYT$K
	INC	NULCNT
.ENDC
SCNALL::MOVB	#MXJBNM/2+200,INTACT
	BR	EXUSLK
.DSABL	LSB
.SBTTL	ABORT USERS
UABORT::JSR	R5,$ENSYS
	 .WORD	0
	 .WORD	PR7
	BIS	#ABPND$,@CNTXT
.IF NE	MMG$T
	BIS	#100000,INTACT
	RTS	PC
.ENDC
ABTENT::SPL	0
1$:	JSR	PC,SWAPME
	CLRB	INTACT+1
	MOV	IMPLOC,R4
2$:	MOV	-(R4),R5
	BEQ	2$
	CMP	R5,#-1
	BEQ	EXUSLK
	BIT	#ABPND$,@R5
	BEQ	2$
	BIT	#NORUN$,I.BLOK(R5)
	BNE	2$
	TSTB	DFLG
	BEQ	3$
	CMPB	USROWN,I.JNUM(R5)
	BEQ	2$
3$:	JSR	PC,CNTXSW
.IF EQ	MMG$T
	JSR	PC,IORSET
	MOV	TASKSP,R5
.IFF
	CALL	KPSAVE
	CALL	IORSET
	CALL	KPREST
	MOV	SP,R5
.ENDC
	CMP	(R5)+,(R5)+
	MOV	PC,@R5
	ADD	#GOEXIT-.,(R5)+
.IF NE	MMG$T
	BIC	#<CMODE!PMODE>,@R5
.ENDC
	MOV	CNTXT,R5
	MOV	#ABORT$,@R5
	CLR	I.BLOK(R5)
	CLR	I.TTLC(R5)
	CLR	I.SCTR(R5)
	MOV	I.IPUT(R5),I.IGET(R5)
	CLR	I.ICTR(R5)
.IF EQ	MMG$T
	BIC	#<CHAIN$!TTSPC$!TCBIT$!TTLC$>,@#JSW
.IFF
	GET	@#JSW,-(SP)
	BIC	#<CHAIN$!TTSPC$!TCBIT$!TTLC$>,@SP
	PUT	(SP)+,@#JSW
.ENDC
	MOV	SP,R0
	BR	1$
.SBTTL	$FORK - FORK REQUEST PROCESSOR
$FORK::	MOV	R4,-(SP)
	MOV	R5,R4
	ADD	(R5)+,R4
	ADD	#F.BSIZ,R4
	MOV	(SP)+,-(R4)
	MOV	(SP)+,-(R4)
	MOV	R5,-(R4)
	CLR	-(R4)
	ADDR	FRKCQE,R5
	SPL	7
.IF NE	MMG$T
	CALL	KPSAVE
.ENDC
	TST	(R5)+
	BNE	1$
	MOV	R4,@R5
	BR	2$
1$:	MOV	R4,@(R5)+
2$:	MOV	R4,-(R5)
.IF NE	MMG$T
	CALL	KPREST
.ENDC
	RTS	PC
.ASSUME	FRKLQE	EQ	FRKCQE+2
.SBTTL	CHANGE CURRENT CONTEXT
.ENABL	LSB
CNTXSW::
.IF EQ	MMG$T
	MOV	TASKSP,R4
.ENDC
	CMP	CNTXT,R5
	BNE	1$
	JMP	21$
1$:
.IF NE	MMG$T
	MOV	CNTXT,R4
	ADD	#I.RSAV+<8.*2>,R4
.ENDC
	MOV	R3,-(R4)
	MOV	R2,-(R4)
	MOV	R1,-(R4)
	MOV	R0,-(R4)
.IF EQ	MMG$T
	MOV	#34,R0
.IFF
	MOV	(SP)+,R1
	MOV	(SP)+,-(R4)
	MOV	(SP)+,-(R4)
	MOV	(SP)+,-(R4)
	MOV	(SP)+,-(R4)
	MOV	@#KISAR1,-(R4)
	MOV	@#V.MMU,-(R4)
	MOV	@#V.MMU+2,-(R4)
	MOV	#14,R0
	MOV	(R0)+,-(R4)
	MOV	(R0)+,-(R4)
	MOV	(R0)+,-(R4)
	MOV	(R0)+,-(R4)
	ADD	#10,R0
.ENDC
2$:	MOV	(R0)+,-(R4)
	CMP	R0,#SYSPTR
	BLO	2$
.IF NE	MTT$Y
	MOV	@#TTFILL,-(R4)
.ENDC
	MOV	CNTXT,R2
.IF NE	FPU$11
	ADD	#I.FPP,R2
	TST	(R2)+
	BEQ	3$
	BIT	#HWFPU$,CONFIG
	BEQ	3$
.IF NE	MMG$T
	MOV	-(R4),R4
	ADD	#6*4+1*2,R4
.ENDC
	STFPS	-(R4)
	SETD
	STD	R0,-(R4)
	STD	R1,-(R4)
	STD	R2,-(R4)
	STD	R3,-(R4)
	LDD	R4,R0
	STD	R0,-(R4)
	LDD	R5,R0
	STD	R0,-(R4)
.IFF
.IF NE	MMG$T
	ADD	#I.SPSV,R2
.IFF
	ADD	#I.SWAP,R2
.ENDC
.ENDC
3$:
.IF NE	MMG$T
	BIS	#PMODE,@#PS
	GET	SP,R4
	ADDR	RMSTAK,R3
	MOV	R4,(R2)+
4$:	CMP	SP,R3
	BEQ	5$
	PUT	(SP)+,-(R4)
	BR	4$
5$:
.ENDC
	MOV	(R2)+,R3
	BEQ	7$
6$:	PUT	@(R3)+,-(R4)
	TST	@R3
	BNE	6$
7$:	MOV	R3,(R2)+
	MOV	R4,(R2)+
	MOV	R5,CNTXT
.IF NE	MMG$T
	MOV	R0,-(SP)
	MOV	R1,-(SP)
	JSR	PC,MAPLO
	TST	I.JNUM(R5)
	BNE	8$
	TST	KMONIN
	BNE	12$
8$:	BIT	#WINDW$,@R5
	BEQ	10$
9$:	JSR	PC,CLRPDR
10$:	MOV	I.WPTR(R5),R4
	MOV	(R4)+,R2
11$:	JSR	PC,MAPWN
	SOB	R2,11$
12$:	MOV	(SP)+,R1
	MOV	(SP)+,R0
.ENDC
	ADD	#I.SP,R5
	MOV	@R5,R4
	MOV	-(R5),R2
	TST	-(R5)
	BEQ	14$
13$:	GET	(R4)+,@-(R2)
	CMP	@R5,R2
	BNE	13$
14$:
.IF NE	MMG$T
	MOV	-(R5),R2
15$:	CMP	R4,R2
	BEQ	16$
	GET	(R4)+,-(SP)
	BR	15$
16$:	PUT	R4,SP
.ENDC
.IF NE	FPU$11
17$:	TST	-(R5)
	BEQ	18$
	BIT	#HWFPU$,CONFIG
	BEQ	18$
.IF NE	MMG$T
	MOV	I.FPSA-I.FPP(R5),R4
.ENDC
	SETD
	LDD	(R4)+,R0
	STD	R0,R5
	LDD	(R4)+,R0
	STD	R0,R4
	LDD	(R4)+,R3
	LDD	(R4)+,R2
	LDD	(R4)+,R1
	LDD	(R4)+,R0
	LDFPS	(R4)+
18$:
.ENDC
.IF NE	MMG$T
	MOV	CNTXT,R4
	ADD	#I.SCOM,R4
.ENDC
.IF NE	MTT$Y
	MOV	(R4)+,@#TTFILL
.ENDC
19$:	MOV	(R4)+,-(R0)
	CMP	R0,#34
	BHI	19$
.IF NE	MMG$T
	MOV	#V.IOT+4,R0
	MOV	(R4)+,-(R0)
	MOV	(R4)+,-(R0)
	MOV	(R4)+,-(R0)
	MOV	(R4)+,-(R0)
	MOV	(R4)+,@#V.MMU+2
	MOV	(R4)+,@#V.MMU
	MOV	(R4)+,@#KISAR1
	MOV	(R4)+,-(SP)
	MOV	(R4)+,-(SP)
	MOV	(R4)+,-(SP)
	MOV	(R4)+,-(SP)
	MOV	R1,-(SP)
	BIT	#WINDW$,@CNTXT
	BEQ	20$
	BIT	#VLOAD$,@CNTXT
	BNE	20$
	JSR	PC,FIXTRP
20$:
.ENDC
	MOV	(R4)+,R0
	MOV	(R4)+,R1
	MOV	(R4)+,R2
	MOV	(R4)+,R3
.IF EQ	MMG$T
	MOV	R4,TASKSP
.ENDC
21$:	MOV	CNTXT,R5
	MOV	I.JNUM(R5),JOBNUM
	BIT	#<CMPLT$!CPEND$>,@R5
	BLE	22$
.IF EQ	MMG$T
	MOV	(R4)+,-(SP)
	MOV	(R4)+,-(SP)
.ENDC
	BIC	#^C<NORUN$!KSPND$>,I.BLOK(R5)
	BIC	#CPEND$,@R5
	BIS	#CMPLT$,@R5
	ADD	#I.CHWT,R5
	MOV	(R5)+,(R5)+
	MOV	@#ERRBYT,(R5)+
.IF EQ	MMG$T
	CLR	-(R4)
	MOV	(PC)+,-(R4)
.$CRTN:: .WORD	$CRTNE
	MOV	(SP)+,-(R4)
	MOV	(SP)+,-(R4)
	MOV	R4,TASKSP
.IFF
	MOV	(SP)+,R5
	MOV	2(SP),-(SP)
	MOV	2(SP),-(SP)
	CLR	6(SP)
	MOV	.$CRTN,4(SP)
	MOV	R5,-(SP)
.ENDC
22$:	RTS	PC
.IF NE	MMG$T
.$CRTN:: .WORD	$CRTNE
.ENDC
.DSABL	LSB
.SBTTL	.HRESET - HARD RESET EMT
	.ENABL	LSB
H$RSET:	ENSYS	S$RSET
IORSET::JSR	R3,SAVE30
	CLR	-(SP)
	ADDR	$ENTRY,R2
1$:	MOV	(R2)+,R3
	BEQ	1$
	CMP	R3,#-1
	BEQ	12$
	MOV	-(R2),R0
	TST	(R3)+
	TST	REVRT
	BEQ	2$
	BIT	#ABTIO$,<$STAT-$ENTRY>(R2)
	BNE	2$
	TST	(R2)+
	BR	1$
2$:	CALL	IOQABT
	BR	1$
12$:	JSR	PC,MQABRT
	.IF NE MTT$Y
	TST	REVRT
	BNE	13$
	JSR	PC,MTRSET
	.ENDC
13$:	MOV	CNTXT,R3
	SUB	(SP)+,I.IOCT(R3)
	TST 	REVRT
	BNE	SPLIT
CMKALL::MOV	#177777,R1
	MOV	JOBNUM,R2
	CLR	R0
	JMP	CMARKT
SPLIT:	RTS	PC
	.DSABL	LSB
	.SBTTL	IOQABT, ABORT HANDLER I/O QUEUE
	.ENABL	LSB
IOQABT:	SEC
	ROR	-(R0)
	BIT	#HNDLR$,<$STAT-$ENTRY>(R2)
	BNE	4$
3$:	JSR	R1,7$
4$:	MOV	-(R0),R1
	ADD	R0,R1
	MOV	JOBNUM,R4
	CLR	R5
	TST	2(SP)
	BPL	45$
	MOV	4(SP),R5
45$:	JSR	PC,-(R1)
	MOV	@R3,R4
	BEQ	8$
	CMP	-(R4),-(R4)
5$:	MOV	R4,R3
6$:	JSR	R1,7$
	MOV	@R4,@R3
	INC	2(SP)
	BPL	76$
	MOV	10(SP),@R4
	MOV	R4,10(SP)
	TST	6(SP)
	BNE	76$
	MOV	R4,6(SP)
76$:	MOV	2(R4),R1
	DECB	C.DEVQ(R1)
	BR	6$
7$:	TST	(SP)+
	MOV	@R3,R4
	BEQ	8$
	CMP	-(R4),-(R4)
	MOVB	Q.JNUM(R4),-(SP)
	ASR	@SP
	ASR	@SP
	ASR	@SP
	BIC	#^C<16>,@SP
	CMP	(SP)+,JOBNUM
	BNE	5$
	TST	2(SP)
	BPL	77$
	CMP	Q.CSW(R4),4(SP)
	BNE	5$
77$:	JMP	@R1
8$:	MOV	(R2)+,R4
	ASL	-(R4)
	BPL	100$
	ADDR	FRKCQE,R0
9$:	MOV	R0,R1
	MOV	@R1,R0
	BEQ	11$
	TST	F.BADR(R0)
	BNE	9$
	SPL	7
	MOV	@R0,@R1
	BNE	10$
	MOV	R1,FRKLQE
10$:	SPL	0
	BR	9$
11$:	CLR	(R4)+
	TST	(R4)+
	JSR	PC,COMPLT
100$:	RTS	PC
	.DSABL	LSB
.SBTTL	REVERT TO ORIGINAL CHANNELS, QRESET & PURGE HANDLERS
.ENABL	LSB
REVERT::
	ENSYS	100$
	DEC	(PC)+
REVRT::	.WORD	0
	JMP	IORSET
100$:	CLR	REVRT
	JSR	PC,QUIESCE
	ADDR	$CSW,R1
	TST	JOBNUM
	BEQ	1$
	MOV	R3,R1
	ADD	#IMPSIZ,R1
1$:	MOV	#CHNUM,I.CNUM(R3)
	MOV	R1,I.CSW(R3)
	CLR	R5
	MOV	R3,-(SP)
	ENSYS	2$
	JMP	CMKALL
2$:	MOV	(SP)+,R3
	MOV	R3,R5
.DSABL	LSB
.ENABL	LSB
QRESET::CLR	I.SCTR(R5)
	TST	(R5)+
	MOV	R5,@R5
	ADD	#I.QUE-2,@R5
	CLR	@(R5)+
	CLR	(R5)+
	CLR	(R5)+
	TST	JOBNUM
	BNE	3$
	MOV	R3,-(SP)
	.ADDR	#$ENTRY,R3
	MOV	#$SLOT,R0
1$:	TST	@R3
	BEQ	2$
	CMP	@R3,SYSLOW
	BHIS	2$
	MOV	#10,R1
	MOV	R0,-(SP)
	CALL	DRCALL
	MOV	(SP)+,R0
.IF EQ	MMG$T
	CLR	@R3
.IFF
.IF EQ	XM$FET
	CLR	@R3
.IFF
	MOV	R3,R5
	CALL	INTRLS
.ENDC
.ENDC
2$:	TST	(R3)+
	SOB	R0,1$
	MOV	(SP)+,R3
3$:
.IF EQ MTT$Y
HKPC06::
	BIS	#100,@TTKS
.ASSUME	.-HKPC06 EQ 6
.ENDC
	RETURN
.DSABL	LSB
.SBTTL	DEQUEUE A COMPLETION ROUTINE; EXIT FROM COMPLETION RTN
.ENABL	LSB
$CRTNE::MOV	R1,-(SP)
	MOV	R0,-(SP)
$CRTR2::
1$:	MOV	CNTXT,R1
	ADD	#I.PERR,R1
	MOV	@R1,@#ERRBYT
	MOV	-(R1),-(R1)
	SPL	7
	MOV	-(R1),R0
	BNE	3$
	BIC	#<CMPLT$!CPEND$>,I.STATE-I.CMPL(R1)
.IF NE	SPC$PS
	MOV	I.SPCP-I.CMPL(R1),R0
	BEQ	2$
	CMP	4(SP),@#SYSPTR
	BHIS	2$
	TST	I.ECTR-I.CMPL(R1)
	BNE	2$
.IF EQ	MMG$T
	MOV	6(SP),@R0
	MOV	4(SP),-(R0)
	MOV	-(R0),4(SP)
.IFF
	MOV	@#KISAR1,-(SP)
	MOV	I.SPC1-I.CMPL(R1),@#KISAR1
	MOV	10(SP),@R0
	MOV	6(SP),-(R0)
	MOV	-(R0),6(SP)
	MOV	(SP)+,@#KISAR1
.ENDC
	CLR	I.SPCP-I.CMPL(R1)
2$:
.ENDC
	MOV	(SP)+,R0
CRRHOK::
	MOV	(SP)+,R1
	RTI
3$:	MOV	@R0,@R1
	CMP	-(R1),R0
	BNE	4$
	CLR	@R1
4$:	SPL	0
.IF NE	MMG$T
	CLR	-(SP)
	CLR	-(SP)
.ENDC
	CMP	#-1,Q.WCNT(R0)
	BEQ	5$
	SPL	7
	MOV	-(R1),@R0
	MOV	R0,@R1
	SPL	0
.IF NE	MMG$T
	BIC	#PMODE,@#PS
	CMP	#-3,Q.WCNT(R0)
	BEQ	5$
	BIS	#PMODE,@#PS
	GET	SP,R1
	SUB	#2,R1
	PUT	R1,SP
	PUT	(SP)+,@R1
	BIS	#<CMODE!PMODE>,@SP
.ENDC
5$:	ADD	#Q.COMP,R0
	MOV	@R0,-(SP)
	CLR	@R0
	CLR	R1
	TST	-(R0)
	BLE	7$
6$:	INC	R1
	SUB	#CHNBYT,@R0
	BGT	6$
7$:	MOV	-(R0),R0
.IF EQ	MMG$T
	JSR	PC,@(SP)+
	BR	1$
.IFF
	RTI
.ENDC
.DSABL	LSB
.SBTTL	$SYSWT - BLOCK A TASK
$SYSWT::JSR	PC,2(R4)
	BCS	1$
	MOV	(SP)+,R4
	RTS	R4
1$:	TST	(SP)+
	ENSYS	$SYSWT
	MOV	CNTXT,R5
	BIS	(R4)+,I.BLOK(R5)
	JSR	PC,@R4
	INC	(SP)+
	BCS	SWAPME
	BIC	-(R4),I.BLOK(R5)
	RTS	PC
.SBTTL	REQUEST TASK SWITCH, UNBLOCK A TASK
.ENABL	LSB
DLYUSR::MOV	CNTXT,R5
	BIS	#USRWT$,I.BLOK(R5)
SWAPME::MOV	CNTXT,R5
	MOV	I.JNUM(R5),R5
$RQTSW::CMP	R5,JOBNUM
	BLO	2$
$RQSIG::SEC
	RORB	R5
	GETPSW
	SPL	7
	CMPB	R5,INTACT
	BLOS	1$
$RQSG1::MOVB	R5,INTACT
1$:	PUTPSW
	ASLB	R5
2$:	RTS	PC
.DSABL	LSB
UNBLOK::BIT	(R4)+,I.BLOK(R5)
	BEQ	1$
	BIC	-2(R4),I.BLOK(R5)
	MOV	R5,-(SP)
	MOV	I.JNUM(R5),R5
	JSR	PC,$RQTSW
	MOV	(SP)+,R5
1$:	RTS	R4
.SBTTL	SYSTEM STACK
.PSECT	STACK$
.REPT	50.+<TIM$IT*30.>+<SYT$K*30.>
	.WORD	152525
.ENDR
SPTR::
.REPT	STAC$K+<50.*MMG$T>+<40.*MTT$Y>
	.WORD	52525
.ENDR
RMSTAK::
	.PSECT	PATCH$
	.BLKW	PATC$H
$RMEND::
	.PSECT	OVLY0
$RTEND::
	.END
                                                                                  