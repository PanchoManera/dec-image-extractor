.MCALL .MODULE
.MODULE USR,VERSION=32,COMMENT=<User Service Routines>

;                  COPYRIGHT (c) 1984, 1985, 1986 BY
;             DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;                         ALL RIGHTS RESERVED.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
.SBTTL	***************************
.SBTTL	*	USR		  *
.SBTTL	***************************
.SBTTL	CONDITIONALIZATION SUMMARY
.IIF NE	MMG$T,	GT$NM=1
.IIF NDF GT$NM,	GT$NM=0
.IIF NE	MMG$T,	CVT$NU=1
.IIF NDF CVT$NU,CVT$NU=0
.IIF DF	NLUSR,	.NLIST
.SBTTL	FORCE THE CORRECT ORDERING OF PSECTS
	.PSECT	RT11
RT11::
	.PSECT	RMNUSR
RMNUSR::
	.PSECT	RTDATA
RTDATA::
	.PSECT	RMNUSR
	.MCALL	.CKXX
	.CKXX	<R0,R1,R2,R3,R4,R5,SP>
.SBTTL	LOCATE/LOCAT1 - USR ENTRY, EMT 376 PROCESSOR	** USR BUFFER **
USRBUF::CALL	LOCAT1
	JMP	@R5
LOCATE::MOV	R1,-(SP)
	MOV	R2,-(SP)
	ADDR	RELSTK,R1
	BR	LOCOM
LOCAT1::MOV	R1,-(SP)
	MOV	R2,-(SP)
	ADDR	RELST2,R1
LOCOM:	MOV	@#SYSPTR,R5
	CALL	RELSUB
	ADDR	USRBUF,R5
.IF EQ	BF
.MNLOC	== .+2
	MOV	R5,@#MONLOC-$RMON
.ENDC
	CALL	RELSUB
	MOV	.USRTO,R5
.USRLO	== .+2
	MOV	R5,@#USRLOC-$RMON
	CLR	@.BLKEY
	MOV	(SP)+,R2
	MOV	(SP)+,R1
RELRET:	RTS	PC
RELSUB:	MOV	(R1)+,R2
	BEQ	RELRET
	ADD	PC,R2
RELLP2:
	ADD	R5,@R2
	BR	RELSUB
.SBTTL	RELSTK/RELST2 - POINTERS NEEDING RELOCATION	** USR BUFFER **
RELSTK:	.WORD	.$SWPB-RELLP2
	.WORD	.$MONB-RELLP2
	.WORD	.CORPT-RELLP2
	.WORD	.CURLE-RELLP2
	.WORD	.EXTFL-RELLP2
	.WORD	.IFSVS-RELLP2
	.WORD	.IFMXN-RELLP2
	.WORD	.$USRL-RELLP2
	.WORD	.KMLOC-RELLP2
	.WORD	.$KMLO-RELLP2
	.WORD	..USRL-RELLP2
	.WORD	..SYSL-RELLP2
	.WORD	.EXTIN-RELLP2
	.WORD	.ERRLE-RELLP2
	.WORD	.INDST-RELLP2
	.WORD	.CLIFL-RELLP2
	.WORD	.CLITY-RELLP2
	.WORD	.CCB-RELLP2
	.WORD	.$INDD-RELLP2
	.WORD	.LOWMA-RELLP2
.IF EQ	BF
	.WORD	.MONLC-RELLP2
	.WORD	..$CSW-RELLP2
	.WORD	..QSIZ-RELLP2
.IF EQ	MTT$Y
	.WORD	..TTOB-RELLP2
	.WORD	..ZAP-RELLP2
	.WORD	..TTKS-RELLP2
.IFF
	.WORD	..MTRE-RELLP2
	.WORD	..MTR1-RELLP2
.ENDC
.IFF
.IF EQ	MMG$T
.IF NE	MTT$Y
	.WORD	.$MTPS-RELLP2
.ENDC
.IFF
	.WORD	..I.CN-RELLP2
.ENDC
.ENDC
RELST2:	.WORD	.USRLO-RELLP2
	.WORD	.MONOU-RELLP2
	.WORD	.$UNAM-RELLP2
	.WORD	.$ENTR-RELLP2
	.WORD	.SYINDX-RELLP2
	.WORD	.BLKEY-RELLP2
	.WORD	.CHKEY-RELLP2
	.WORD	.$DATE-RELLP2
	.WORD	.DFLG-RELLP2
	.WORD	.$STAT-RELLP2
	.WORD	.$PNAM-RELLP2
	.WORD	.SPUSR-RELLP2
	.WORD	.MAXBL-RELLP2
	.WORD	.STATWD-RELLP2
	.WORD	.CNFG2-RELLP2
	.WORD	.INBFPT-RELLP2
	.WORD	.SPSIZ-RELLP2
.IF EQ	MMG$T
	.WORD	..$MTP-RELLP2
.ENDC
	.WORD	.SYSLO-RELLP2
	.WORD	.$SYS-RELLP2
	.WORD	.DRCAL-RELLP2
.IF EQ	GT$NM
	.WORD	.EMTMO-RELLP2
	.WORD	.GETNM-RELLP2
	.WORD	.GTNM1-RELLP2
.ENDC
.IF EQ	CVT$NU
	.WORD	.$OCTN-RELLP2
	.WORD	.$DECN-RELLP2
	.WORD	.$CVTN-RELLP2
.ENDC;EQ CVT$NU
.IF EQ	BF
	.WORD	.MNLOC-RELLP2
	.WORD	.I.CSW-RELLP2
	.WORD	.I.CNU-RELLP2
	.WORD	.RECUR-RELLP2
	.WORD	.QSIZE-RELLP2
	.WORD	.$CSW-RELLP2
.IF EQ	MTT$Y
	.WORD	.TTOBU-RELLP2
	.WORD	.ZAP-RELLP2
	.WORD	.TTKS-RELLP2
.IFF
	.WORD	.MTRES-RELLP2
	.WORD	.MTRE1-RELLP2
.ENDC
.IF NE TIME$R
	.WORD	.CMKAL-RELLP2
.ENDC
.IFF
	.WORD	.$OWNE-RELLP2
	.WORD	.CNTXT-RELLP2
	.WORD	.$IMPUR-RELLP2
	.WORD	.JOBNUM-RELLP2
	.WORD	.CSIER-RELLP2
	.WORD	.DRVTB-RELLP2
.ENDC
.IF NE	MMG$T
	.WORD	.$RELM-RELLP2
	.WORD	.$KADR-RELLP2
	.WORD	.$U2P1-RELLP2
	.WORD	.P1SD-RELLP2
	.WORD	.PL10W-RELLP2
.IF NE	XM$FET
	.WORD	.PLBYT-RELLP2
	.WORD	.INTSET-RELLP2
	.WORD	.INTRLS-RELLP2
.ENDC
.ENDC
	.WORD	.KMONIN-RELLP2
	.WORD	0
	.WORD	.USRBU-RELLP2
	.WORD	.USRTO-RELLP2
	.WORD	.USRBO-RELLP2
	.WORD	.FNAME-RELLP2
	.WORD	.FNAM6-RELLP2
	.WORD	.D.USR-RELLP2
	.WORD	.M.USR-RELLP2
	.WORD	.USRIO-RELLP2
	.WORD	.FILDE-RELLP2
	.WORD	.HANSP-RELLP2
	.WORD	.DVSTS-RELLP2
.IF EQ	BF
	.WORD	.DRVTB-RELLP2
.ENDC
.IF EQ	MMG$T
	.WORD	.STKSV-RELLP2
	.WORD	.SVSTK-RELLP2
.ENDC
	.WORD	0
.SBTTL	FATAL  - ERROR HANDLER				** USR BUFFER **
.IF EQ	BF
IOFSET	= FATAL - USRBUF
.IF EQ	PANI$C
FATAL:
	ADDR	MONMSG,R0
	.PRINT
	ADDR	IOTLS,R0
	ASL	R4
	ADD	R4,R0
	MOV	(R0),R0
	ADD	PC,R0
IOTPC:	.PRINT
	.TTYOUT	#SPACE
1$:	MOV	#30,R0
	SEC
2$:	ROL	R3
	ROLB	R0
	.TTYOUT
  	MOV	#206,R0
3$:	ASL	R3
	BEQ	4$
	ROLB	R0
	BCS	3$
	BR	2$
4$:
.IFF
.SBTTL	FATAL  - PANIC DUMP				** USR BUFFER **
.ENABL	LSB
FATAL:	ADDR	MONMSG,R0
	.PRINT
	ADDR	IOTLS,R0
	ASL	R4
	ADD	R4,R0
	MOV	@R0,R0
	ADD	PC,R0
IOTPC:	MOVB	(R0)+,R2
	.PRINT
	TSTB	R2
	BEQ	8$
	ADDR	PANIC,R0
	.PRINT
	ADDR	PREG,R5
	ADDR	3$,R4
	ADD	#16.,R1
	CLR	R2
	JSR	R2,@R4
	 .ASCII	"R0"
	ADD	#8.,R1
	MOV	#5,-(SP)
1$:	JSR	R2,2(R4)
	CMP	-(R1),-(R1)
	DEC	@SP
	BNE	1$
	MOV	R1,R3
	ADD	#16.,R3
	MOV	R3,@SP
	MOV	SP,R1
	JSR	R2,@R4
	 .ASCII	"SP"
	MOV	(SP)+,R1
	CMP	-(R1),-(R1)
	JSR	R2,@R4
	 .ASCII	"PC"
	JSR	R2,@R4
	 .ASCII	"PS"
	MOV	-4(R1),R1
	BICB	#1,R1
	CMP	R1,PC
	BHIS	2$
	SUB	#6.,R1
	MOV	#3,R2
	JSR	R2,@R4
	 .ASCII	"I1"
2$:
.ENDC
8$:	.TTYOUT	#CR
	.TTYOUT	#LF
	BISB	#<FATAL$>,@#USERRB
	BIC	#<RSTRT$!CHNIF$>,@#JSW
	BIS	#<IFABRT>,@.STATWD
	CLR	R0
	.EXIT
.IF NE	PANI$C
3$:	MOV	(R2)+,@R5
4$:	MOV	(R1)+,R3
	MOV	R5,R0
	.PRINT
	INCB	1(R5)
	MOV	(PC)+,R0
	 .WORD	<'0>/2
	SEC
5$:	ROL	R3
	ROLB	R0
	.TTYOUT
	MOV	(PC)+,R0
	 .WORD	200!<'0/10>
6$:	ASL	R3
	BEQ	7$
	ROLB	R0
	BCS	6$
	BR	5$
7$:	MOV	PC,R0
	MOV	R0,R0
	.PRINT
	DEC	@SP
	BGT	4$
	RTS	R2
PANIC:	.ASCIZ	"PANIC DUMP "
PREG:	.ASCII	"R0   "<200>
	.EVEN
.DSABL	LSB
.ENDC
.MACRO	ERRMSG	CODE,DUMP,TEXT
	..TMP2=.
	.=IOTLS+..TEMP+..TEMP
	.WORD	..TMP2-IOTPC
	.=..TMP2
.IF NE	PANI$C
  .IF IDN	YES,<DUMP>
	.BYTE	1
  .IFF
	.BYTE	0
  .ENDC
.ENDC
	.ASCII	\TEXT\
.IF EQ	PANI$C
	.BYTE	200
.IFF
	.BYTE	0
.ENDC
CODE'.E	= ..TEMP
..TEMP	= ..TEMP+1
.ENDM	ERRMSG
MONMSG:	.ASCII	<CR><LF>"?MON-F-"<200>
..TEMP	= 0
	ERRMSG	USRX	YES	<Invalid call to USR>
	ERRMSG	NODV	NO	<No device>
	ERRMSG	DIRI	NO	<Directory I/O error>
	ERRMSG	FETC	YES	<Bad Fetch>
	ERRMSG	OVLY	NO	<Overlay error>
	ERRMSG	DOVR	NO	<Directory overflow>
	ERRMSG	ADDR	YES	<Invalid address>
	ERRMSG	CHAN	YES	<Invalid channel>
	ERRMSG	EMT	YES	<Invalid EMT>
	ERRMSG	TR04	YES	<Trap to 4>
	ERRMSG	TR10	YES	<Trap to 10>
	ERRMSG	ILLD	NO	<Invalid directory>
	ERRMSG	UDRV	YES	<Unloaded driver>
	ERRMSG	FPP	YES	<FP trap>
	ERRMSG	MPAR	NO	<Memory error>
	ERRMSG	STCK	YES	<Stack overflow>
	ERRMSG	IOBD	NO	<System write error>
	.EVEN
IOTLS:	.BLKW	..TEMP
.SBTTL	CDFN   - CHANNEL DEFINE				** USR BUFFER **
CDFN:	MOV	ARGM1,R2
	MOV	R2,R1
	MOV	.I.CNU,R5
	CMPB	R2,@R5
	BLOS	4$
CDFNWT	== .
1$:
	MOV	.QSIZE,R3
	CMP	(R3)+,(R3)
	BNE	1$
	MOV	@R5,R4
	ASL	R4
	ASL	R4
	ADD	(R5)+,R4
	MOV	@R5,R3
	ASL	R2
	ASL	R2
	ADD	R1,R2
	SUB	R4,R2
2$:	MOV	(R3)+,(R0)+
	SOB	R4,2$
3$:	CLR	(R0)+
	SOB	R2,3$
	MOV	@SP,@R5
	MOV	R1,-(R5)
	BR	5$
4$:	.WORD	EMTERR+0
5$:
	JMP	COMXIT
.SBTTL	SOFRST/HDRSET - HARD AND SOFT RESET 		** USR BUFFER **
SOFRST:	MOV	(PC)+,R0
HDRSET:	CLR	R0
	CALL	RSTSR
	JMP	COMXIT
.ENABL	LSB
RSTSR:	BNE	3$
RSTTTW	== .
.IF EQ	MTT$Y
.TTOBU	== .+2
1$:	TST	@#TTOBUF+2-$RMON
	BNE	1$
.ZAP	== .+2
	CALL	@#ZAP-$RMON
3$:
.IFF
.MTRES	== .+2
	CALL	@#MTREST-$RMON
	BR	30$
3$:
.MTRE1	== .+2
	CALL	@#MTRES1-$RMON
.ENDC
30$:
.IF NE TIME$R
.CMKAL == .+2
	CALL	@#CMKALL-$RMON
.ENDC
	MOV	#<CHNUM-1>*CHNWDS,R1
	BIT	#OVLY$,@#JSW
	BNE	4$
	ADD	#CHNWDS,R1
4$:
.$CSW	== .+2
	MOV	#$CSW-$RMON,R2
	MOV	R2,@.I.CSW
	MOV	#CHNUM,@.I.CNU
5$:	CLR	(R2)+
	SOB	R1,5$
	MOV	.$ENTR,R2
	MOV	#$SLOT,R1
6$:	CMP	@R2,@.SYSLO
	BLO	7$
	CLR	@(R2)+
	BR	8$
7$:	CLR	(R2)+
8$:	SOB	R1,6$
RSTIOW	== .
9$:
.QSIZE	== .+2
	MOV	#QSIZE-$RMON,R1
	CMP	(R1)+,@R1
	BLO	9$
	MOV	#1,-(R1)
	MOV	(R1)+,(R1)+
	MOV	R1,@R1
	ADD	#2,@R1
.IF EQ MTT$Y
.TTKS	== .+2
	MOV	@#TTKS-$RMON,-(SP)
	BIS	#IENABL,@(SP)+
.ENDC
	RTS	PC
.DSABL	LSB
.ENDC
.SBTTL	QSET   - QUEUE EXTEND EMT 			** USR BUFFER **
.IF NE MMG$T
.	= USRBUF+L.UBUF
	BR	USRST
.ENDC
	.ENABL	LSB
QSET:	INC	ARGPOP
	MOV	R0,R5
	BLE	QSOUT
.IF EQ MMG$T
	MOV	ARGM1,R1
.IFF
	MOV	ARGM1,R0
.$U2P1	== .+2
	CALL	@#$U2P1-$RMON
	BCC	2$
1$:	MOV	R5,R0
.PL10W	== .+2
	CALL	@#PL10WD-$RMON
	BCS	QERR
2$:	MOV	R2,R1
.P1SD	== .+2
	CALL	@#P1SD-$RMON
	MOV	R5,R0
.ENDC
	MOV	R1,R4
.IF NE	BF
	MOV	@.CNTXT,R2
	TST	(R2)+
.IFF
	MOV	.QSIZE,R2
	CMP	(R2)+,(R2)+
.ENDC
3$:	MOV	R1,R3
	ADD	#QESIZE,R1
	MOV	R1,@R3
	SOB	R0,3$
	CLR	@R3
.IF EQ MMG$T
	MOV	#PR7,-(SP)
..$MTP	== .+2
	CALL	@#$MTPS-$RMON
.IFF
	BISB	#PR7,@#PS
.ENDC
	MOV	@R2,@R3
	MOV	R4,@R2
.IF EQ	BF
	ADD	R5,-(R2)
	ADD	R5,-(R2)
.ENDC
.IF EQ MMG$T
	CLR	-(SP)
	CALL	@..$MTP
.IFF
	BICB	#PR7,@#PS
.IFTF
	MOV	R1,@SP
.ENDC
QSOUT:
	JMP	COMXIT
QERR:
	JSR	R5,COMERR
	.WORD	ADDR.E
	.DSABL	LSB
.SBTTL	USR PROGRAMMED REQUEST ENTRY, COMMAND DISPATCHING
.IF EQ MMG$T
.	= USRBUF+L.UBUF
.ENDC
USRST::	MOV	@SP,R0
.IF NE	BF
	CLR	(PC)+
ARGPOP:	 .WORD	0
.IFF
.RECUR	== .+2
	MOV	@#RECURS-$RMON,(PC)+
ARGPOP:	 .WORD	0
	BEQ	USRA
	MONERR	USRX.E,0,FATAL
USRA:
.ENDC
	CLR	@.SPUSR
	MOV	(R1)+,(PC)+
ARGM1:	 .WORD	0
	MOV	(R1)+,(PC)+
ARGM2:	 .WORD	0
	MOV	(R1)+,(PC)+
ARGM3:	 .WORD	0
	MOV	R2,(PC)+
USREMT:	 .WORD	0
	MOV	SP,(PC)+
USRSP:	 .WORD	0
	CLR	R5
	ROL	R2
	TST	(R2)+
	ADD	PC,R2
	ADD	@R2,PC
ULS:
ULS:
	.WORD	QSET-ULS
.IF EQ BF
	.WORD	CDFN-ULS
.ENDC
	.WORD	DELETU-ULS
	.WORD	PHETCH-ULS
	.WORD	KLOSE-ULS
	.WORD	ENTER-ULS
	.WORD	LOOKUP-ULS
	.WORD	RENAMU-ULS
	.WORD	GESTAT-ULS
.IF EQ BF
	.WORD	SOFRST-ULS
	.WORD	HDRSET-ULS
.ENDC
..CSI	== <. - ULS> / 2
	.WORD	CSI-ULS
.SBTTL	RENAMU/LOOKUP - LOOKUP AND RENAME REQUESTS
RENAMU:	MOV	#RENAM$,R5
LOOKUP:	JSR	R5,USRCOM
	 BR	LNFILE
	 BR	SPLOOK
	JSR	R5,SEARCH
	 BR	LKER1
	MOV	#E.LENG,R2
	TST	R5
	BEQ	1$
	ADD	R2,R0
	JMP	CLOCOM
1$:	TST	(R3)+
	ADD	R2,R1
	MOV	SBLK,(R3)+
	MOV	(R1),(SP)
	MOV	(R1)+,(R3)+
	MOV	(R1)+,(R3)+
.IF NE MMG$T
	CALL	@.P1SD
.ENDC
	CALL	@ARGM3
	BR	COMXIT
SPLOOK:	BIS	#DWRIT$,@R3
	TST	R5
	BNE	SPRNAM
	JSR	R4,SPSHL1
	 .BYTE	377,LOOK..
SPRNAM:	JSR	R4,SPSHL1
	.BYTE	377,RENM..
.SBTTL	COMXIT - COMMON EXIT FOR ALL USR REQUESTS
LNFILE:	CMP	(R3)+,(PC)+
PROERR:	 .WORD	EMTERR+3
	BR	DELOUT
LKER1:	 .WORD	EMTERR+1
DELOUT:	CLR	(R3)+
	CLR	@SP
	.BR	COMXIT
COMXIT:	MOV	ARGPOP,R2
.MONOU	== .+2
	JMP	@#MONOUT-$RMON
.SBTTL	COMERR - COMMON ERROR EXIT FOR FATAL USR ERRORS
COMERR:	MOVB	@R5,CODE
	MOV	USRSP,SP
	CLR	@.DFLG
	CLR	@.BLKEY
	EMT	376
	 .BYTE	0
CODE:	 .BYTE	0
	BR	COMXIT
.SBTTL	DELETU - DELETE A FILE
DELETU:	JSR	R5,USRCOM
	 BR	DELOUT
	 BR	SPDEL
	JSR	R5,SEARCH
	 BR	LKER1
	BMI	PROERR
	MOV	#EMPTY,@R1
	JMP	CLSQSH
SPDEL:	JSR	R4,SPSHL1
	 .BYTE	377,DELE..
.SBTTL	ENTER  - OPEN A FILE ON A DEVICE
.ENABL	LSB
ENTER:	CLR	@.BLKEY
	INC	ARGPOP
	MOV	#DWRIT$,R5
	JSR	R5,USRCOM
	 BR	LNFILE
	 BR	SPENTR
	MOV	USRBUF+D.HIGH,LSTBLK
	CLR	ARGM2
1$:	CLR	FNAME
	CLR	FNAME+2
	BR	4$
SPENTR:	JSR	R4,SPESHL
	 .BYTE	377,ENTR..
2$:	MOV	.USRBO,R1
	JSR	R5,FILSCN
	 BR	3$
	BMI	PROERR
3$:	JSR	R5,NXBLK
	 BR	10$
4$:	CALL	CONSOL
5$:	MOV	(PC)+,R5
.FNAME:: .WORD	FNAME-USRBUF
	JSR	R5,ENTRY
	 .WORD	EMPTY
	 BR	2$
	MOV	E.LENG(R1),R4
	MOV	ARGM1,R2
	BEQ	6$
	CMP	#-1,R2
	BNE	13$
6$:	CMP	(R5)+,R4
	BHIS	9$
	CMP	@R5,R4
	BHIS	7$
	MOV	@R5,-(R5)
	ADD	#8.,R5
	MOV	-(R5),-(R5)
7$:	MOV	R4,-(R5)
8$:	MOV	@R3,4(R5)
9$:	ADD	R4,SBLK
	CALL	INCR1
	BR	5$
10$:	TST	(R5)+
	TST	R2
	BNE	12$
	ROR	@R5
	CMP	@R5,-(R5)
	BLO	11$
	TST	(R5)+
.MAXBL	== .+2
11$:	CMP	@#MAXBLK-$RMON,@R5
	BHIS	121$
	MOV	@.MAXBL,@R5
	BIC	#DBLK$M,4(R5)
	INCB	5(R5)
.ASSUME	DBLOK$ EQ 400
	BR	121$
12$:	COM	ARGM2
	INC	R2
	BNE	121$
	MOV	@R5,-2(R5)
121$:	MOV	@R5,ARGM1
	BEQ	LKER1
	MOV	4(R5),@R3
RENTR:	JSR	R5,BLKCHK
	TST	ARGM2
	BEQ	1$
	BR	4$
13$:	CMP	R4,R2
	BLO	9$
	TST	@R5
	BEQ	132$
	CMP	R4,@R5
	BHI	9$
	BEQ	131$
132$:	MOV	R4,(R5)+
	MOV	R2,@R5
	BR	8$
131$:	TST	ARGM2
	BEQ	9$
14$:	MOV	R1,-(SP)
	MOV	DREND,R1
	CALL	INCR2
	CALL	INCR1
	CMP	R1,(PC)+
.USRTO:: .WORD	USRBUF+L.UBUF-USRBUF
	BHI	EXTEND
	MOV	(SP)+,R1
	MOV	SBLK,R4
	MOV	R1,R5
	SUB	R2,E.LENG(R1)
	SUB	#L.ENTR,R5
	SUB	USRBUF+D.EXTR,R5
	CMP	R5,(PC)+
.USRBO:: .WORD	USRBUF+L.HDR-USRBUF
	BLO	15$
	BIT	#TENT,@R5
	BEQ	15$
	CALL	PUSH
	MOV	#EMPTY,@R1
	CLR	E.LENG(R1)
	CALL	INCR1
15$:	CALL	PUSH
	MOV	#TENT,(R1)+
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
	MOV	R2,(R1)+
.IF NE	BF
	MOVB	CHNLRG,(R1)+
.JOBNU	== .+2
	MOVB	@#JOBNUM-$RMON,(R1)+
.IFF
	MOV	CHNLRG,(R1)+
.ENDC
.$DATE	== .+2
	MOV	@#$DATE-$RMON,@R1
.IF NE	MMG$T
	CALL	@.P1SD
.ENDC
	CALL	@ARGM3
	TST	(R3)+
	CLR	@R3
	JSR	R5,SEGWR
	MOV	R4,(R3)+
	MOV	R2,(R3)+
	CLR	@R3
	MOV	-(R3),@SP
	JMP	COMXIT
.DSABL	LSB
.SBTTL	EXTEND - ENLARGE THE SIZE OF A DIRECTORY
.ENABL LSB
EXTEND:	MOV	R0,@SP
	MOV	(PC)+,R2
LSTBLK:	 .WORD	0
.DFLG	== .+2
	INC	@#DFLG-$RMON
	CMP	R2,USRBUF
	BGE	6$
	MOV	(PC)+,R4
.M.USR:: .WORD	USRBUF+<512.-5-1/2+5*2>-USRBUF
	MOV	(PC)+,R1
.D.USR:: .WORD	USRBUF+D.STRT-USRBUF
	MOV	(R1)+,R5
1$:	CALL	INCR1A
	CMP	R1,R4
	BLO	1$
	BIT	#PERM!TENT,@R1
	BEQ	1$
	MOV	@R1,-(SP)
	MOV	#ENDBLK,@R1
	INC	R2
	MOV	USRBUF+D.NEXT,-(SP)
	MOV	R2,USRBUF+D.NEXT
	JSR	R5,SEGWR
	MOV	.USRBU,R0
	TST	(R0)+
	MOV	(SP)+,(R0)+
	MOV	(SP)+,@R1
	CMP	(R0)+,(R0)+
	MOV	R5,(R0)+
4$:	MOV	(R1)+,(R0)+
	CMP	R1,.USRTO
	BLOS	4$
	MOV	R2,R0
	JSR	R5,SEGRW
	JSR	R5,SEGRD1
	INC	USRBUF+D.HIGH
	JSR	R5,SEGWR
	DEC	@.DFLG
	MOV	(SP)+,R0
	JMP	RENTR
6$:	JSR	R5,COMERR
	 .WORD	DOVR.E
.DSABL LSB
.SBTTL	PUSH   - MAKE ROOM IN CURRENT DIRECTORY SEGMENT FOR NEW ENTRY
PUSH:	MOV	R3,-(SP)
	MOV	R1,R5
	JSR	R5,ENTRY
	 .WORD	0
	MOV	R1,R3
	CALL	INCR1
	CMP	(R3)+,(R1)+
1$:	MOV	-(R3),-(R1)
	CMP	R3,R5
	BNE	1$
	MOV	R5,R1
	MOV	(SP)+,R3
	RTS	PC
.SBTTL	KLOSE  - CLOSE A FILE, DELETE UNPROTECTED DUPLICATES
.ENABL	LSB
KLOSE:	ASR	R4
	MOV	R4,CHNLRG
	MOV	@R3,R5
	BIC	#^C<76>,R5
.$STAT	== .+2
	ADD	#$STAT-$RMON,R5
	BIT	#SPECL$,@R5
	BNE	SPCLOS
	CLR	2(R3)
	JSR	R5,BLKCHK
	BR	2$
1$:	JSR	R5,NXBLK
	 BR	CLSOUT
2$:	JSR	R5,ENTRY
	 .WORD	TENT
	 BR	1$
.IF NE	BF
	CMPB	E.JNUM(R1),@.JOBNUM
	BNE	3$
.ENDC
	CMPB	E.CHAN(R1),CHNLRG
	BEQ	4$
3$:	CALL	INCR1
	BR	2$
4$:	MOV	R1,R2
	TST	(R2)+
	MOV	.FNAME,R0
	MOV	(R2)+,(R0)+
	MOV	(R2)+,(R0)+
	MOV	@R2,@R0
	CMP	-(R0),-(R0)
CLOCOM:	MOV	R1,R4
	MOV	@R3,@SP
	BIC	#DBLK$M,@R3
	ADD	#DBLOK$,@R3
	JSR	R5,SEARCH
	 BR	8$
	CMP	@R3,@SP
	BNE	5$
	CMP	R1,R4
	BEQ	9$
5$:	TST	@R1
	BPL	7$
6$:	 .WORD	EMTERR+3
	BIT	#RENAM$,@R3
	BEQ	8$
	BR	CLSOUT
.ASSUME	PERM EQ <2*EMPTY>
7$:	ASR	@R1
	CMP	@R3,@SP
	BEQ	8$
	INC	@.DFLG
	CALL	CLOSUP
8$:	MOV	@SP,@R3
	JSR	R5,BLKCHK
	MOV	R4,R1
	BIT	#RENAM$,@R3
	BNE	9$
	MOV	#PERM,@R1
	ADD	#E.LENG,R1
	MOV	@R1,R2
	MOV	C.USED(R3),@R1
	SUB	@R1,R2
	CALL	INCR1
	ADD	R2,@R1
CLSQSH:	CALL	CLOSUP
	CLR	@.DFLG
CLSOUT:	JMP	DELOUT
9$:	TST	(R1)+
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
	CMP	(R1)+,(R1)+
.IF NE MMG$T
	CALL	@.P1SD
.ENDC
	CALL	@ARGM3
	BR	CLSQSH
SPCLOS:	JSR	R4,SPESHL
	 .BYTE	377,CLOS..
.DSABL	LSB
.SBTTL	CLOSUP - CONSOLIDATE AND REWRITE A DIRECTORY SEGMENT
CLOSUP:	MOV	R0,-(SP)
	MOV	.USRBO,R1
	CALL	CONSOL
	JSR	R5,SEGWR
	MOV	(SP)+,R0
	RTS	PC
.IF NE MMG$T
.SBTTL	MAPFIL - MAP TO USER FILE BLOCK
MAPFIL:	BIT	#PMODE,@#PS
	BNE	1$
	CALL	@.P1SD
	RTS	PC
.$RELM	== .+2
1$:	JMP	@#$RELOM-$RMON
.ENDC
.SBTTL	SPESHL/SPSHL1 - PROCESS USR REQUESTS FOR SPECIAL DEVICES
SPSHL1:	MOV	ARGM1,ARGM2
SPESHL:	BIC	#EOF$!HDERR$,@R3
	CLR	-(SP)
	MOV	(R4)+,-(SP)
	MOV	ARGM1,-(SP)
	MOV	R0,-(SP)
	CLR	-(SP)
	TST	USREMT
	BPL	1$
	MOV	ARGM2,@SP
1$:	MOV	CHNLRG,-(SP)
	ADD	#10*400,@SP
	MOV	SP,R0
	EMT	375
	BCC	2$
	JMP	IOER
2$:	ADD	#14.,SP
	CLR	@.BLKEY
.SPUSR	== .+2
	MOV	@#SPUSR-$RMON,R0
	BNE	3$
	CMPB	-(R4),#LOOK..
	BEQ	5$
	CMPB	@R4,#ENTR..
	BEQ	5$
	BR	4$
3$:	BIS	(PC)+,R0
	 .WORD	EMTERR
	MOV	R0,@PC
	 .WORD	EMTERR
4$:	CLR	(R3)+
.SPSIZ	== .+2
5$:	MOV	@#SPSIZE-$RMON,@SP
COMXT2:	JMP	COMXIT
.SBTTL	GESTAT - GET DEVICE STATUS EMT (.DSTATUS)
.ENABL	LSB
GESTAT:
	CALL	LK4DV1
.IF NE	MMG$T
	MOV	R2,-(SP)
	CALL	MAPFIL
	MOV	(SP)+,R2
.ENDC
	MOV	@R2,(R0)+
	MOV	$HSIZE-$STAT(R2),(R0)+
	MOV	@R5,(R0)+
	MOV	$DVSIZ-$STAT(R2),@R0
COMXT3:	BR	COMXT2
.DSABL	LSB
LK4DV1:
.IF NE MMG$T
	CALL	MAPFIL
.ENDC
	INC	ARGPOP
	ASR	ARGM1
	JSR	R4,LK4DEV
	 BR	FCE0X
	MOV	ARGM1,R0
	ASL	R0
	MOV	R0,2(SP)
	RETURN
.SBTTL	PHETCH - FETCH A DEVICE DRIVER
.ENABL	LSB
PHETCH:	CALL	LK4DV1
.SYSLO	== .+2
	MOV	@#SYSLOW-$RMON,R3
.IF NE	BF
	MOV	@.JOBNUM,R0
.ENDC;NE BF
	CMP	@SP,#V.MAX
	BLOS	RLEAS
.IF NE	BF
	TST	R0
	BEQ	1$
	CMP	@R5,R3
	BHIS	PHOUT
UNLDRV:	JSR	R5,COMERR
	 .WORD	UDRV.E
1$:
.ENDC
	TST	@R5
	BNE	PHOUT
.IF NE MMG$T
.IF EQ	XM$FET
	TST	@.KMONIN
	BEQ	UNLDRV
.ENDC
	CALL	@.P1SD
	MOV	@SP,R0
	MOV	@SP,ARGM1
.IFTF
	MOV	R5,R3
	MOV	$HSIZE-$ENTRY(R3),R4
	MOV	(PC)+,R5
.FNAM6:: .WORD	FNAME+6-USRBUF
	CLR	-(R5)
	MOV	R4,-(R5)
	ASR	@R5
.IFT
.$KADR	== .+2
	CALL	@#$KADR-$RMON
	BCC	2$
	MOV	R4,R0
	CLR	R4
.PLBYT	== .+2
	CALL	@#PLBYTE-$RMON
	BCS	BADFT
2$:	MOV	R2,@SP
.IFF
	MOV	@SP,R2
.ENDC
	MOV	R2,-(R5)
	MOV	$DVREC-$ENTRY(R3),R0
	BNE	3$
	BR	FCE0
FCE0X:	TST	(SP)+
FCE0:	 .WORD	EMTERR+0
COMXT4:	BR	COMXT3
3$:	MOV	@(PC)+,R1
.USRIO:: .WORD	.USRBU-USRBUF
	ADD	$HSIZE-$ENTRY(R3),R2
	BCS	BADFT
	CMP	R2,@#SYSPTR
	BHI	BADFT
	CMP	R2,R1
	BLOS	4$
	ADD	#USRSIZ,R1
	CMP	@SP,R1
	BLO	BADFT
.IF EQ	MMG$T
	CMP	R2,@.SYSLO
	BLOS	4$
.ENDC
.KMONIN == .+2
	TST	@#KMONIN-$RMON
	BNE	4$
BADFT:	JSR	R5,COMERR
	 .WORD	FETC.E
4$:
.IF EQ	MMG$T
.$SYS	== .+2
	CALL	@#$SYS-$RMON
.IFF
	CALL	$SYS.KM
.ENDC
	BCS	BADFT
	MOV	@SP,R1
	TST	10(R1)
	BPL	45$
	TST	@.KMONIN
	BEQ	UNLDRV
45$:	CLR	10(R1)
	CLR	R0
	MOV	(R1)+,R5
	BPL	7$
	ASL	R5
	ADD	R5,R1
	MOV	(R1)+,R5
	BPL	6$
	MOV	(R1)+,-(SP)
	MOV	@#SYSPTR,R5
	CALL	@GETVEC-$RMON(R5)
	MOV	(SP)+,R0
	BCS	BADFT
5$:	MOV	(R1)+,R5
6$:	ADD	R0,R5
7$:	BLE	8$
	MOV	R1,@R5
	ADD	(R1)+,(R5)+
	MOV	(R1)+,@R5
	BIS	#PR7,@R5
.IF NE	MMG$T
.IF NE	XM$FET
.INTSET	== .+2
	CALL	@#INTSET-$RMON
	BCS	UNLDRV
.ENDC
.ENDC
	BR	5$
.IF EQ	BF
UNLDRV:	JSR	R5,COMERR
	 .WORD	UDRV.E
.ENDC;EQ BF
8$:	MOV	@SP,R0
	ADD	#6,R0
.IF NE MMG$T
	ADD	R4,ARGM1
.IFF
	ADD	R4,@SP
.ENDC
.DRVTB	== .+2
	MOV	(PC)+,R1
.IF EQ BF
	 .WORD	DRVTBL+DRVTSZ-2-USRBUF
.IFF
	 .WORD	DRVTBL+DRVTSZ-2-$RMON
.ENDC
9$:	MOV	@R1,-(R2)
	ADD	@#SYSPTR,@R2
	TST	-(R1)
	BNE	9$
	MOV	R0,@R3
	CLR	R1
.DRCAL	== .+2
	CALL	@#DRCALL-$RMON
	BCC	93$
	CLR	@R3
	BR	BADFT
93$:
.IF NE MMG$T
	MOV	ARGM1,@SP
.ENDC
PHOUT:	BR	COMXT4
.DSABL	LSB
.SBTTL	RLEAS  - GET RID OF A .FETCHED DEVICE HANDLER
RLEAS:
	CMP	@R5,R3
	BHI	PHOUT
.IF NE BF
	TST	R0
	BNE	PHOUT
.ENDC
.CNFG2	== .+4
	BIS	#<LDREL$>,@#CONFG2-$RMON
	MOV	#2,R1
	MOV	R5,R3
	CALL	@.DRCAL
.IF EQ	MMG$T
	CLR	@R5
.IFF
.IF EQ	XM$FET
	CLR	@R5
.IFF
.INTRLS	== .+2
	CALL	@#INTRLS-$RMON
.ENDC
.ENDC
	BR	PHOUT
.IF NE	MMG$T
$SYS.KM::CLC
	MOV	@#PS,R1
	BIC	#CMODE!PMODE,@#PS
.$SYS	== .+2
	CALL	@#$SYS-$RMON
	BIS	R1,@#PS
	RETURN
.ENDC
.IF EQ BF
.SBTTL	DRVTBL - COPY OF TABLE OF RMON OFFSETS WHICH IS IN EACH DRIVER
DRVTBL:	.WORD	0
.IF NE MMG$T
	.WORD	$RELOC-$RMON
	.WORD	$MPPHY-$RMON
	.WORD	$GETBYT-$RMON
	.WORD	$PUTBYT-$RMON
	.WORD	$PUTWRD-$RMON
.ENDC
.IF NE ERL$G
	.WORD	$ERLOG-$RMON
.ENDC
.IF NE TIM$IT
	.WORD	$TIMIO-$RMON
.ENDC
	.WORD	$INTEN-$RMON
	.WORD	$FORK-$RMON
DRVTSZ	= . - DRVTBL
.ENDC
.SBTTL	USRCOM - SET UP USR FOR LOOKUP, ENTER, RENAME, DELETE
.ENABL	LSB
USRCOM:	ASR	R4
	MOV	R4,CHNLRG
	MOV	(SP)+,R2
	TST	@R3
	BMI	FCE0
	ROR	R0
	JSR	R2,1$
	RTS	PC
1$:	BCS	2$
	MOV	R2,ARGM3
2$:	ASL	R0
	MOV	R0,2(SP)
	CLR	C.SBLK(R3)
.IF NE MMG$T
	CALL	MAPFIL
.ENDC
	MOV	R5,-(SP)
	MOV	R3,-(SP)
	ASR	ARGM3
	JSR	R4,LK4DEV
	 BR	COMNDV
	BEQ	COMNDV
	ASL	ARGM3
.IF NE	BF
	MOV	R1,R5
	ASR	R5
	ADD	R3,R5
	ADD	R3,R5
.$OWNER	== .+2
	MOVB	$OWNER-$RMON(R5),R5
	BIT	#1,R1
	BEQ	3$
	ASR	R5
	ASR	R5
	ASR	R5
	ASR	R5
3$:	BIC	#^C<17>,R5
	BEQ	4$
	DEC	R5
	CMP	@.JOBNUM,R5
	BNE	COMNDV
4$:
.ENDC
	MOV	R3,R5
	MOV	(SP)+,R3
	BIS	R5,@R3
	BIS	#ACTIV$+DBLOK$*1,@R3
	MOV	(SP)+,R5
	SWAB	R1
	MOV	R1,C.DEVQ(R3)
	TST	@R2
	BPL	USRNF
	BIS	@SP,@R3
	TST	@R0
	BEQ	USR3
	JSR	R5,BLKCHK
USR2:	TST	(R5)+
ENXT:	TST	(R5)+
USR3:	RTS	R5
USRNF:	BIT	#SPECL$,@R2
	BEQ	USR3
	BIS	@SP,@R3
	BR	ENXT
COMNDV:	JSR	R5,COMERR
	 .WORD	NODV.E
.DSABL	LSB
.SBTTL	ENTRY - SCAN FOR ENTRY OF SPECIFIED TYPE IN CURRENT SEGMENT
ENTRY:	BIT	@R5,@R1
	BNE	USR2
	BIT	@R1,#ENDBLK
	BNE	ENXT
	ADD	E.LENG(R1),(PC)+
SBLK:	 .WORD	0
	CALL	INCR1
	BR	ENTRY
.SBTTL	INCR1/INCR1A/INCR2 - MOVE R1 PAST ONE OR TWO DIRECTORY ENTRIES
INCR1A:	ADD	E.LENG(R1),R5
	BR	INCR1
INCR2:	MOV	PC,-(SP)
INCR1:	ADD	USRBUF+D.EXTR,R1
	ADD	#L.ENTR,R1
	RTS	PC
.SBTTL	SEARCH - FIND A SPECIFIED PERMANENT FILE
.ENABL	LSB
SEARCH:	JSR	R5,BLKCHK
1$:	JSR	R5,FILSCN
	 BR	4$
2$:	TST	(R5)+
	TST	@R1
3$:	RTS	R5
4$:	JSR	R5,NXBLK
	 BR	3$
	BR	1$
.SBTTL	FILSCN - SCAN A DIR SEGMENT IN USR BUFFER FOR A SPECIFIC PERM FILE
FILSCN:	JSR	R5,ENTRY
	 .WORD	PERM
	 BR	3$
	CMP	@R0,E.NAME(R1)
	BNE	5$
	CMP	2(R0),E.NAME+2(R1)
	BNE	5$
	CMP	4(R0),E.NAME+4(R1)
	BEQ	2$
5$:	ADD	E.LENG(R1),SBLK
	CALL	INCR1
	BR	FILSCN
.DSABL	LSB
.SBTTL	NXBLK  - READ NEXT LOGICAL DIRECTORY BLOCK INTO USR BUFFER
NXBLK:	MOV	R0,-(SP)
	MOV	USRBUF+2,R0
	BEQ	ENRTS
	SWAB	R0
	BIC	#DBLK$M,@R3
	BIS	R0,@R3
	CMP	(R5)+,(PC)+
	.BR	BLKCHK
.SBTTL	BLKCHK - READ A DIRECTORY BLOCK INTO USR BUFFER
BLKCHK:	MOV	R0,-(SP)
	MOV	@R3,R0
	SWAB	R0
	BIC	#^C<37>,R0
	MOV	C.DEVQ(R3),-(SP)
	MOVB	@R3,@SP
	BIC	#301,@SP
	CMP	R0,@.BLKEY
	BNE	1$
	CMP	@SP,@.CHKEY
	BEQ	2$
1$:	MOV	R0,@.BLKEY
	JSR	R5,SEGRD
.CHKEY	== .+2
2$:	MOV	(SP)+,@#CHKEY-$RMON
	MOV	.D.USR,R1
	MOV	(R1)+,SBLK
	BEQ	ILLDIR
	BIT	#^C<107400>,@R1
	BNE	ILLDIR
ENRTS:	MOV	(SP)+,R0
RTS5:	RTS	R5
ILLDIR:	JSR	R5,COMERR
	.WORD	ILLD.E
.SBTTL	SEGRD1/SEGRD/SEGWR/SEGRW - READ/WRITE DIRECTORY SEGMENTS
SEGRD1:	MOV	#1,@.BLKEY
SEGRD:	CMP	(PC)+,PC
SEGWR:	CLC
.BLKEY	== .+2
	MOV	@#BLKEY-$RMON,R0
SEGRW:	JSR	R0,SKIPBL
	 .WORD	0
	 .WORD	0
.USRBU:: .WORD	USRBUF-USRBUF
	 .WORD	1000
	 .WORD	0
SKIPBL:	MOVB	(PC)+,(R0)+
CHNLRG:	 .WORD	0
	MOVB	#11,@R0
	SBCB	(R0)+
	ASL	@SP
	ADD	#DOFSET,@SP
	MOV	(SP)+,@R0
	TST	-(R0)
	EMT	375
	BCC	RTS5
IOER:	JSR	R5,COMERR
	 .WORD	DIRI.E
.SBTTL	CONSOL - REMOVE UNNECESSARY ENTRIES FROM A DIRECTORY
.ENABL LSB
CONSOL:	MOV	SBLK,-(SP)
	MOV	R4,-(SP)
	MOV	R3,-(SP)
	MOV	R1,-(SP)
	MOV	#L.ENTR,R4
	ADD	USRBUF+D.EXTR,R4
1$:	JSR	R5,ENTRY
	 .WORD	TENT
	 BR	5$
.IF NE	BF
	MOVB	E.JNUM(R1),R2
	BIT	#^C<MXJBNM>,R2
	BNE	3$
.$IMPUR	== .+2
	MOV	$IMPUR-$RMON(R2),R2
	BEQ	3$
.ENDC
	CLR	R5
	BISB	E.CHAN(R1),R5
.IF NE BF
	CMPB	I.CNUM(R2),R5
	BLOS	3$
.CNTXT	== .+2
	CMP	@#CNTXT-$RMON,R2
	BNE	2$
.IFF
.I.CNU	== .+2
	CMPB	@#I.CNUM-$RMON,R5
	BLOS	3$
.ENDC
	CMPB	CHNLRG,R5
	BEQ	3$
2$:	ASL	R5
	MOV	R5,-(SP)
	ASL	R5
	ASL	R5
	ADD	(SP)+,R5
.IF NE BF
	ADD	I.CSW(R2),R5
.IFF
.I.CSW	== .+2
	ADD	@#I.CSW-$RMON,R5
.ENDC
	TST	@R5
	BPL	3$
	MOV	C.DEVQ(R5),R2
	CLRB	R2
	BISB	@R5,R2
	BPL	3$
	BIC	#301,R2
	CMP	@.CHKEY,R2
	BEQ	4$
3$:	MOV	#EMPTY,@R1
4$:	ADD	R4,R1
	BR	1$
5$:	MOV	@SP,R1
6$:	JSR	R5,ENTRY
	 .WORD	EMPTY
	 BR	CNSLOV
	MOV	R1,R2
	ADD	R4,R2
	BIT	#EMPTY,@R2
	BEQ	9$
	ADD	E.LENG(R2),E.LENG(R1)
7$:	MOV	R2,R5
	ADD	R4,R5
	MOV	R1,-(SP)
	JSR	R5,ENTRY
	 .WORD	0
	MOV	R1,R3
8$:	MOV	(R5)+,(R2)+
	CMP	R5,R3
	BLOS	8$
	MOV	(SP)+,R1
	BR	6$
9$:	TST	E.LENG(R1)
	BNE	10$
	MOV	R1,R2
	MOV	R1,R3
	SUB	R4,R3
	CMP	R3,@SP
	BLO	10$
	BIT	#PERM,@R3
	BNE	7$
10$:	ADD	R4,R1
	BR	6$
CNSLOV:	MOV	R1,(PC)+
DREND:	 .WORD	0
	MOV	(SP)+,R1
	MOV	(SP)+,R3
	MOV	(SP)+,R4
	MOV	(SP)+,SBLK
	RTS	PC
.DSABL LSB
.SBTTL	LK4DEV - SCAN MONITOR DEVICE TABLES FOR SPECIFIED DEVICE
.ENABL	LSB
LK4DEV::
	MOV	(R0)+,R5
	BEQ	RTS4
	BCS	2$
.$UNAM	== .+2
	MOV	#$UNAM2-$RMON,R1
	MOV	#$SLOT+3,R3
1$:	DEC	R3
	BEQ	2$
	CMP	R5,(R1)+
	BNE	1$
	MOV	$UNAM1-$UNAM2-2(R1),R5
.$PNAM	== .+2
2$:	MOV	#$PNAME-$RMON,R2
	CMP	-(R2),-(R2)
	MOV	#-2,R3
3$:	MOV	R5,R1
	SUB	(R2)+,R1
	BLO	4$
	BEQ	5$
	SUB	#<^R  0>,R1
	BLO	4$
	CMP	R1,#7
	BLOS	5$
4$:	INC	R3
	CMP	R3,#$SLOT
	BLT	3$
	RTS	R4
5$:	ASL	R3
	BPL	6$
.SYIND	== .+2
	MOV	@#SYINDX-$RMON,R3
.$ENTR	== .+2
6$:	MOV	#$ENTRY-$RMON,R5
	ADD	R3,R5
	MOV	R5,R2
	ADD	#$STAT-$ENTRY,R2
	TST	(R4)+
	TST	@R5
RTS4:	RTS	R4
.DSABL	LSB
.SBTTL	COMMAND STRING INTERPRETER
.ENABL	LSB
CSI:
.IF EQ	MMG$T
	MOV	(PC)+,R2
.STKSV:: .WORD	STKSAV-USRBUF
1$:	MOV	(SP)+,-(R2)
	CMP	R2,.HANSP
	BHI	1$
	ASR	@R2
	BCS	2$
	CLR	-(SP)
2$:	MOV	(SP)+,(PC)+
ORGSPT:	 .WORD	0
	ASL	@R2
.ENDC
	MOV	SP,STKLVL
.IF NE	MMG$T
	MOV	@SP,REG0
	GET	SP,R0
	ADDR	STRING+2,R2
	GET	(R0)+,-(R2)
	GET	(R0)+,-(R2)
	GET	(R0)+,-(R2)
	CLR	ORGSPTR
	ASR	@R2
	BCC	3$
	MFPI	(R0)+
	MOV	(SP)+,(PC)+
ORGSPT:	 .WORD	0
3$:	ASL	@R2
	PUT	R0,SP
	MOV	R0,UMODSP
	MOV	R0,JOBSTK
.ENDC
.DSABL	LSB
.ENABL LSB
RESTRT:	MOV	R4,EMTMOD
	BNE	2$
	MOV	#6*400+10,R5
1$:	MOV	R5,R0
	EMT	374
	DECB	R5
	BPL	1$
2$:	BIT	#GTLIN$,@#JSW
	BNE	3$
.STATWD	== .+2
	TSTB	@#STATWD-$RMON
	BPL	3$
	JMP	ABORT2
3$:	MOV	R2,R5
	CLR	INFLAG
	MOV	STRING,R3
.IF EQ	MMG$T
	BNE	12$
.IFF;EQ MMG$T
	MOV	R3,R0
	BEQ	5$
	CALL	MAPFIL
	MOV	R5,R2
	MOV	R0,R3
	BR	12$
.ENDC
.IF EQ	BF
	MOV	PC,R0
	CMP	(R0)+,(PC)+
	 .ASCII	"*"<200>
	CMP	@R2,#2
	BHI	51$
	MOV	DEFEXT,R1
	BNE	4$
	CMPB	(R0)+,(PC)+
4$:	MOV	R1,R0
	TST	@R2
	BNE	10$
51$:
.IFF
5$:	CMP	@R2,#2
	BEQ	10$
	TST	@.JOBNUM
	BNE	6$
.ENDC
	BIT	#IFRVTTY,@.STATWD
	BNE	10$
.INBFPT	== .+2
	MOV	@#INBFPT-$RMON,R3
	BEQ	6$
	MOV	.INBFPT,-(SP)
	CMPB	@R3,#-1
	BNE	6$
	BIC	@(SP)+,R3
	BIC	#IFINP,@.STATWD
6$:	CLR	CSIBUF-2
	MOV	R3,INFLAG
.IF EQ	BF
	BEQ	10$
	BIT	#GTLIN$,@#JSW
	BEQ	9$
	MOVB	@R3,-(SP)
	BIC	#^C<177>,@SP
	CMPB	(SP)+,#CTRLC
	BNE	9$
	TSTB	(R3)+
	BPL	7$
	BIS	#IFRVTTY,@.STATWD
7$:	BIS	#IFGTCC,@.STATWD
8$:	TSTB	(R3)+
	BNE	8$
	MOV	R3,@(SP)+
	BR	RESTRT
9$:	CMPB	#<177>,@R3
	BEQ	913$
	TSTB	@R3
	BPL	12$
913$:	BIT	#<IFEKO$>,@.STATWD
	BNE	12$
.ENDC
10$:
.IF EQ	BF
.IF NE	BATC$H
	MOV	.$ENTR,R1
	MOV	BA.NUM(R1),R1
	BEQ	11$
	TST	BATSW$(R1)
	BNE	12$
.ENDC
11$:	.PRINT
..ECSI::MOV	R5,R5
.ENDC
12$:	MOV	#CSIBFL,R1
	CLR	R4
13$:
.IF EQ	MMG$T
	TST	R3
.IFF
	TST	STRING
	BNE	14$
	TST	INFLAG
.ENDC
	BEQ	18$
14$:	MOVB	(R3)+,R0
	BIC	#^C<177>,R0
	BEQ	19$
15$:	CMP	@R5,#2
	BLOS	17$
	CMP	#EQUALS,R0
	BEQ	16$
	CMP	#LANGLE,R0
	BNE	17$
	INC	R0
16$:	COM	R4
	BNE	17$
	CLR	R1
17$:	DEC	R1
	BLE	171$
	MOVB	R0,-(R2)
171$:	CMP	#CTRLC,R0
	BEQ	19$
	BR	13$
	.MCALL	.TTINR
18$:	.TTINR
	MOV	R5,R5
	BCS	18$
	CMP	#CR,R0
	BEQ	18$
	CMP	#LF,R0
	BNE	15$
19$:	MOV	INFLAG,R0
	BEQ	21$
	MOV	R3,@(SP)+
	MOVB	@R0,R3
	BPL	20$
	BIT	#IFEKO$,@.STATWD
	BNE	20$
	BICB	#200,@R0
	.PRINT
20$:	CMPB	CSIBUF-1,#CTRLC
	BNE	21$
ABORT2:
	BIS	SP,R0
.IF NE BF
	BIS	#IFCTLC,@.STATWD
.ENDC
	.EXIT
PRERR:	CSIERR	<Prot file>,2
21$:	TST	R1
	BLE	SYNBLE
.DSABL LSB
.SBTTL	GET FILE DESCRIPTORS AND OPEN FILES
.ENABL	LSB
CSI2:	CLRB	-(R2)
	MOV	ORGSPT,R0
	BEQ	2$
	MOV	R5,R3
.IF NE	MMG$T
	CALL	MAPFIL
.ENDC
1$:	MOVB	-(R3),(R0)+
	BNE	1$
2$:	MOV	@R5,R2
	CMP	R2,#2
	BHI	3$
JRETRN:	JMP	RETURN
SPECAL:	CALL	GETFD
	TST	R4
	BEQ	SWITLK
	TST	@R0
	BEQ	8$
	CALL	OUSTF1
8$:	TST	(R2)+
.IF EQ	MMG$T
SWITLK:	BR	SWITCH
.IFF
SWITLK:	JMP	SWITCH
.ENDC
3$:	MOV	R2,REG0
.IF NE	MMG$T
	MOV	R2,(PC)+
VHNSPC:	 .WORD	0
.ENDC
	TST	EMTMOD
	BEQ	5$
.IF NE	MMG$T
	MOV	R2,R0
	CALL	MAPFIL
	MOV	R0,R2
	MOV	R0,VHNSPC
.ENDC
	MOV	#39.,R1
	MOV	R2,R3
4$:	CLR	(R3)+
	SOB	R1,4$
5$:	CLR	R3
	CLR	SWTCNT
.IF NE	MMG$T
	ADDR	DEFBLK+10,R0
	MOV	DEFEXT,R1
	ADD	#4*2,R1
	MOV	#4,-(SP)
6$:	GET	-(R1),-(R0)
	DEC	@SP
	BNE	6$
	TST	(SP)+
	MOV	R0,(PC)+
VDFEXT:	 .WORD	0
.ENDC
	TST	R4
	BNE	GETDE
STRTIN:	MOV	#3,R3
.IF EQ	MMG$T
	MOV	HANSPC,R2
.IFF
	MOV	VHNSPC,R2
.ENDC
	ADD	#<5*2>*3,R2
	CLR	R4
GETDE:
.IF EQ	MMG$T
	MOV	DEFEXT,R1
.IFF;EQ MMG$T
	MOV	VDFEXT,R1
.ENDC
	MOV	#<^RDK >,DEV1
NXTFIL:	CMP	#9.,R3
SYNBLE:	BLE	SYNERR
NXT1:	TST	R4
	BEQ	7$
	TST	(R1)+
7$:	TST	(PC)+
EMTMOD:: .WORD	0
	BNE	SPECAL
	MOV	(PC)+,R2
.FILDE:: .WORD	FILDES-USRBUF
	CALL	GETFD
	TST	@R0
	BEQ	SWITCH
	MOV	R0,-(SP)
	MOV	REG0,-(SP)
	EMT	343
	BCS	HANERR
	MOV	R0,REG0
	MOV	R0,HANSPC
	MOV	(SP)+,R0
	TST	R4
	BEQ	INFILE
	CALL	OUSTUF
	MOV	@R2,-(SP)
	MOV	#EMT+40,-(SP)
	ADD	R3,@SP
	MOV	(SP)+,@PC
	 HALT
	BCC	SWITCH
	CMPB	#1,@#ERRBYT
	BNE	PRERR
	CSIERR	<Device full>,3
INFILE:	MOV	#EMT+20,-(SP)
	ADD	R3,@SP
	MOV	(SP)+,@PC
	 HALT
	BCC	SWITCH
	CSIERR	<File not found>,4
.DSABL	LSB
.SBTTL	GET SWITCHES
NOSWIT:	INC	R3
	CMPB	@R5,#COMMA
	BEQ	NXTFIL
	CMPB	@R5,#EQUALS
	BEQ	STRTIN
	MOV	(PC)+,-(SP)
SWTCNT:	 .WORD	0
.IF NE	MMG$T
	CALL	PUSHSP
.ENDC
	TSTB	@R5
	BEQ	RETURN
SYNERR:	CSIERR	<Invalid command>,0
.IF EQ	MMG$T
SWITCH:	CMPB	#SLASH,@R5
	BNE	NOSWIT
	MOV	R3,-(SP)
	SWAB	@SP
	MOVB	-(R5),@SP
	BEQ	SYNERR
	INC	SWTCNT
	CMPB	#'a,@SP
	BHI	1$
	CMPB	#'z,@SP
	BLO	1$
	BICB	#40,@SP
1$:	CMPB	#COLON,-(R5)
	BNE	SWITCH
	MOV	@SP,-(SP)
	BPL	2$
	INC	SWTCNT
	MOV	@SP,-(SP)
2$:	BIS	#100000,@SP
	MOV	R2,-(SP)
	MOV	R5,R0
	CALL	DECNUM
	CMPB	#PERIOD,@R5
	BEQ	5$
	CMPB	-(R0),(R5)+
	BNE	3$
	MOV	SP,R2
.IF EQ	GT$NM
	CALL	@.GTNM1
.IFF;EQ GT$NM
	CALL	GETNM1
.ENDC
	BR	4$
3$:	MOV	R0,R5
	CMPB	(SP)+,(R5)+
	CALL	OCTNUM
4$:	INC	R5
5$:	MOV	(SP)+,4(SP)
	MOV	(SP)+,R2
	BR	1$
HANERR:	CSIERR	<Invalid device>,1
.IFF
.ENABL	LSB
1$:	TST	R0
	BMI	SWITCH
	MOV	R0,-(SP)
	CALL	PUSHSP
	INC	SWTCNT
SWITCH:	CMPB	@R5,#SLASH
	BNE	NOSWIT
	MOVB	-(R5),R0
	BEQ	SYNERR
	CMPB	#'a,R0
	BHI	11$
	CMPB	#'z,R0
	BLO	11$
	BICB	#40,R0
11$:	SWAB	R0
	ADD	R3,R0
	SWAB	R0
	DEC	R5
2$:	CMPB	@R5,#COLON
	BNE	1$
	CMPB	#'A-1,-1(R5)
	BLO	5$
	MOV	R5,-(SP)
	CALL	DECNUM
	DEC	R5
	CMPB	1(R5),#PERIOD
	BEQ	4$
	TST	(SP)+
	MOV	@SP,R5
3$:	CALL	OCTNUM
4$:	MOV	(SP)+,@SP
	CALL	PUSHSP
	BR	6$
HANERR:	CSIERR	<Invalid device>,1
5$:	MOV	R2,-(SP)
	MOV	SP,R2
	MOV	@SP,-(SP)
	MOV	R0,-(SP)
.IF EQ	GT$NM
	CALL	@.GTNM1
.IFF;EQ GT$NM
	CALL	GETNM1
.ENDC
	MOV	(SP)+,R0
	MOV	(SP)+,R2
	CALL	PUSHSP
6$:	BIS	#100000,R0
	MOV	R0,-(SP)
	CALL	PUSHSP
	INC	SWTCNT
	BR	2$
.DSABL	LSB
.ENDC
SYNELK:	BR	SYNERR
.SBTTL	RETURN AND ERROR PROCESSING
.ENABL	LSB
MSG:	MOV	(PC)+,SP
STKLVL:	 .WORD	0
.IF NE	MMG$T
	MOV	UMODSP,JOBSTK
.ENDC
	TSTB	@#ERRBYT
	BMI	CSIER1
	MOVB	(R0)+,@#ERRBYT
	TST	STRING
	BNE	CSIER1
	JSR	R0,1$
	 .ASCII	"?CSI-F-"<200>
	 .EVEN
1$:	.PRINT
	MOV	(SP)+,R0
	.PRINT
	TST	(PC)+
INFLAG:	 .WORD	0
	BEQ	CSRTRY
	BIS	#IFABRT,@.STATWD
	.EXIT
CSIER1:
.IF EQ	MMG$T
	BIS	#1,SAVSTK
.IFF
	BIS	#1,SAVEST+4(SP)
.ENDC
RETURN:
.IF EQ	MMG$T
	MOV	#8.,R2
	MOV	(PC)+,R1
.SVSTK:: .WORD	SAVSTK-USRBUF
2$:	MOV	(R1)+,-(SP)
	SOB	R2,2$
.IFF
	CLR	R2
	MOV	REG0,(SP)
	PUT	JOBSTK,SP
.ENDC
.IF NE	BF
	MOV	@.CNTXT,-(SP)
	BIC	#CSIRN$,@(SP)+
.ENDC
	JMP	@.MONOU
CSRTRY:	MOV	(PC)+,R2
.HANSP:: .WORD	HANSPC-USRBUF
.IF EQ	BF
	MOV	EMTMOD,R4
	MOV	#1402,R0
3$:	EMT	^O374
	DECB	R0
	BGE	3$
	JMP	RESTRT
.IFF
.IF EQ	MMG$T
	MOV	ORGSPT,-(SP)
	BEQ	4$
	INC	@R2
3$:	TST	-(SP)
4$:	MOV	(R2)+,@SP
	CMP	R2,.STKSV
	BLO	3$
.IFF;EQ MMG$T
	MOV	(PC)+,R0
UMODSP:	 .WORD	0
	TST	ORGSPT
	BEQ	4$
	PUT	ORGSPT,-(R0)
	INC	@R2
4$:	PUT	(R2)+,-(R0)
	PUT	(R2)+,-(R0)
	PUT	(R2)+,-(R0)
	PUT	R0,SP
.ENDC
	MOV	EMTMOD,R4
.CSIER	== .+2
	JMP	@#CSIERR-$RMON
.ENDC
.DSABL	LSB
.SBTTL	OUSTUF
.ENABL	LSB
OUSTF1:
.IF NE	MMG$T
	MOV	R0,-(SP)
	MOV	(R0)+,FILDES
	MOV	@R0,FILDES+2
	ADDR	FILDES,R0
	BR	7$
.ENDC
OUSTUF:	MOV	R0,-(SP)
7$:	TST	2(R0)
	BNE	1$
	MOV	(PC)+,-(SP)
.DVSTS:: .WORD	DEVSTS-USRBUF
	EMT	342
	BCS	HANERR
	TST	@R0
	BMI	SYNELK
1$:	CLR	@R2
	CMPB	@R5,#LBRACK
	BNE	3$
	CALL	DECNUM
	CMPB	@R5,#RBRACK
	BNE	SYNELK
	DEC	R5
	MOV	(SP)+,@R2
3$:	MOV	(SP)+,R0
	RTS	PC
.IF NE	MMG$T
PUSHSP:	SUB	#2,JOBSTK
	PUT	JOBSTK,SP
	PUT	2(SP),@JOBSTK
	MOV	(SP)+,@SP
	RTS	PC
.ENDC
.SBTTL	GET FILE DESCRIPTOR SUBROUTINE
GETFD::	MOV	R2,-(SP)
	CLR	(R2)+
	CALL	GETNAM
	BEQ	5$
	CMPB	@R5,#COLON
	BNE	4$
	TST	2(R2)
	BNE	4$
	MOV	@R2,DEV1
	CALL	GETNAM
4$:	MOV	(PC)+,-(R2)
DEV1::	 .RAD50	"DK"
	ADD	#3*2,R2
	MOV	@R1,@R2
	CMPB	@R5,#PERIOD
	BNE	6$
.IF EQ	GT$NM
.GTNM1	== .+2
	CALL	@#GTNM1-$RMON
.IFF;EQ GT$NM
	CALL	GETNM1
.ENDC
	TST	-(R2)
5$:	CMP	(R2)+,(R2)+
6$:	TST	(R2)+
	BR	3$
.DSABL	LSB
.SBTTL	GET NAME SUBROUTINE
.IF EQ	GT$NM
GETNAM::MOV	EMTMOD,@.EMTMO
.GETNM	== .+2
	JMP	@#GETNM-$RMON
.EMTMO	== .
	 .WORD	EMTMO1-$RMON
.PSECT	USRRMN
GETNM::	CALL	GTNM1
.IFF;EQ GT$NM
GETNAM::CALL	GETNM1
.IFTF;EQ GT$NM
	CMP	(R2)+,(R2)+
	INC	R5
.IFT;EQ	GT$NM
GTNM1::
.IFF;EQ	GT$NM
GETNM1::
.IFTF;EQ GT$NM
	DEC	R5
	MOV	#3,R0
	CLR	@R2
1$:	DEC	R0
	JSR	R0,4$
2$:	 .ASCII	"%%"
	 .ASCII	"**"
	 .ASCII	"09"
	 .ASCII	"AZ"
	 .BYTE	'A+40,'Z+40
3$:	 .WORD	-11
	 .WORD	-15
	 .WORD	-22
	 .WORD	-100
	 .WORD	-140
4$:	CLR	-(SP)
5$:	CMPB	(R0)+,@R5
	BHI	7$
	CMPB	(R0)+,@R5
	BLT	5$
	CMPB	-(R0),-(R0)
	BNE	6$
.IFT;EQ GT$NM
	TST	#.-.
EMTMO1	==	.-2
.IFF;EQ GT$NM
	TST	EMTMOD
.IFTF;EQ GT$NM
	BEQ	7$
6$:	MOVB	@R5,@SP
	ADD	3$-2$(R0),@SP
	DEC	R5
7$:	ASL	@R2
	ASL	@R2
	ASL	@R2
	ADD	@R2,@SP
	ASL	@R2
	ASL	@R2
	ADD	(SP)+,@R2
	MOV	(SP)+,R0
	BNE	1$
	TST	-(R2)
	RTS	PC
.IFT;EQ GT$NM
	.PSECT	RMNUSR
.ENDC
.SBTTL	OCTAL/DECIMAL CONVERSION ROUTINE
.IF EQ CVT$NU
.$OCTN==.+2
OCTNUM::JMP	@#$OCTNUN-$RMON
.$DECN==.+2
DECNUM::JMP	@#$DECNUN-$RMON
.$CVTN==.+2
CVTNUM::JMP	@#$CVTNUN-$RMON
.PSECT	USRRMN
.IFTF;EQ CVT$NU
.ENABL	LSB
.IFF;EQ CVT$NU
OCTNUM::TST	(PC)+
DECNUM::SEC
CVTNUM::MOV	@SP,-(SP)
.IFT;EQ CVT$NU
$OCTNUM::TST	(PC)+
$DECNUM::SEC
$CVTNUM::MOV	@SP,-(SP)
.IFTF;EQ CVT$NU
	MOV	R3,-(SP)
	MOV	R4,-(SP)
	MOV	#100004,-(SP)
	ADC	@SP
	CMPB	-(R5),#MINUS
	BNE	1$
	ADD	#140000,@SP
1$:	ASL	@SP
	ADC	R5
	CLR	R4
2$:	MOVB	-(R5),R3
	SUB	#'0,R3
	CMPB	R3,@SP
	BHIS	4$
	ASL	R4
	CMPB	@SP,#10.
	BNE	3$
	ADD	R4,R3
3$:	ASL	R4
	ASL	R4
	ADD	R3,R4
	BR	2$
4$:	TST	(SP)+
	BPL	5$
	NEG	R4
5$:	MOV	R4,6(SP)
	MOV	(SP)+,R4
	MOV	(SP)+,R3
	RTS	PC
.DSABL	LSB
.IFT;EQ CVT$NU
	.PSECT	RMNUSR
.ENDC;EQ CVT$NU
.SBTTL	DRCALL -- call handler entry points
	.PSECT	USRRMN
.ENABLE LSB
	.MCALL	.CKXX
	.CKXX	SP
							S.BEG=1000
DRCALL::
							CK.SP=S.BEG
	MOV	R5,-(SP)
							CK.SP ,-2,S.R5
	MOV	R4,-(SP)
							CK.SP ,-2,S.R4
	MOV	R3,-(SP)
							CK.SP ,-2,S.R3
	MOV	R2,-(SP)
							CK.SP ,-2,S.R2
	MOV	R1,-(SP)
							CK.SP ,-2,S.R1
	MOV	R0,-(SP)
							CK.SP ,-2,S.R0
	.ADDR	#DRREAD,R4
	MOV	GETVEC,DRGVEC
	CMP	R1,#12
	BNE	10$
	MOV	R0,R4
	MOV	R5,DRGVEC
10$:
	MOV	R3,R5
	TST	R1
	BNE	20$
	TST	KMONIN
	BEQ	20$
	MOV	#4,R1
20$:
	MOV	R1,R3
	MOV	@R5,R0
	MOV	4(R0),R0
	CMP	#240,R0
	BHI	50$
	CMP	#277,R0
	BLO	50$
	ASR	R1
	.ADDR	#DRTABL,R1,ADD
	BITB	@R1,R0
	BEQ	50$
	CLR	BLKEY
	MOV	$DVREC-$ENTRY(R5),R0
	DEC	R0
	MOV	#256.,R1
	MOV	$USRLC,R2
	CALL	@R4
	BCS	60$
	MOV	R2,R1
	CMP	(R1)+,#^rHAN
	BNE	50$
	ADD	R3,R1
	CMP	R3,#10
	BLO	30$
	SUB	#6,R1
30$:
	MOV	@R1,R0
	BEQ	50$
	CMP	R0,#1000
	BLO	40$
	MOV	R0,-(SP)
								CK.SP ,-2
	ROR	R0
	SWAB	R0
	BIC	#^c377,R0
	ADD	$DVREC-$ENTRY(R5),R0
	DEC	R0
	MOV	#2*256.,R1
	CALL	@R4
	MOV	(SP)+,R0
								CK.SP ,+2
	BCS	60$
	BIC	#^c777,R0
40$:
	ADD	R2,R0
	MOV	#$SLOT*2,R2
.IF NE	MMG$T
	MOV	@#PS,R1
	BIC	#PMODE!CMODE,@#PS
	MOV	R1,-(SP)
								CK.SP ,-2,S.PS
								CK.SP S.PS
	BIC	#1,@SP
.IFTF
	MOV	#.-.,R1
DRGVEC	=:.-2
	CALL	@R0
.IFT
							CK.SP S.PS
	ADC	@SP
								CK.SP S.PS,+2
	MOV	(SP)+,@#PS
.ENDC
	BCC	50$
								CK.SP S.R0
	MOV	R0,@SP
	BR	70$
50$:
	TST	(PC)+
60$:
								CK.SP S.R0
	BIC	@SP,@SP
70$:
								CK.SP S.R0,+2
	MOV	(SP)+,R0
								CK.SP S.R1,+2
	MOV	(SP)+,R1
								CK.SP S.R2,+2
	MOV	(SP)+,R2
								CK.SP S.R3,+2
	MOV	(SP)+,R3
								CK.SP S.R4,+2
	MOV	(SP)+,R4
	BR	80$
DRREAD:
	MOV	R5,-(SP)
	.ADDR	#DRCNT+2,R5
							CK.R5=DRCNT+2
	MOV	R1,-(R5)
							CK.R5 DRCNT,-2
	MOV	R2,-(R5)
							CK.R5 DRBUF,-2
							CK.R5 DRIOB
.IF EQ	MMG$T
	CALL	$SYS
.IFF;EQ	MMG$T
	MOV	$USRLC,-(SP)
	ADD	#$SYS.KM-RMNUSR,@SP
	CALL	@(SP)+
.ENDC;EQ MMG$T
80$:
								CK.SP S.R5,+2
	MOV	(SP)+,R5
								CK.SP S.BEG
	RETURN
.DSABL	LSB
DRTABL:
	.BYTE	001
	.BYTE	002
	.BYTE	004
	.BYTE	010
	.BYTE	002
	.BYTE	004
	.EVEN
DRIOB:
DRBUF:	.BLKW	1
DRCNT:	.BLKW	1
	.WORD	0
	.PSECT	RMNUSR
.SBTTL	LINE BUFFER AND STACK SAVE AREA
FNAME:	BSS	4
.IF NE	MMG$T
JOBSTK:	.WORD	0
.ENDC
DEVSTS::.BLKW	4
.IIF NDF CSIBFL,	CSIBFL	=	81.
	.BLKB	CSIBFL
	.EVEN
CSIBUF:
HANSPC:	.WORD	0
DEFEXT:	.WORD	0
STRING:	.WORD	0
.IF NE	MMG$T
DEFBLK:	.WORD	0,0,0,0
.ENDC
.IF EQ	MMG$T
SAVSTK:	.BLKW	7
.ENDC
REG0:	.WORD	0
STKSAV:
FILDES:	.BLKW	5
.SBTTL	FINAL SIZE CHECKS AND ADJUSTMENTS
USRSZ	== . - USRBUF + 777 / 1000
USRSIZE	== USRSZ * 1000
USRLEN	== USRSZ * 400
$USIZ$	== .-USRBUF/2
.IF EQ	MMG$T
 .IF NE	USRSZ-10
 .ERROR	.-USRBUF-10000/2
 .ENDC
.ENDC
.	= USRBUF + USRSIZE
SWAPSZ	== 27.
.IIF DF	NLUSR,	.LIST
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 