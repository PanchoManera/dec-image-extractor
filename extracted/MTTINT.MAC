.MCALL .MODULE
.MODULE MTTINT,VERSION=22,COMMENT=<Multi-terminal Interrupt>

;                  COPYRIGHT (c) 1984, 1985, 1986 BY
;             DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;                         ALL RIGHTS RESERVED.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
.SBTTL
.SBTTL	********************************************
.SBTTL	*					   *
.SBTTL	*     MULTI-TERMINAL INTERRUPT SERVICE     *
.IF EQ	BF
.SBTTL	*	 FOR THE SINGLE JOB MONITOR	   *
.IFF
.IF EQ	MMG$T
.SBTTL	*   FOR THE FOREGROUND/BACKGROUND MONITOR  *
.IFF
.SBTTL	*      FOR THE EXTENDED MEMORY MONITOR     *
.ENDC
.ENDC
.SBTTL	*					   *
.SBTTL	********************************************
.SBTTL
.SBTTL	Macro definitions
.MACRO	SPL	N
.IIF NDF PSWMTI, PSW1ST:
.IF NE	.-PSW1ST
	 .WORD	PSWMTI
.IFF
	 .WORD	PSWLST
.ENDC
PSWMTI	== .-2
.IF EQ	N
	 .WORD	-2
.IFF
	 .WORD	N*40,PS
.ENDC
.ENDM	SPL
.MACRO	GETPSW
.IIF NDF PSWMTI, PSW1ST:
.IF NE	.-PSW1ST
	 .WORD	PSWMTI
.IFF
	 .WORD	PSWLST
.ENDC
	 .WORD	-4
PSWMTI	== .-4
.ENDM	GETPSW
.MACRO	PUTPSW
.IIF NDF PSWMTI, PSW1ST:
.IF NE	.-PSW1ST
	 .WORD	PSWMTI
.IFF
	 .WORD	PSWLST
.ENDC
	 .WORD	-6
PSWMTI	== .-4
.ENDM	PUTPSW
.SBTTL	Definition of symbols
.PSECT	MTINT$
T.TKS	==: 0
T.TKB	==: 2
T.TPS	==: 4
T.TPB	==: 6
DL.DTR	==:      2
DL.RTS	==:      4
DL.DIE	==:     40
DL.SRD	==:   2000
DL.CAR	==:  10000
DL.CSD	==:  20000
DL.RNG	==:  40000
DL.DIN	==: 100000
DL.CHR	==:    377
DL.PAR	==:  10000
DL.FRM	==:  20000
DL.OVR	==:  40000
DL.ERR	==: 100000
.IF NE	DZ11$N
DZ.CSR	== 0
DZMNT$	==     10
DZCLR$	==     20
DZMSE$	==     40
DZRCV$	==    100
DZRDN$	==    200
DZTRL$	==   3400
DZSAE$	==  10000
DZSAL$	==  20000
DZTIE$	==  40000
DZTRD$	== 100000
DZ.RBUF	== 2
DZICH$	==    377
DZRCL$	==   3400
DZPAR$	==  10000
DZFRM$	==  20000
DZOVR$	==  40000
DZDVD$	== 100000
DZ.LPR	== 2
DZLIN$	==      7
DZLEN$	==     30
DZSTP$	==     40
DZNPR$	==    100
DZEPR$	==    200
DZSPD$	==   7400
DZRCO$	==  10000
DZANS$	= DZST$P!DZLE$N!DZSP$D!DZRCO$
DZ.TCR	== 4
DZ.DTR	== 5
DZ.RNG	== 6
DZ.TDR	== 6
DZ.CAR	== 7
DZ.BRK	== 7
.ENDC
.SBTTL	DLIINT - DL11 input interrupt service
.ENABL	LSB
DLIINT::
TTIINT::
.IF GT	DL11$N-1
	GETPSW
	MOV	(SP)+,DLTMP
.ENDC
DLIHOK::
	JSR	R5,$INTEN
	 .WORD	^C<PR4>&PR7
TTIIN2::
.IF EQ	HSR$B
	JSR	R3,SAVE30
.IF GT	DL11$N-1
	MOV	DLTMP,R4
	BIC	#^C<17>,R4
	ASL	R4
	MOV	DLTBL(R4),R3
PDLTB0	== .-2
.IFF
	MOV	DLTBL,R3
.ENDC
	MOV	T.CSR(R3),R4
.IF NE	DL11$M
	BIT	#REMOT$,@R3
	BEQ	1$
	MOV	@R4,R0
	BMI	DLMCTL
.ASSUME	DL.DIN	EQ	100000
1$:
.ENDC
HKPC08 == .
	MOV	T.TKB(R4),R0
.ASSUME	.-HKPC08 EQ 4
	TSTB	T.CNF2(R3)
	BMI	8$
.ASSUME	RPALL$	EQ	200
	TST	R0
.ASSUME	DL.ERR	EQ	100000
	BPL	2$
	BIT	#DL.PAR!DL.FRM,R0
	BNE	SCNOP
2$:	BIC	#^C<177>,R0
	BEQ	SCNOP
.IFF
.IF GT	DL11$N-1
	MOVB	DLTMP,R4
	BIC	#^C<17>,R4
	ASL	R4
PHSRRB	== .+2
	MOV	DLTBL(R4),R4
.IFF
	MOV	DLTBL,R4
.ENDC
.IF NE	DL11$M
	BIT	#REMOT$,@R4
	BEQ	3$
	MOV	@T.CSR(R4),R5
	BPL	3$
.ASSUME	DL.DIN	EQ	100000
	JSR	R3,SAVE30
	MOV	R4,R3
	MOV	R5,R0
	MOV	T.CSR(R3),R4
	BR	DLMCTL
3$:
.ENDC
	MOV	T.CSR(R4),R5
HKPC09 == .
	MOV	T.TKB(R5),-(SP)
.ASSUME	.-HKPC09 EQ 4
	MOV	HSRB,R5
	MOV	R4,(R5)+
	MOV	(SP)+,(R5)+
PHSRRT	== .+2
	CMP	R5,#HSRBUE
	BLO	4$
	MOV	HSRBRP,R5
4$:	MOV	R5,HSRB
	INC	HSRBCC
	BNE	SCNOP
FRQHOK::
	JSR	R5,$FORK
	 .WORD	TIFBLK-.
5$:	MOV	HSRBGP,R1
	MOV	(R1)+,R3
	MOV	(R1)+,R0
	CMP	R1,HSRBEP
	BLO	6$
	MOV	HSRBRP,R1
6$:	MOV	R1,HSRBGP
	MOV	T.CSR(R3),R4
	TSTB	T.CNF2(R3)
	BMI	8$
.ASSUME	RPALL$	EQ	200
	TST	R0
	BPL	7$
.ASSUME	DL.ERR	EQ	100000
	BIT	#DL.PAR!DL.FRM,R0
	BNE	11$
7$:	BIC	#^C<177>,R0
	BEQ	11$
.ENDC
8$:	JSR	PC,INPTR
	BEQ	10$
INTCOM:
.IF NE	BF
	MOV	@R3,-(SP)
	BIT	#SHARE$,T.STAT(R3)
	BEQ	9$
	MOV	I.TERM(R5),@R3
9$:
.ENDC
	JSR	PC,INCHAR
.IF NE	BF
	MOV	(SP)+,@R3
.ENDC
10$:
.IF NE	HSR$B
 .IF NE	DZ11$N
	BIT	#DZ11$,T.STAT(R3)
	BNE	SCNOP
 .ENDC
11$:	DEC	HSRBCC
	BPL	5$
.ENDC
SCNOP::	RTS	PC
.DSABL	LSB
.IF NE	DL11$M
.SBTTL	DLMCTL - DL11E modem control routine
.ENABL	LSB
DLMCTL::BIT	#DL.RNG,R0
	BNE	DLRNG
	BIT	#DL.CAR,R0
	BNE	DLCAR
	BIT	#HNGUP$,T.STAT(R3)
	BNE	2$
	BIT	#<DL.CSD!DL.SRD>,R0
	BNE	2$
.IF NE	U.K.
..UKDL	== .
	BR	DLWCR1
.ENDC
	JSR	R1,QTIMR
	 .WORD	2*CLOCK
DLCRP1:: .WORD	DLWCAR
	BR	2$
DLCAR:	BIT	#SHARE$,T.STAT(R3)
	BNE	15$
	TST	T.OWNR(R3)
	BEQ	2$
15$:	JSR	PC,CTIMR
1$:	BIC	#HNGUP$,T.STAT(R3)
.IF NE	MAT$S
	JSR	PC,CARON
.ENDC
	BR	2$
DLWCAR::JSR	R5,SAVE52
	MOVB	R0,R3
	ADD	PC,R3
	MOV	TCBLST-.(R3),R3
DLWCR1:	MOV	T.CSR(R3),R4
	BIS	#HNGUP$,T.STAT(R3)
	BIC	#DL.DTR!DL.RTS,@R4
.IF NE	MAT$S
	JSR	PC,HNGON
.ENDC
	BR	2$
DLRNG:	BIT	#SHARE$,T.STAT(R3)
	BNE	25$
	TST	T.OWNR(R3)
	BEQ	2$
25$:	JSR	PC,CTIMR
	BIS	#DL.DTR!DL.RTS,@R4
	BIT	#DL.CAR,@R4
	BNE	1$
	JSR	R1,QTIMR
	 .WORD	30.*CLOCK
DLCRP2:: .WORD	DLWCAR
2$:	RTS	PC
.DSABL	LSB
.ENDC
.IF NE	DL11$M!MTI$M
.SBTTL	Mark time and cancel mark time routines
QTIMR:	JSR	R5,SAVE52
.IF NE	BF
	MOV	T.JOB(R3),T.TBLK+C.JNUM(R3)
.ENDC
	ADD	#T.TBLK,R3
	CLR	(R3)+
	MOV	(R1)+,(R3)+
	MOV	(R1)+,C.COMP-C.LINK(R3)
	MOV	R1,12(SP)
	JMP	TIMIO
CTIMR:	JSR	R5,SAVE52
	MOV	T.TBLK+C.SEQ(R3),R0
.IF NE	BF
	MOVB	T.JOB(R3),R2
.ENDC
	MOV	#-1,R1
	CLR	R5
	JMP	CMARKT
.ENDC
.IF NE	MTI$M
.SBTTL	DLMPOL - Routine to poll each DL11
DLMPOL::JSR	R5,SAVE52
	CLR	R2
PDLCS1	== .+2
1$:	MOV	DLTBL(R2),R3
	MOV	T.CSR(R3),R4
	BEQ	3$
	BIT	#REMOT$,@R3
	BEQ	2$
	BIS	#DL.DIE,@R4
2$:
HKPC01 == .
	BIS	#IENABL,@R4
.ASSUME	T.TKS	EQ	0
.ASSUME .-HKPC01 EQ 4
	BIT	#INEXP$,T.STAT(R3)
	BEQ	3$
	INC	T.RTRY(R3)
	CMP	#4,T.RTRY(R3)
	BNE	3$
	CLR	T.RTRY(R3)
	CMP	@T.VEC(R3),@#SYSPTR
	BLO	3$
HKPC02 == .
	BIC	#IENABL,T.TPS(R4)
	BIS	#IENABL,T.TPS(R4)
.ASSUME	.-HKPC02 EQ 14
3$:	TST	(R2)+
	CMP	R2,#DL11$N*2
	BLO	1$
DLTIMR:	MOV	DLTMCP,DLTCOM
	JSR	R5,$TIMIO
	 .WORD	DLTMBK - .
	 .WORD	0
	 .WORD	0
	 .WORD	CLOCK/2
	RTS	PC
DLTMBK:	.WORD	0,0
	.WORD	0,0
	.WORD	177444
	.WORD	-1
DLTCOM:	.WORD	0
DLTMCP::.WORD	DLMPOL
.ENDC
.SBTTL	INPTR and OUTPTR - Ring pointer set up subroutines
.ENABL	LSB
INPTR:
.IF NE	BF
	MOV	TTIUSR,R5
.ENDC
	BIT	#DTACH$,T.STAT(R3)
	BEQ	1$
	SEZ
	RTS	PC
OUTPTR:
.IF NE	BF
	MOV	TTOUSR,R5
1$:	BIT	#SHARE$,T.STAT(R3)
	BNE	2$
	MOV	T.OWNR(R3),R5
	BEQ	4$
	TST	T.STAT(R3)
.ASSUME	CONSL$	EQ	100000
	BPL	3$
2$:	MOV	R5,R1
	ADD	#I.ICTR,R1
	RTS	PC
.IFF
1$:
.ENDC
3$:	MOV	R3,R1
	ADD	#T.ICTR,R1
4$:	RTS	PC
.DSABL	LSB
.SBTTL	Control character input dispatch table
.MACRO	CTLCHI	C
.NCHR	......,<C>
.IF GT	......-1
INP'C::
.=C*2+TTITBL
	.WORD	INP'C-TTIBAS
.=INP'C
.SBTTL	Process C input
.IFF
CTRL.'C::
.=''C-100*2+TTITBL
	.WORD	CTRL.'C-TTIBAS
.=CTRL.'C
.SBTTL	Process CTRL/'C input
.ENDC
.ENDM	CTLCHI
	.WORD	ALT-TTIBAS
	.WORD	ALT-TTIBAS
	.WORD	RUB-TTIBAS
TTITBL:
.REPT	'Z+1-100
	.WORD	TTINCC-TTIBAS
.ENDR
.SBTTL	INCHAR - Input character processing
.ENABL	LSB
INCHAR::
.IF NE	SCCA$G
	CMPB	R0,#CTRLC
	BNE	10$
	BITB	#CC$ALL,INDSTA
	BEQ	10$
.IF NE	BF
	ADDR	BKGND,SP
	CMP	R5,(SP)+
	BNE	10$
.ENDC
	RTS	PC
10$:
.ENDC
	TSTB	T.CNF2(R3)
.ASSUME	RPALL$	EQ	200
	BMI	TTINC3
	BIT	#TTLC$,@R3
	BNE	1$
	CMPB	R0,#'A!40
	BLO	1$
	CMPB	R0,#'Z!40
	BHI	1$
	BICB	#40,R0
1$:	CMP	R0,#'Z-100
	BLOS	2$
..ALT	== .+2
	CMP	R0,#177
	BLO	TTINCC
	SUB	#200,R0
2$:	ASL	R0
TTITPT	== .+2
	MOV	TTITBL(R0),-(SP)
	ADD	PC,@SP
TTIBAS:
	ASR	R0
	MOV	R3,R2
	ADD	#T.STAT,R2
	JMP	@(SP)+
CTLCHI	CR
.IF NE	SYT$K
	TSTB	T.XFLG(R3)
	BNE	11$
.ENDC
	JSR	PC,TTINCC
	MOV	#LF,R0
	BR	TTINC3
TTINCC:
.IF NE	SYT$K
	TSTB	T.XFLG(R3)
	BEQ	12$
11$:	JMP	XPROC
12$:
.ENDC
	BIT	#TTSPC$,@R3
	BNE	TTINC3
	CMPB	T.PTTI(R3),#RUBOUT
	BNE	TTINC3
	JSR	R5,ECHO
	 .ASCII	"\"<0>
TTINC3:	CMP	@R1,#TTYIN
	BGE	7$
	INC	@R1
	INC	-(R1)
	CMP	@R1,6(R1)
	BNE	3$
	SUB	#TTYIN,@R1
3$:	MOVB	R0,@(R1)+
	JSR	PC,EOLTST
	BNE	4$
	INC	T.TTLC-T.ICTR(R1)
.IF NE	BF
	CMP	TTHIUS,R5
	BNE	4$
.IFF
	TST	TTHIUS
	BEQ	4$
.ENDC
	TST	T.STAT(R3)
	BPL	4$
	JSR	PC,TTHIN
	MOV	T.CSR(R3),R4
4$:	MOVB	R0,T.PTTI(R3)
	TSTB	T.CNF2(R3)
	BMI	5$
	BIT	#TTSPC$,@R3
	BNE	5$
	JSR	PC,TTOPT3
.IF NE	MAT$S!BF
	TST	T.TTLC-T.ICTR(R1)
.ENDC
.IF EQ	MAT$S
	BEQ	6$
.IFF
	BNE	5$
	JSR	PC,CLRIN
	BR	6$
.ENDC
5$:
.IF NE	MAT$S
	JSR	PC,SETIN
.ENDC
.IF NE	BF
	JSR	R4,UNBLOK
	 .WORD	TTIWT$
.ENDC
6$:	RTS	PC
7$:	TSTB	T.CNF2(R3)
	BMI	6$
	MOVB	R0,T.PTTI(R3)
DING:	MOV	#BELL,R0
	JMP	TTOPT4
.DSABL	LSB
.SBTTL	INPUT CONTROL CHARACTER PROCESSING
.ENABL	LSB
.IF NE	BF
CTLCHI	B
	JSR	PC,SWICTX
	MOV	BCNTXT,R2
XCOM:	MOV	R2,TTIUSR
.IF NE	SYT$K
	TSTB	XFLG
	BNE	TTOSET
.ENDC
	CMP	R2,TTOUSR
	BEQ	2$
TTOSET::MOV	R2,TTOUSR
	MOV	I.TID(R2),T.TID(R3)
	JMP	TTOENB
CTLCHI	F
	JSR	PC,SWICTX
	MOV	FCNTXT,R2
	BEQ	1$
.IF NE	SYT$K
	CMP	I.CNSL(R2),R3
	BNE	1$
.ENDC
	BIT	#NORUN$,I.BLOK(R2)
	BEQ	XCOM
1$:	JSR	R5,ECHO
	 .ASCII	"F?"
	JMP	ECHOCL
.ENDC
ALT:	MOV	#ESCAPE,R0
BTINC3:	BR	TTINC3
CTLCHI	O
	MOV	R1,R2
	ADD	#T.OCTR-T.ICTR,R2
	CLRB	(R2)+
	MOVB	@R2,-(SP)
	CLRB	(R2)+
	MOV	@R2,-4(R2)
	JSR	R5,ECHO0C
	 .ASCII	<CR><LF>
	COMB	@SP
	MOVB	(SP)+,T.OCTR+1-T.ICTR(R1)
	BEQ	2$
.IF NE	BF
	JSR	R4,UNBLOK
	 .WORD	TTOWT$!TTOEM$
.ENDC
2$:	RTS	PC
.DSABL	LSB
CTLCHI	C
.ENABL	LSB
.IF NE	SYT$K
	TSTB	T.XFLG(R3)
	BEQ	2$
1$:	JSR	R5,ECHO0C
	 .ASCII	<CR><LF>
	CLR	T.XFLG(R3)
	RTS	PC
2$:
.ENDC
	TST	@R2
	BPL	3$
.IF NE	BF
	TST	I.SCCA(R5)
.IFF
	TST	I.SCCA
.ENDC
	BEQ	4$
3$:	BIT	#TTSPC$,@R3
	BNE	5$
4$:	JSR	R5,ECHO0C
	 .ASCII	<CR><LF>
5$:	CMPB	R0,T.PTTI(R3)
	BNE	BTINC3
	TST	T.STAT(R3)
.ASSUME	CONSL$	EQ	100000
	BPL	7$
.IF NE	BF
	MOV	I.SCCA(R5),R2
	BNE	8$
	TST	I.JNUM(R5)
	BNE	6$
	BIS	#IFABRT,STATWD
.IFF
	MOV	I.SCCA,R2
	BNE	8$
	BIS	#IFABRT!IFCTLC,STATWD
.ENDC
	BICB	#<LN$IND!IN$IND!IN$RUN>,INDSTA
	TST	EXTFLG
	BNE	BTINC3
.IF NE	BATC$H
	MOV	$ENTRY+BA.NUM,R2
	BEQ	6$
	CLR	BATSW$(R2)
.ENDC
6$:	JMP	$RQABT
7$:	BIS	#CTRLC$,T.STAT(R3)
	BR	9$
8$:
.IF NE	MMG$T
	MOV	@#KISAR1,-(SP)
	MOV	I.SCCA+2(R5),@#KISAR1
.ENDC
	BIS	#100000,@R2
.IF NE	MMG$T
	MOV	(SP)+,@#KISAR1
.ENDC
9$:
.IF NE	MAT$S
	JSR	PC,CTCON
.ENDC
	JMP	TTINC3
.DSABL	LSB
.ENABL	LSB
RUB:	ADD	#200,R0
CTLCHI	U
	BIT	#TTSPC$,@R3
	BNE	BTINC3
	ROR	-(SP)
.IF NE	SYT$K
	TSTB	T.XFLG-T.STAT(R2)
	BEQ	3$
	ADD	#T.XFLG+1-T.STAT,R2
	TST	(SP)+
	BMI	1$
	CLRB	(R2)+
	CLR	(R2)+
	CLR	(R2)+
	CLR	(R2)+
	CLR	(R2)+
	BR	12$
1$:	MOVB	(R2)+,R5
	BEQ	2$
	ADD	R2,R5
	INC	R5
	MOVB	@R5,R0
	CLRB	@R5
	DECB	-1(R2)
	TST	@R3
	BMI	7$
	CMPB	T.XPRE(R3),#RUBOUT
	BEQ	91$
	MOVB	#RUBOUT,T.XPRE(R3)
	BR	9$
2$:	CLRB	T.XPRE(R3)
	BR	ECHOCL
.ENDC
3$:	ADD	#T.PTTI-T.STAT,R2
4$:	TST	@R1
	BEQ	11$
	MOVB	@-(R1),R0
	JSR	PC,EOLTST
	BEQ	10$
	CMP	@R1,-2(R1)
	BNE	5$
	ADD	#TTYIN,@R1
5$:	DEC	(R1)+
	DEC	@R1
6$:	TST	@SP
	BPL	4$
	MOV	@R3,(SP)+
.ASSUME	BKSP$	EQ	100000
	BPL	8$
7$:	JSR	R5,ECHO
	 .ASCII	<BS><SPACE>
	MOV	#BS,R0
.IF EQ SYT$K
	BR	TTOPT4
.IFF
	JMP	TTOPT4
.IFTF
8$:	CMPB	@R2,#RUBOUT
.IFT
	BEQ	TTOPT3
.IFF
	BEQ	91$
.IFTF
	MOVB	#RUBOUT,@R2
9$:	JSR	R5,ECHO
	 .ASCII	"\"<0>
.IFT
	BR	TTOPT3
.IFF
91$:	JMP	TTOPT3
.ENDC
10$:	TST	(R1)+
11$:	CLRB	@R2
	TST	(SP)+
	BPL	12$
	TST	@R3
	BPL	ECHOCL
	RTS	PC
12$:	JSR	R5,ECHO
	 .ASCII	"^U"
ECHOCL:	JSR	R5,ECHO
	 .ASCII	<CR><LF>
	RTS	PC
.DSABL	LSB
CTLCHI	S
	TSTB	@R3
.ASSUME	PAGE$	EQ	200
	BPL	JTINCC
	BIS	#PAGE$,@R2
	RTS	PC
CTLCHI	Q
	BIC	#PAGE$,T.STAT(R3)
	TSTB	@R3
	BPL	JTINCC
.IF NE	DZ11$N
	BIT	#DZ11$,T.STAT(R3)
	BEQ	1$
	MOVB	T.PUN(R3),R2
PBMSK1	== .+2
	BICB	BITMSK(R2),DZ.TCR(R4)
	BR	DZOENB
1$:
.ENDC
HKPC03 == .
	CLR	T.TPS(R4)
.ASSUME	.-HKPC03 EQ 4
	BR	DLOENB
.IF NE	BF
.ENABL	LSB
SWICTX:	BIT	#SHARE$,T.STAT(R3)
	BEQ	1$
	BIT	#FBTTY$,@R3
	BEQ	1$
.IF NE	SYT$K
	MOV	T.XFLG(R3),(PC)+
XFLG:	.WORD	0
	CLR	T.XFLG(R3)
.ENDC
	RTS	PC
1$:	TST	(SP)+
.ENDC
JTINCC:	JMP	TTINCC
.DSABL	LSB
.IF NE	SYT$K
CTLCHI	X
	JSR	PC,SWICTX
	ADD	#T.XFLG-T.STAT,R2
	MOV	#201,(R2)+
	CLR	(R2)+
	CLR	(R2)+
	CLR	(R2)+
	CLR	(R2)+
	MOV	TTIUSR,TTOUSR
	BR	TTOENB
.SBTTL	XPROC - Process characters in ^X sequence
XPROC::	MOV	R3,R5
	ADD	#T.XPRE,R5
	CMPB	#RUBOUT,@R5
	BNE	1$
	TST	@R3
	BMI	1$
	JSR	R5,ECHO
	 .ASCII	"\"<0>
1$:	CMPB	#CR,R0
	BEQ	3$
	JSR	PC,EOLTST
	BEQ	3$
	MOVB	-(R5),R2
	CMP	#6,R2
	BGT	2$
	JMP	DING
2$:	CMPB	R0,#'A!40
	BLO	21$
	CMPB	R0,#'Z!40
	BHI	21$
	BIC	#40,R0
21$:	INC	R2
	MOVB	R2,(R5)+
	MOVB	R0,(R5)+
	ADD	R5,R2
	MOVB	R0,@R2
	BR	TTOPT4
3$:	TST	(R5)+
	MOV	R5,R0
	JSR	PC,FNDJOB
	BEQ	4$
	CMP	I.CNSL(R2),R3
	BNE	4$
	BIT	#NORUN$,I.BLOK(R2)
	BNE	4$
	CLR	T.XFLG(R3)
	MOV	#1,R0
	JMP	XCOM
4$:	JSR	R5,ECHO
	 .ASCII	"?"<0>
	JSR	PC,ECHOCL
	CLR	T.XFLG(R3)
	RTS	PC
.ENDC
.SBTTL	TTOENB	- Enable output interrupt
.ENABL	LSB
TTOENB::
.IF NE	DZ11$N
	BIT	#DZ11$,T.STAT(R3)
	BEQ	DLOENB
DZOENB:	MOVB	T.PUN(R3),R2
PBMSK2	== .+2
	BISB	BITMSK(R2),DZ.TCR(R4)
	BR	1$
.ENDC
DLOENB:
.IF NE	MTI$M
	BIS	#INEXP$,T.STAT(R3)
.ENDC
HKPC04 == .
	MOV	#IENABL,T.TPS(R4)
.ASSUME	.-HKPC04 EQ 6
1$:	CLC
	RTS	PC
.DSABL	LSB
.IF NE	SYT$K
XPROMT:	.ASCIZ	<CR><LF>"Job? "
.ENDC
.IF NE	DZ11$N
BITMSK::.BYTE	1,2,4,10,20,40,100,200
	.EVEN
.ENDC
.SBTTL	Character output subroutines
.ENABL	LSB
.SBTTL	ECHOR0 - Print a control character in "^x" form
ECHOR0:	MOV	R0,-(SP)
	MOV	#UPAROW,R0
	JSR	PC,TTOPT3
1$:	MOV	(SP)+,R0
	BIS	#100,R0
	.BR	TTOPT3
.SBTTL	TTOPT3 - Print a character, check for special changes:
TTOPT3::CMPB	#CTRLC,R0
	BEQ	7$
	CMPB	#ESCAPE,R0
	BNE	2$
	MOV	#DOLLAR,R0
2$:	CMPB	#40,R0
	BLOS	TTOPT4
	CMPB	#15,R0
	BLO	ECHOR0
	CMPB	#11,R0
	BHI	ECHOR0
.SBTTL	TTOPT4 - Print a character, no checking for specials
TTOPT4::MOV	R1,R2
.SBTTL	TTOPT2 - Print a character, no checking for specials
TTOPT2::ADD	#T.OCTR-T.ICTR,R2
.IF NE	SYT$K
	TSTB	T.XFLG(R3)
	BNE	3$
.ENDC
	TST	@R2
	BMI	7$
3$:	TST	T.CNF2(R3)
	BMI	8$
.ASSUME	WPALL$	EQ	100000
	BICB	#^C<177>,R0
8$:	CMPB	#TTYOUT-1,@R2
	BLO	7$
.IF NE	MAT$S
	JSR	PC,RGFUL
.ENDC
	CMP	4(R2),-(R2)
	BHI	4$
	SUB	#TTYOUT,@R2
4$:	MOVB	R0,@(R2)+
	INC	-(R2)
	INC	2(R2)
	BR	TTOENB
.SBTTL	ECHO0C - Print control character, then 1 or 2 constant characters
ECHO0C:	MOV	R0,-(SP)
	JSR	PC,ECHOR0
	BR	5$
.SBTTL	ECHO - Print one or two constant characters
ECHO:	MOV	R0,-(SP)
5$:	MOVB	(R5)+,R0
	JSR	PC,TTOPT4
	MOVB	(R5)+,R0
	BEQ	6$
	JSR	PC,TTOPT4
6$:	MOV	(SP)+,R0
	RTS	R5
7$:	RTS	PC
.DSABL	LSB
.SBTTL	EOLTST - Test for end of line
EOLTST::CMPB	#LF,R0
	BEQ	1$
	CMPB	#'Z-100,R0
	BEQ	1$
	CMPB	#'C-100,R0
1$:	RTS	PC
.SBTTL	DLOINT - DL11 output interrupt routine
.ENABL LSB
TTOINT::
DLOINT::
.IF EQ	HSR$O
.IF GT	DL11$N-1
	GETPSW
	MOV	(SP)+,DLTMP
.ENDC
DLOHOK::
	JSR	R5,$INTEN
	 .WORD	^C<PR4>&PR7
	JSR	R3,SAVE30
.IF GT	DL11$N-1
	MOV	DLTMP,R4
.ENDC
.IFF
.IF GT	DL11$N-1
	GETPSW
	MOVB	(SP)+,@HSROPP
	MOV	R0,-(SP)
PHSRBO	== .+2
	MOV	#HSROPP,R0
	INC	@R0
	CMP	(R0)+,(R0)+
	BLO	10$
	MOV	@R0,HSROPP
10$:	MOV	(SP)+,R0
.ENDC
	INC	HSROCC
	BEQ	20$
	RTI
DLOHOK::
20$:	JSR	R5,$INTEN
	 .WORD	^C<PR4>&PR7
	JSR	R5,$FORK
	 .WORD	TOFBLK-.
30$:
.IF GT	DL11$N-1
	MOV	HSROGP,R5
	MOVB	(R5)+,R4
	CMP	R5,HSROEP
	BLO	40$
	MOV	HSRORP,R5
40$:	MOV	R5,HSROGP
.ENDC
	JSR	PC,50$
	DEC	HSROCC
	BPL	30$
	RTS	PC
50$:
.ENDC
.IF GT	DL11$N-1
	BIC	#^C<17>,R4
	ASL	R4
PDLTB1	== .+2
	MOV	DLTBL(R4),R3
.IFF
	MOV	DLTBL,R3
.ENDC
	MOV	T.CSR(R3),R4
.IF NE	MTI$M
	BIC	#INEXP$,T.STAT(R3)
	CLR	T.RTRY(R3)
.ENDC
	JSR	PC,OUTPTR
	BEQ	2$
	JSR	PC,OUTCHR
	BCS	2$
.IF NE	MTI$M
	BIS	#INEXP$,T.STAT(R3)
.ENDC
HKPC07 == .
	MOV	R0,T.TPB(R4)
.ASSUME	.-HKPC07 EQ 4
	RTS	PC
2$:
HKPC05 == .
	MOV	#0,T.TPS(R4)
.ASSUME	.-HKPC05 EQ 6
	RTS	PC
.DSABL LSB
.SBTTL	Control character output dispatch table
.MACRO	CTLCHO	C
OUP'C::
.=C+TTOTBL
	.BYTE	OUP'C-TTOBAS
.=OUP'C
.SBTTL	Process C output
.ENDM	CTLCHO
TTOTBL::
.REPT	40
	.BYTE	OUPXXX-TTOBAS
.ENDR
.SBTTL	OUTCHR - Output character processing
.ENABL	LSB
OUTCHR:	TSTB	T.STAT(R3)
	BPL	991$
.ASSUME	PAGE$	EQ	200
20$:	SEC
	RTS	PC
991$:	TST	T.CNF2(R3)
	BMI	1$
.ASSUME	WPALL$	EQ	100000
	TSTB	T.NFIL(R3)
	BEQ	901$
	DECB	T.NFIL(R3)
	CLR	R0
	RTS	PC
901$:	TSTB	T.TNFL(R3)
	BEQ	1$
	INCB	T.TNFL(R3)
	MOVB	T.TCTF(R3),R0
	BR	18$
1$:
.IF NE	BF
	TSTB	T.OCTR-T.ICTR(R1)
	BNE	902$
	JSR	R4,UNBLOK
	 .WORD	TTOEM$
902$:	MOV	T.TID(R3),R2
	BEQ	4$
2$:	MOVB	(R2)+,R0
	BNE	3$
	CLR	R2
3$:	MOV	R2,T.TID(R3)
	BNE	18$
	CLRB	T.OCHR(R3)
4$:	BIT	#SHARE$,T.STAT(R3)
	BEQ	7$
.IF NE	SYT$K
	TSTB	T.XFLG(R3)
	BNE	9$
.ENDC
	TST	T.CNF2(R3)
	BMI	7$
.ASSUME	WPALL$	EQ	100000
	CMPB	#LF,T.OCHR(R3)
	BNE	8$
	MOV	IMPLOC,R2
5$:	MOV	-(R2),R5
	BEQ	5$
	CMP	#-1,R5
	BEQ	20$
	BIT	#NORUN$,I.BLOK(R5)
	BNE	5$
.IF NE	SYT$K
	CMP	I.CNSL(R5),R3
	BNE	5$
.ENDC
	CMP	TTHOUS,R5
	BEQ	6$
	TSTB	I.OCTR(R5)
	BEQ	5$
6$:	CMP	TTOUSR,R5
	BEQ	7$
	MOV	R5,TTOUSR
	MOV	I.TID(R5),T.TID(R3)
	MOV	R5,R1
	ADD	#I.ICTR,R1
	BR	1$
.ENDC
7$:	TST	T.STAT(R3)
.ASSUME	CONSL$	EQ	100000
	BPL	9$
8$:
.IF NE	BF
	CMP	TTHOUS,R5
	BEQ	TTHOUT
.IFF
	TST	TTHOUS
	BNE	TTHOUT
.ENDC
9$:
.IF NE	BF
..TTON	== .+4
	CMPB	T.OCTR-T.ICTR(R1),#TTYOUT
	BNE	10$
	JSR	R4,UNBLOK
	 .WORD	TTOWT$
10$:
.ENDC
	ADD	#T.OTOP-T.ICTR,R1
	CMP	@R1,-(R1)
	BNE	11$
	SUB	#TTYOUT,@R1
11$:	TSTB	-2(R1)
.IF EQ	SYT$K
	BEQ	20$
.IFF
	BNE	12$
	TSTB	T.XFLG(R3)
	BPL	20$
	ASLB	T.XFLG(R3)
	ADDR	XPROMT,R2
	MOV	R2,T.TID(R3)
	BR	2$
12$:
.ENDC
	MOVB	@(R1)+,R0
13$:	TST	T.CNF2(R3)
	BMI	OUPXXX
.ASSUME	WPALL$	EQ	100000
	BIC	#^C<177>,R0
	CMPB	#40,R0
	BHI	SPCHAR
	CMP	R0,#RUBOUT
	BEQ	OUPXXX
	INCB	T.LPOS(R3)
	BIT	#CRLF$,@R3
	BEQ	OUPXXX
	CMPB	T.LPOS(R3),T.WID(R3)
	BLOS	OUPXXX
	CLRB	T.LPOS(R3)
	MOVB	#CR,R0
	MOV	#<-1*400>+LF,T.TCTF(R3)
17$:	MOVB	R0,T.OCHR(R3)
18$:	CMPB	R0,T.TFIL(R3)
	BNE	19$
	TST	T.CNF2(R3)
	BMI	19$
.ASSUME WPALL$	EQ	100000
	MOVB	T.FCNT(R3),T.NFIL(R3)
19$:	CLC
	RTS	PC
CTLCHO	CR
	CLRB	T.LPOS(R3)
OUPXXX:	INC	-(R1)
	DEC	-(R1)
.IF NE	MAT$S
	TSTB	@R1
	BNE	17$
	CALL	RGEMP
.ENDC
	BR	17$
TTOTPT	== .+2
SPCHAR:	MOVB	TTOTBL(R0),R2
	ADD	R2,PC
TTOBAS::
CTLCHO	FF
	BIT	#FORM$,@R3
	BNE	OUPXXX
	MOV	#<-7*400>+LF,T.TCTF(R3)
	MOV	#LF,R0
	BR	OUPXXX
CTLCHO	BS
	TST	@R3
.ASSUME	BKSP$	EQ	100000
	BPL	OUPXXX
	DECB	T.LPOS(R3)
	BR	OUPXXX
CTLCHO	TAB
	BIT	#HWTAB$,@R3
	BNE	22$
	MOV	T.LPOS-1(R3),R0
	BIS	(PC)+,R0
	 .BYTE	377,370
	ADD	#SPACE+1,R0
	MOV	R0,T.TCTF(R3)
	MOVB	R0,R0
22$:	ADD	#8.*400,T.LPOS-1(R3)
	BIC	#7*400,T.LPOS-1(R3)
	BR	OUPXXX
TTHOUT:	MOV	R1,R2
	TST	T.OCTR-T.ICTR(R1)
	BMI	TTHOCM
	BEQ	23$
	BIT	#WRWT$,T.STAT(R3)
	BEQ	9$
23$:	BIS	#WRWT$,T.STAT(R3)
	MOV	TTCQE,R1
	ADD	#Q.BUFF-Q.BLKN,R1
TTHOU1:	TST	(R1)+
	BEQ	TTHOCM
.IF NE	MMG$T
	MOV	@#KISAR1,-(SP)
	BIT	#40000,@R1
	BEQ	24$
	SUB	#20000,@R1
	ADD	#200,Q.PAR-Q.WCNT(R1)
24$:	MOV	Q.PAR-Q.WCNT(R1),@#KISAR1
.ENDC
	MOVB	@(R1)+,R0
.IF NE	MMG$T
	MOV	(SP)+,@#KISAR1
.ENDC
	TST	T.CNF2(R3)
	BMI	OUPXXX
.ASSUME	WPALL$	EQ	100000
	TST	R0
	BNE	13$
25$:	INC	-(R1)
	DEC	-(R1)
	BR	TTHOU1
TTHOCM:	MOV	R5,-(SP)
	MOV	R4,-(SP)
	JSR	PC,TTCMPL
	MOV	(SP)+,R4
	MOV	(SP)+,R5
	MOV	R2,R1
	JMP	991$
.DSABL	LSB
.IF NE	DZ11$N
.SBTTL	DZIINT - DZ11 input interrupt service
DZIINT::
.IF GT	DZ11$N-1
	GETPSW
	MOV	(SP)+,DZTMP
.ENDC
	JSR	R5,$INTEN
	 .WORD	^C<PR5>&PR7
	JSR	R3,SAVE30
1$:
.IF GT	DZ11$N-1
	MOV	DZTMP,R4
	BIC	#^C<17>,R4
	ASL	R4
PDZTB0	== .+2
	MOV	DZTBL(R4),R3
PDZCS0	== .+2
	MOV	DZCSR(R4),R4
.IFF
	MOV	DZTBL,R3
	MOV	DZCSR,R4
.ENDC
	MOV	DZ.RBUF(R4),R0
	BPL	3$
.ASSUME	DZDVD$	EQ	100000
	MOV	R0,R5
	SWAB	R5
	BIC	#^C<7>,R5
	ASL	R5
	ADD	R3,R5
	MOV	@R5,R3
	BEQ	1$
	TSTB	T.CNF2(R3)
	BMI	2$
.ASSUME	RPALL$	EQ	200
	BIC	#^C<177>,R0
	BEQ	1$
2$:	JSR	PC,INPTR
	BEQ	1$
	JSR	PC,INTCOM
	BR	1$
3$:	RTS	PC
.SBTTL	DZOINT	- DZ11 output interrupt service
DZOINT::
.IF GT	DZ11$N-1
	GETPSW
	MOV	(SP)+,DZTMP
.ENDC
	JSR	R5,$INTEN
	 .WORD	^C<PR5>&PR7
	JSR	R3,SAVE30
.IF GT	DZ11$N-1
	MOV	DZTMP,R4
	BIC	#^C<17>,R4
	ASL	R4
PDZTB1	== .+2
	MOV	DZTBL(R4),R3
PDZCS1	== .+2
	MOV	DZCSR(R4),R4
.IFF
	MOV	DZTBL,R3
	MOV	DZCSR,R4
.ENDC
	MOVB	1(R4),R5
	BIC	#^C<7>,R5
	ASL	R5
	ADD	R3,R5
	MOV	@R5,R3
	JSR	PC,OUTPTR
	BEQ	2$
	JSR	PC,OUTCHR
	BCS	2$
	MOVB	R0,DZ.TDR(R4)
	RTS	PC
2$:	MOVB	T.PUN(R3),R0
PBMSK3	== .+2
	BICB	BITMSK(R0),DZ.TCR(R4)
	RTS	PC
.IF NE	DZ11$M
.SBTTL	DZMCTL	-- MULTI-TERMINAL DZ11 MODEM CONTROL
DZMCTL::JSR	R5,SAVE52
	CLR	R2
1$:
.IF EQ	DZV$11
	MOV	#8.+1,-(SP)
.IFF
	MOV	#4.+1,-(SP)
.ENDC
PDZCS2	== .+2
	MOV	DZCSR(R2),R4
	BEQ	4$
PDZTB2	== .+2
	MOV	DZTBL(R2),R1
	MOVB	#377,DZ.DTR(R4)
2$:	DEC	@SP
	BEQ	4$
	MOV	(R1)+,R3
	BEQ	2$
	BIT	#REMOT$,@R3
	BEQ	2$
	MOVB	T.PUN(R3),R0
PBMSK4	== .+2
	BITB	BITMSK(R0),DZ.CAR(R4)
	BEQ	3$
	BIT	#HNGUP$,T.STAT(R3)
	BEQ	2$
	MOV	#DZANS$,-(SP)
	BISB	R0,@SP
	MOV	(SP)+,DZ.LPR(R4)
	BIC	#INIST$+HNGUP$,T.STAT(R3)
.IF NE	MAT$S
	JSR	PC,CARON
.ENDC
	BR	2$
3$:	BIT	#HNGUP$,T.STAT(R3)
	BNE	2$
PBMSK5	== .+2
	BICB	BITMSK(R0),DZ.DTR(R4)
	BIS	#HNGUP$,T.STAT(R3)
.IF NE	MAT$S
	JSR	PC,HNGON
.ENDC
	BR	2$
4$:	CMP	(SP)+,(R2)+
	CMP	R2,#DZ11$N*2
	BLO	1$
DZTIMR:	MOV	DZTMCP,DZTCOM
	JSR	R5,$TIMIO
	 .WORD	DZTMBK - .
	 .WORD	0
	 .WORD	0
	 .WORD	CLOCK/2
	RTS	PC
DZTMBK:	.WORD	0,0
	.WORD	0,0
	.WORD	177442
	.WORD	-1
DZTCOM:	.WORD	0
DZTMCP::.WORD	DZMCTL
.ENDC
.ENDC
.IIF EQ DZ11$N, .LIST
.IF NE	DZ11$M!DL11$M!MTI$M
.SBTTL	SAVE52	- Save registers R5-R2
SAVE52:	MOV	R4,-(SP)
	MOV	R3,-(SP)
	MOV	R2,-(SP)
	JSR	PC,@R5
	MOV	(SP)+,R2
	MOV	(SP)+,R3
	MOV	(SP)+,R4
	MOV	(SP)+,R5
	RTS	PC
.ENDC
.IF NE	MAT$S
.SBTTL	Report status subroutines
CARON::	JSR	R1,TRMSTS
	 .WORD	AS.HNG
	 .WORD	AS.CAR
HNGON::	JSR	R1,TRMSTS
	 .WORD	AS.CAR
	 .WORD	AS.HNG
CTCON::	JSR	R1,TRMSTS
	 .WORD	0
	 .WORD	AS.CTC
CLRIN::	JSR	R1,TRMSTS
	 .WORD	AS.INP
	 .WORD	0
SETIN::	JSR	R1,TRMSTS
	 .WORD	0
	 .WORD	AS.INP
RGFUL::	JSR	R1,TRMSTS
	 .WORD	AS.OUT
	 .WORD	0
RGEMP::	JSR	R1,TRMSTS
	 .WORD	0
	 .WORD	AS.OUT
.SBTTL	TRMSTS	- Copy terminal status to user
TRMSTS:	TST	T.OWNR(R3)
	BEQ	1$
	TST	T.AST(R3)
	BEQ	1$
.IF NE	MMG$T
	MOV	@#KISAR1,-(SP)
	MOV	T.AST+2(R3),@#KISAR1
.ENDC
	BIC	(R1)+,@T.AST(R3)
	BIS	(R1)+,@T.AST(R3)
.IF NE	MMG$T
	MOV	(SP)+,@#KISAR1
.ENDC
1$:	MOV	(SP)+,R1
	RTS	PC
.ENDC
.SBTTL	DATA AREAS
.IF NE	BF
TTOUSR::.WORD	BKGND
TTIUSR::.WORD	BKGND
.ENDC
TTHOUS::.WORD	0
TTHIUS::.WORD	0
.IF NE	HSR$B
HSRB::	.WORD	HSRBUF
HSRBEP::.WORD	HSRBUE
HSRBRP::.WORD	HSRBUF
HSRBCC::.WORD	-1
HSRBGP::.WORD	HSRBUF
HSRBUF::.BLKW	HSRBSZ*2
HSRBUE::
TIFBLK::BSS	F.BSIZ/2
.ENDC
.IF NE	HSR$O
.IF EQ	DL11$N-1
HSROCC::.WORD	-1
.IFF
HSROPP::.WORD	HSROBF
HSROEP::.WORD	HSROBE
HSRORP::.WORD	HSROBF
HSROCC::.WORD	-1
HSROGP::.WORD	HSROBF
HSROBF::.BLKB	DL11$N
HSROBE::
	.EVEN
.ENDC
TOFBLK::BSS	F.BSIZ/2
.ENDC
.END
                                                                                                                                                                                                   