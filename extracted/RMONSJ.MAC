.MCALL .MODULE
.MODULE RMONSJ,VERSION=23,COMMENT=<SJ Resident Monitor>,GLOBAL=.RMNSJ

;                  COPYRIGHT (c) 1984, 1985, 1986 BY
;             DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;                         ALL RIGHTS RESERVED.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
.IIF DF NLRMON, .NLIST
.SBTTL	********************
.SBTTL	*      RMONSJ      *
.SBTTL	********************
.SBTTL	MONITOR DATA BASE
.SBTTL	MACROS FOR MONITOR ONLY
.MACRO	SPL	N
	 .WORD	PSWLST
PSWLST	== .-2
.IF EQ	N
	 .WORD	-2
.IFF
	 .WORD	N*40,PS
.ENDC
.ENDM	SPL
.MACRO	GETPSW
	 .WORD	PSWLST,-4
PSWLST	== .-4
.ENDM	GETPSW
.MACRO	PUTPSW
	 .WORD	PSWLST,-6
PSWLST	== .-4
.ENDM	PUTPSW
PSWLST	= 0
.MCALL	...CMV
.PSECT	RTDATA
$RMON::	JMP	$INTEN
$CSW::	BSS	16.*5
SB17	== $CSW+<15.*5*2>+2
$SYSCH::.WORD	0
	.WORD	0
	.WORD	0
I.SPLS:
I.SERR:	.WORD	0
	.WORD	0
BLKEY::	.WORD	0
CHKEY::	.WORD	0
$DATE::	.WORD	0
DFLG::	.WORD	0
$USRLC::.WORD	USRBUF
QCOMP::	.WORD	COMPLT
SPUSR:	.WORD	0
SYUNIT::.WORD	0
	...CMV	PART=ALL,TYPE=V
SYSVER:	.BYTE	RT$REL
SYSUPD:	.BYTE	RT$VER
CONFIG::.WORD	CLK50
SCROLL::.WORD	0
TTKS::	.WORD	TKS
TTKB::	.WORD	TKB
TTPS::	.WORD	TPS
TTPB::	.WORD	TPB
MAXBLK:	.WORD	-1
E16LST:	.WORD	LST16-$RMON
$TIME::	BSS	2
SYNCH::	.WORD	SINK
LOWMAP::
.RADIX	2
	.BYTE	11111111,00111100,00001111,11110000
	.BYTE	11000011,00000000,00000000,00000000
	.BYTE	00000000,00000000,00110000,00000000
	.BYTE	00000000,00000000,00000000,00000000
	.BYTE	00000000,00000000,00000000,00000000
.RADIX	8.
USRLOC::.WORD	USRBUF
GTVECT::.WORD	VT.VEC
ERRCNT:	.WORD	0
$MTPS::	BR	PUTPSW
$MFPS::	BR	GETPSW
SYINDX::.WORD	2
STATWD::.WORD	0
CONFG2::.WORD	<GSCCA>
SYSGEN::.WORD	SYSOP$
USRARE:	.WORD	USRSIZE
ERRLEV::.BYTE	ERROR$!FATAL$!UNCON$
IFMXNS::.BYTE	MXN$ST
EMTRTN:	.WORD	EMTDON-$RMON
FORK:	.WORD	$FORK-$RMON
PNPTR::	.WORD	$PNAME-$RMON
MONAME::ASCR50	NAME$1,NAME$2,NAME$3
	.WORD	...V2
	ASCR50	NAME$4,NAME$5,NAME$6
	.WORD	...V2
HSUFFX::ASCR50	040,040,SUFX$H
	.WORD	...V2
SPSTAT::.WORD	0
EXTIND::.BYTE	0
INDSTA::.BYTE	0
$MEMSZ::.WORD	0
CONLOG::.WORD	0
.IF EQ MTT$Y
$TCFIG::.WORD	TTCNFG
.IFF
$TCFIG::.WORD	DLTCB
.ENDC
$INDDV::.WORD	INDDEV
MEMPTR::.WORD	CORPTR-$RMON
P1EXT::	.WORD	0
$TRPLS::.WORD	0
GETVEC:: .WORD	ERRRTN
DWTYPE:: .WORD	0
MAXOFF	== .-$RMON
PROGDF::.BYTE	200!$$KED
	.BYTE	200!$$FORTRAN
WILDEF::.BYTE	1
	.BYTE	0
.ENABL	LSB
GETPSW::MOV	@#PS,-(SP)
	MOV	2(SP),-(SP)
	MOV	2(SP),4(SP)
	BR	1$
PUTPSW::MOVB	2(SP),@#PS
1$:	MOV	(SP)+,(SP)
	RTS	PC
.DSABL	LSB
SYSLOW::.WORD	$RMON
$RAMSZ:: .WORD	0
CORPTR::.WORD	0
	.WORD	CORPTR
	.WORD	0
KMONIN:: .WORD	1
CCB::	BSS	10
I.CNUM:	.WORD	16.
I.CSW::	.WORD	$CSW
SPSIZE:	.WORD	0
INBFPT:	.WORD	0
IFSVST::.WORD	0
CURLEV::.WORD	0
.IF NE	TIME$R
FRKLQE:	.WORD	0
FRKCQE:	.WORD	0
.ENDC
SYDVSZ::.WORD	0
.IF NE	MTT$Y
I.SCCA::.WORD	0
BKCNSL::
I.CNSL::.WORD	DLTCB
I.CLUN::.WORD	0
EXTFLG::.WORD	0
.ENDC
.SBTTL	DEVICE TABLE PSECTS
	.PSECT	OWNER$
$OWNER::
	.PSECT	UNAM1$
$UNAM1::
	.PSECT	UNAM2$
$UNAM2::
	.PSECT	PNAME$
$PNAME::
	.PSECT	ENTRY$
$ENTRY::
	.PSECT	STAT$
$STAT::
	.PSECT	DVREC$
$DVREC::
	.PSECT	HSIZE$
$HSIZE::
	.PSECT	DVSIZ$
$DVSIZ::
.IF NE	MTT$Y
	.PSECT	MTTY$
.ENDC
	.PSECT	RMON
.IF NE	MTT$Y
	.PSECT	MTEMT$
	.PSECT	MTINT$
	.PSECT	RMON
.ENDC; NE MTT$Y
.SBTTL	DESCRIPTION OF MONITOR DATA BASE
CLIFLG::.BYTE	UCLON!CCLON!DCLON
CLITYP::.BYTE	-1
INDDEV::.ASCII	/SY0:/
.SBTTL	TTY CONFIGURATION WORD
VT05$	== 100000
TTCNFG::.WORD	0
.SBTTL	EMT PROCESSOR
EMTPRO::BIC	#1,2(SP)
	JSR	R1,SVREG
	CLR	R2
	MOV	SAVEST+2(SP),R5
	MOV	-(R5),R4
	CMPB	R4,#374
	BHIS	NEWEMT
	MOV	SP,R1
	ADD	#SAVEST+6,R1
	MOV	R4,R5
	BIC	#^C<17>,R4
	BIC	#^C<360>,R5
	ASR	R5
	ASR	R5
	ASR	R5
	BR	EMTCOM
NEWEMT:	BNE	1$
	ADD	#E375MX*400,R0
	BR	3$
1$:	CMPB	R4,#376
	BHI	EMTOUL
	BEQ	E376
	MOV	R0,R1
	MOV	(R1)+,R0
	MOV	(R1)+,@SP
	ROR	R2
3$:	CLR	R4
	BISB	R0,R4
	BEQ	4$
	CMPB	R4,I.CNUM
	BHIS	CHANER
4$:	MOV	R0,R5
	CLRB	R5
	SWAB	R5
	CMPB	#EMTMAX,R5
	BLOS	TOOBIG
	ASL	R5
	MOV	@SP,R0
EMTCOM:	TST	(R5)+
	MOV	R5,-(SP)
.IF EQ	MTT$Y
	ADDR	TTILCT,R5
.IFF
	MOV	I.CNSL,R5
	ADD	#T.TTLC,R5
.ENDC
	ASL	R4
	MOV	R4,R3
	ASL	R3
	ASL	R3
	ADD	R4,R3
	ADD	I.CSW,R3
	ADD	PC,@SP
	ADD	@(SP)+,PC
.SBTTL	EMT DISPATCH TABLE
T1:
	.WORD	D$LETE-T1
	.WORD	L$OOK-T1
	.WORD	E$NTER-T1
	.WORD	T$RPST-T1
	.WORD	R$NAME-T1
	.WORD	S$AVST-T1
	.WORD	R$OPEN-T1
	.WORD	C$LOSE-T1
	.WORD	R$EAD-T1
	.WORD	W$RITE-T1
	.WORD	W$AIT-T1
	.WORD	EMTDON-T1
	.WORD	EMTDON-T1
	.WORD	C$DFN-T1
	.WORD	EMT16-T1
	.WORD	EMT17-T1
	.WORD	G$TJB-T1
..GTIM	== <. - T1> / 2
	.WORD	G$TIM-T1
..MRKT	= <. - T1> / 2
.IF EQ	TIME$R
	.WORD	EMTDON-T1
	.WORD	EMTDON-T1
	.WORD	EMTDON-T1
.IFF
	.WORD	M$RKT-T1
	.WORD	C$MKT-T1
	.WORD	T$WAIT-T1
.ENDC
	.WORD	EMTDON-T1
	.WORD	EMTDON-T1
	.WORD	C$STAT-T1
	.WORD	S$FPA -T1
	.WORD	EMTDON-T1
	.WORD	S$PFUN-T1
	.WORD	EMTDON-T1
	.WORD	G$VAL -T1
	.WORD	S$CCA -T1
	.WORD	EMTDON-T1
.IF NE	MTT$Y
	.WORD	M$TTIO-T1
.IFF
	.WORD	EMTDON-T1
.ENDC
..SDTM	== <. - T1> / 2
	.WORD	S$DTTM-T1
	.WORD	EMTDON-T1
	.WORD	S$FDAT-T1
	.WORD	F$PROT-T1
E375MX	= .-T1/2
.SBTTL	EMT 374 DISPATCH TABLE
TSUB1:	.WORD	W$AIT -T1
	.WORD	EMTDON-T1
	.WORD	EMTDON-T1
	.WORD	P$URGE-T1
	.WORD	S$ERR -T1
	.WORD	H$ERR -T1
	.WORD	C$LOSE-T1
	.WORD	L$OCK -T1
	.WORD	C$HAIN-T1
	.WORD	EMTDON-T1
	.WORD	D$ATE-T1
	.WORD	W$AIT-T1
E374MX	= .-TSUB1/2
EMTMAX	= .-T1/2
.SBTTL	FATAL ERROR PROCESSOR (EMT 376)
.ENABL	LSB
TOOBIG:	MONERR	EMT.E,0
EMTOUL:	BR	EMTOUT
CHANER:	MONERR	CHAN.E,0
	BR	EMTOUT
E376:	MOV	SAVEST+2(SP),R0
.IF EQ	PANI$C
	MOV	ERRPC(SP),R3
.ENDC
E376A:	MOVB	(R0)+,R2
	MOVB	(R0)+,R4
	BPL	1$
	COM	R4
	BR	2$
1$:	TST	I.SERR
	BNE	4$
2$:	CLR	@#UFLOAT
.IF EQ	PANI$C
	MOV	#1000,SP
.IFF
	MOV	SP,R1
	MOV	(PC)+,SP
PSPTR::	 .WORD	SPTR
.ENDC
	CLR	RECURS
3$:	TST	DFLG
	BNE	3$
	JSR	PC,ZAP
	CLR	R0
	.SETTOP
	.SRESET
	MOV	USRLOC,R5
	JMP	IOFSET-L.UBUF(R5)
4$:	COMB	R4
	MOVB	R4,@#ERRBYT
	ADD	SP,R2
	BIS	#1,ERRPS(R2)
	MOV	R0,SAVEST+2(SP)
	CLR	R2
	BR	EMTOUT
.DSABL	LSB
.SBTTL	HANDLE TRAPS TO 4 AND 10
.ENABL	LSB
T$RPST:	TST	R0
	BNE	1$
	MOV	TRAPER,R0
1$:	MOV	R0,(PC)+
TRAPLC:: .WORD	MONTRP
	BR	EMTOUT
MONTRP:	JSR	R1,SVREG
	BCS	2$
	MONERR	TR04.E,0,FATAL
2$:
	MONERR	TR10.E,0,FATAL
TRAP4::
TRAP10::ROL	@#ERRBYT
	CMP	#400,SP
	BLO	3$
.IF EQ	PANI$C
	MOV	@SP,R3
	ADDR	STKERR,R0
	BR	E376A
STKERR:	.BYTE	0,^C<STCK.E>
.IFF
	MOV	PSPTR,SP
	JSR	R1,SVREG
	MONERR	STCK.E,0,FATAL
.ENDC
3$:	MOV	TRAPLC,-(SP)
	BNE	4$
	MOV	TRAPER,@SP
TRAPER ==.+2
4$:	MOV	#MONTRP,TRAPLC
	ASR	@#ERRBYT
	JMP	@(SP)+
.DSABL	LSB
.SBTTL	HANDLE FLOATING POINT TRAPS
.ENABL	LSB
S$FPA:
.IF NE	FPU$11
	CMP	#1,R0
	BLO	1$
	MOV	FPPIGN,R0
1$:	MOV	R0,(PC)+
FPPADD:: .WORD	MONFPP
.ENDC
EMTOUT:	JMP	EMTDON
.IF NE	FPU$11
FPPINT::BIT	#HWFPU$,CONFIG
	BEQ	2$
	STST	-(SP)
	BR	3$
2$:	MOV	#12.,ST.SUB
3$:	MOV	FPPADD,-(SP)
FPPIGN == .+2
	MOV	#MONFPP,FPPADD
	JMP	@(SP)+
MONFPP:
 .IF NE	PANI$C
	MOV	(SP)+,R0
	JSR	R1,SVREG
 .IFF
	SUB	(PC)+,SP
ST.SUB:	 .WORD	8.
 .ENDC
	MONERR	FPP.E,0,FATAL
.ENDC
.IF NE	MPT$Y
TRAPMP::JSR	R1,SVREG
 .IF NE	ERL$G
	MOV	#-2,R4
	BIT	#CACHE$,CONFG2
	BEQ	4$
	BIT	#360,@#177744
	BEQ	4$
	DEC	R4
4$:
 .IFTF
	JSR	R5,5$
PARTBL:: BSS	16.
5$:
 .IFT
	JSR	PC,$ERLOG
 .IFTF
	MOV	(SP)+,R5
 .ENDC
	MONERR	MPAR.E,0,FATAL
.ENDC
	.DSABL	LSB
.ENABL	LSB
.IF NE	PWF$L
1$:	MOV	R0,@#V.PWFL
	HALT
TRAPPF::JSR	R0,1$
POWRUP:
	MOV	#1000,SP
	JSR	R0,CRASHP
	 .ASCIZ	<CR><LF>/?MON-F-Power fail halt /<CR><LF><LF>
	 .EVEN
.ENDC
.IF NE	PWF$L!RDF$L
CRASHP:	TSTB	@TTPS
	BPL	CRASHP
	MOVB	(R0)+,@TTPB
	BNE	CRASHP
2$:	HALT
	BR	2$
.ENDC
.DSABL	LSB
.SBTTL	EMT 16, USR CALLS
EMT16:	TST	(R4)+
	ADD	PC,R4
	ADD	@R4,PC
LST16::
	.WORD	T$TIN -LST16
	.WORD	T$TOUT-LST16
	.WORD	D$STAT-LST16
	.WORD	F$ETCH-LST16
	.WORD	C$SIGN-LST16
	.WORD	C$SISP-LST16
	.WORD	L$OCK -LST16
	.WORD	U$NLOK-LST16
	.WORD	E$XIT -LST16
	.WORD	P$RINT-LST16
	.WORD	S$RSET-LST16
	.WORD	Q$SET -LST16
	.WORD	S$ETOP-LST16
	.WORD	R$CTLO-LST16
	.WORD	EMTDON-LST16
	.WORD	H$RSET-LST16
C$SIGN:	CLR	R4
C$SISP:	TST	(R2)+
	BR	CCCOM
H$RSET:	INC	R2
S$RSET:	SEC
CCCOM:	INC	R2
D$STAT:	INC	R2
R$NAME:	INC	R2
L$OOK:	INC	R2
E$NTER:	INC	R2
C$LOS2:	INC	R2
F$ETCH:	INC	R2
D$LETE:	INC	R2
	INC	R2
CQCOM:	JSR	PC,CALUSR
	JMP	@USRLOC
C$DFN:	INC	R2
Q$SET:	SEC
	BR	CQCOM
	.SBTTL	Set file date and protection
	.ENABL	LSB
S$FDAT:	ADDR	FIXDAT,R5
	MOV	@R1,-(SP)
	BNE	1$
	MOV	$DATE,@SP
1$:	BIC	#140000,@SP
	BR	2$
F$PROT:	ADDR	FIXPRO,R5
	MOV	@R1,-(SP)
	BITB	#^C<1>,@SP
	BNE	3$
	BIC	#^C<1>,@SP
2$:	ADDR	INTBLK,R1
	MOV	(SP)+,@R1
	MOV	R5,4(R1)
	ADDR	STRNM,R5
	MOV	R5,@SP
	CALL	MVFNM
	INC	@SP
	CLR	R2
	BR	R$NAME
3$:	TST	(SP)+
	EMTERR+3
	BR	E16XTJ
MVFNM:	CALL	4$
4$:	MOV	R0,R2
	.REPT	4
	MOV	(R2)+,(R5)+
	.ENDR
	RETURN
FIXDAT:	MOV	INTBLK,@R1
	RETURN
FIXPRO:	BIC	#PROT,E.STAT-E.DATE(R1)
	TST	INTBLK
	BEQ	5$
	BIS	#PROT,E.STAT-E.DATE(R1)
5$:	RETURN
INTBLK:	.WORD	0
	.WORD	0
RT$RTN:	.WORD	0
STRNM:	BSS	10
	.DSABL	LSB
.SBTTL	SET DATE AND/OR TIME
S$DTTM:
.IF NE	TIME$R
	ENSYS	E16XT
.ENDC
	MOV	(R0)+,R1
	BLE	1$
	MOV	R1,$DATE
1$:	MOV	(R0)+,R1
	BMI	2$
.IF EQ	TIME$R
	SPL	7
	MOV	@R0,$TIME+2
	MOV	R1,$TIME
	SPL	0
2$:	BR	E16XTJ
.IFF
	MOV	@R0,R0
	SUB	PSCLOK,R0
	SBC	R1
	SUB	PSCLKH,R1
	MOV	R0,$TIME+2
	MOV	R1,$TIME
2$:	RTS	PC
.ENDC
.SBTTL	CLOSE, HARD/SOFT ERRORS, GET TIME, GET JOB PARAMS
C$LOSE:	BIT	#RENAM$!DWRIT$,@R3
	BNE	C$LOS2
P$URGE:	CLR	(R3)+
	BR	E16XTJ
S$ERR:	INC	R2
H$ERR:	MOVB	R2,I.SERR
	BR	E16XTJ
.IF EQ	TIME$R
G$TIM:
	ADD	#$TIME-TTILCT,R5
	SPL	7
	MOV	(R5)+,(R0)+
	MOV	@R5,@R0
	BR	E16XTJ
.ENDC
G$TJB:	CLR	(R0)+
	MOV	SYSLOW,(R0)+
	CLR	(R0)+
	MOV	I.CSW,(R0)+
	TST	(R0)+
.IF NE	MTT$Y
	MOV	I.CLUN,(R0)+
.IFF
	CLR	(R0)+
.ENDC
	CLR	@R0
	BR	E16XTJ
	.SBTTL	DATE, GVAL, PVAL, POKE, and PEEK EMT's
	.ENABL	LSB
D$ATE:	MOV	#$DATE-$RMON,R0
	CLR	R4
	BR	2$
G$VAL:	CMP	#6,R4
	BLO	4$
	ASR	R4
	ASR	R4
	BCS	3$
	CMP	R0,#RMSTAK-$RMON
	BLO	2$
	EMTERR+0
	BR	E16XTJ
2$:	ADD	@#SYSPTR,R0
3$:	MOV	@R0,@SP
	ASR	R4
	BCC	E16XTJ
	MOV	@R1,@R0
E16XTJ:	JMP	E16XT
4$:	JMP	TOOBIG
	.DSABL	LSB
.SBTTL	SJ ERROR LOGGING
.IF NE	ERL$G
$ERLOG::MOV	(PC)+,-(SP)
$ELHND:: .WORD	0
	BNE	10$
	TST	(SP)+
10$:	RTS	PC
.ENDC
S$CCA:	MOV	I.SCCA,@SP
	MOV	R0,I.SCCA
	BR	E16XT
.SBTTL	TTYIN
T$TIN::
.IF EQ	MTT$Y
	BIT	#TTSPC$,@#JSW
	BEQ	1$
	TST	TTIBUF+4
	BR	2$
1$:	TSTB	@R5
2$:	BEQ	NOINPT
	MOV	(PC)+,R1
PTIBF6:: .WORD	TTIBUF+6
	INC	@R1
	CMP	@R1,2(R1)
	BNE	3$
	SUB	#TTYIN,@R1
3$:	MOVB	@(R1),R0
	DEC	-(R1)
	MOV	R0,R4
	MOV	R0,@SP
	JSR	PC,EOLTST
	BNE	E16XT
	DECB	@R5
	CMPB	R0,#CTRLC
	BNE	E16XT
	TST	I.SCCA
	BNE	E16XT
	BIS	#100000,@R5
.IFF
	MOV	I.CNSL,R3
	JSR	PC,MTTIN
	BCS	NOINPT
	BNE	6$
	TST	I.SCCA
	BEQ	10$
6$:	MOV	R0,@SP
	BR	E16XT
10$:
.ENDC
	BIS	#IFABRT,STATWD
.IF NE	TIME$R
GOEXIT::MOV	SP,SFTXIT
	TST	INTLVL
	BPL	NOINPT
.ENDC
	.EXIT
E16XT:	CLR	R2
EMTDON::JSR	R1,POPREG
	RTI
.SBTTL	TTYOUT
.ENABL	LSB
T$TOUT:
.IF EQ	MTT$Y
	MOV	R0,R4
	JSR	PC,OPUT
.IFF
	MOV	I.CNSL,R3
	JSR	R1,MTTPUT
	 .WORD	0
.ENDC
	BCC	E16XT
NOINPT:	EMTERR+0
	BR	E16XT
.DSABL	LSB
.SBTTL	SET TOP, CANCEL ^O
.ENABL	LSB
S$ETOP:	BIS	#USWAP$,@#JSW
	CMP	R0,SYSLOW
	BLO	2$
	MOV	SYSLOW,R0
1$:	TST	-(R0)
2$:	CMP	R0,$KMLOC
	BLO	4$
	CLR	(PC)+
KMLOC::	 .WORD	KMON
	CMP	R0,$USRLC
	BLO	4$
	BIT	#USR$,CONFIG
	BEQ	3$
	MOV	$USRLC,R0
	BR	1$
3$:	CLR	USRLOC
	BIC	#USWAP$,@#JSW
4$:	MOV	R0,@SP
	MOV	R0,@#USERTOP
	BR	E16XT
R$CTLO:
.IF EQ	MTT$Y
	CLRB	TTOCLO
.IFF
	MOV	I.CNSL,R3
	CLRB	T.OCTR+1(R3)
	JSR	PC,TTRSET
.ENDC
	BR	E16XT
.DSABL	LSB
.SBTTL	LOCK USR, INTERNAL ERROR EMT
L$OCK:	JSR	PC,CALUSR
	BR	E16XT
.SBTTL	STRING PRINT EMT
.ENABL	LSB
.IF EQ	MTT$Y
1$:	JSR	R0,2$
	 .BYTE	CR,LF,200
	 .EVEN
2$:	TST	(SP)+
P$RINT:	MOVB	(R0)+,R4
	BEQ	1$
	CMPB	#200,R4
	BEQ	E16XT
3$:	JSR	PC,OPUT
	BCS	3$
	BR	P$RINT
.IFF
P$RINT:	MOV	I.CNSL,R3
	MOV	R0,R1
4$:	MOVB	(R1)+,R0
	BEQ	5$
	CMPB	#200,R0
	BEQ	E16XT
	JSR	R1,MTTPUT
	 .WORD	0
	BR	4$
5$:	ADDR	6$,R1
	BR	4$
6$:	.BYTE	CR,LF,200
	.EVEN
.ENDC
	.DSABL	LSB
.SBTTL	INTERNAL ERROR EMT PROCESSING (EMT 17)
EMT17:	ASR	R4
	MOVB	R4,@#ERRBYT
	BIS	#1,ERRPS(SP)
E16XT1:	BR	E16XT
.IF EQ	MTT$Y
.SBTTL	TTY INTERRUPT (INPUT)
	.ENABL	LSB
1$:	CMPB	(R2)+,#'S&77
	BNE	6$
	BIT	#TTSPC$,@#JSW
	BNE	TTINC3
	BR	6$
 .IF NE	HSR$B
TTISTF:	MOV	(PC)+,R5
PTIBF4:: .WORD	TTIBUF+4
 .IFF
  .IF EQ	TIME$R
TTIINT::JSR	R1,SVREG
	MOV	(PC)+,R5
PTIBF4:: .WORD	TTIBUF+4
	MOV	@TTKB,R0
	SPL	0
  .IFF
TTIINT::JSR	R5,$INTEN
	 .WORD	^C<PR4>&PR7
	MOV	R3,-(SP)
	MOV	R2,-(SP)
	MOV	R1,-(SP)
	MOV	R0,-(SP)
	MOV	(PC)+,R5
PTIBF4:: .WORD	TTIBUF+4
	MOV	@TTKB,R0
  .ENDC
 .ENDC
	BIC	#^C<177>,R0
 .IF NE	VT11$!VS60$
	JSR	PC,@SCLNK2
 .ENDC
	BEQ	TTIEX3
	MOV	(PC)+,R1
PTTPRE:: .WORD	TTIPRE
	BIT	#TTLC$,@#JSW
	BNE	5$
	CMPB	R0,#'A+40
	BLO	5$
	CMPB	R0,#'Z+40
	BHI	5$
	BIC	#40,R0
5$:	ADDR	7$,R2
6$:	CLR	R3
	BISB	(R2)+,R3
	BEQ	T.SPEC
	CMPB	@R2,R0
	BNE	1$
	ASL	R3
	ADD	R3,PC
LIST::
7$:	.BYTE	<CTRL.C -7$>/2,CTRLC
	.BYTE	<CTRL.O -7$>/2,'O&77
	.BYTE	<CTRL.Q -7$>/2,'Q&77
	.BYTE	<CTRL.S -7$>/2,'S&77
	.BYTE	<CTRL.U -7$>/2,'U&77
	.BYTE	<ALT-7$>/2,  ESCAPE
	.BYTE	<TTINCC-7$>/2,CR
	.BYTE	<TTINCC-7$>/2,LF
	.BYTE	<TTINCC-7$>/2,FF
	.BYTE	<TTINCC-7$>/2,TAB
	.BYTE	<TTINCC-7$>/2,13
	.BYTE	<RUB-7$>/2,  RUBOUT
..BS	==.
	.BYTE	<TTINCC-7$>/2,0
	.WORD	0
.DSABL	LSB
.ENABL	LSB
ALT:	MOV	#ESCAPE,R0
	BR	TTINC3
T.SPEC:	INC	R3
	CMPB	R0,#40
	BHIS	TTINCC
	CLR	R3
	JSR	PC,EKOR0
TTINCC:	CMPB	#RUBOUT,@R1
	BNE	TTINC3
SCOP$1::JSR	PC,TTORUB
TTINC3:	MOV	#BELL,R4
	CMP	@R5,#TTYIN-1
	BGE	3$
	INC	@R5
	INC	-(R5)
	CMP	@R5,6(R5)
	BNE	1$
	SUB	#TTYIN,@R5
1$:	MOVB	R0,@(R5)+
	MOV	R0,R4
	JSR	PC,EOLTST
	BNE	2$
	INCB	TTILCT
2$:
TTIES1:
3$:	MOVB	R0,@R1
4$:	BIT	#TTSPC$,@#JSW
	BNE	5$
TTIEXZ:	TST	R3
	BEQ	5$
	JSR	PC,TTOPUT
5$:	MOV	$ENTRY+TT.NUM,R4
	BEQ	6$
	JSR	R4,TT$$$1(R4)
	 .WORD	TTILCT-.
6$:	ADD	#LF-CR,R0
	CMPB	R0,#LF
	BEQ	TTINC3
TTIEX3:
 .IF NE	HSR$B
	RTS	PC
 .IFF
  .IF EQ	TIME$R
	JMP	E16XT
  .IFF
	MOV	(SP)+,R0
	MOV	(SP)+,R1
	MOV	(SP)+,R2
	MOV	(SP)+,R3
	RTS	PC
  .ENDC
 .ENDC
 .IF NE	VT11$!VS60$
SCLNK2:: .WORD	SCNOP
 .ENDC
TTIPRE:: .WORD	0
.DSABL	LSB
.SBTTL	^O, ^C^C, ^U, RUBOUT, INPUT BUFFER
CTRL.O:	JSR	PC,TTOCLR
	JSR	PC,EKOR0
	JSR	PC,TTLFCR
	COMB	TTOCLO
	BR	TTIEX3
CTRL.C:
.IF NE	AI$COD
	BR	TTIEX3
.IFF
	TST	I.SCCA
.ENDC
	BEQ	1$
	BIT	#TTSPC$,@#JSW
	BNE	2$
1$:	JSR	PC,EKOR0
	JSR	PC,TTLFCR
2$:	CMPB	R0,@R1
	BNE	TTINC3
	MOV	(PC)+,R3
I.SCCA:: .WORD	0
	BEQ	10$
	BIS	#100000,@R3
	BR	TTINC3
10$:	BICB	#<LN$IND!IN$IND!IN$RUN>,INDSTA
 .IF NE	BATC$H
	MOV	$ENTRY+BA.NUM,R3
	BEQ	20$
	CLR	BATSW$(R3)
 .ENDC
20$:	BIS	#IFABRT!IFCTLC,STATWD
	TST	(PC)+
EXTFLG:: .WORD	0
	BNE	TTIEX3
	CLR	KMLOC
	TST	DFLG
	BEQ	CTRLC2
	MOV	#140000,DFLG
	BR	TTIEX3
CTRL.U:	JSR	PC,EKOR0
TTICTL:	JSR	PC,RUBCM2
	BEQ	TTIBUM
	JSR	PC,RUBCOM
	BR	TTICTL
TTIBUM:	CLR	@R1
TTCRLF:	JSR	PC,TTLFCR
	BR	TTIEX3
CTRL.S:	MOV	SP,SYNC
	BR	TTIEX3
CTRL.Q:	CLR	SYNC
.IF EQ PDT$OP
	BIC	#TPS$MK,@TTPS
	BIS	#IENABL,@TTPS
.IFF
	CLR	@TTPS
	MOV	#IENABL,@TTPS
.ENDC
	BR	TTIEX3
.ENABL	LSB
RUB:	JSR	PC,RUBCM2
	BEQ	TTIBUM
SCOP$2::CMPB	R0,@R1
	BEQ	1$
SCOP$3::JSR	PC,TTORUB
	MOV	R0,@R1
1$:	MOVB	@(R5),R4
2$:	JSR	PC,RUBCOM
	BR	TTIEXZ
.DSABL	LSB
CTRLC2:	BIS	#100000,TTILCT
 .IF EQ	TIME$R
	JSR	PC,ZAP
	.EXIT
 .IFF
	MOV	SP,ABFLG
	BR	TTIEX3
 .ENDC
.ENDC
ZAP::
	JSR	PC,TTOCLR
2$:	INC	(PC)+
	 .WORD	0
	BNE	2$
.IF EQ	PDT$OP
	MOV	@TTPS,-(SP)
	BIC	#TPS$MK,@SP
.ENDC
	RESET
.IF EQ	PDT$OP
	BIS	(SP)+,@TTPS
.ENDC
.IF EQ MTT$Y
	CLR	SYNC
.ENDC
.IF NE	MPT$Y
	MOV	@#SYSPTR,R1
	ADD	#PARTBL-$RMON,R1
99$:	TST	@R1
	BEQ	100$
	BIS	#1,@(R1)+
	BR	99$
100$:
.ENDC
.IF NE	TIME$R
	JSR	PC,CMKALL
.ENDC
	MOV	QSIZE,QCNT
	CLR	@SYENTR
.IF EQ	MTT$Y
	MOV	$ENTRY+TT.NUM,R5
	BEQ	106$
	CLR	(R5)+
	CLR	(R5)+
.ENDC
106$:	TST	CONFIG
	BPL	QRESET
	BIT	#LKCS$,CONFIG
	BEQ	QRESET
.IF NE	KW11$P
	MOV	#1,@#LKPB
.ENDC
	MOV	#LKSTAT,@#LKCS
QRESET:	MOV	(PC)+,R5
PAVAIL:: .WORD	AVAIL
	CMP	-(R5),-(R5)
	BLT	QRESET
	CMP	(R5)+,(R5)+
	MOV	R5,@R5
	ADD	#2,@R5
	RTS	PC
.IF EQ	MTT$Y
TTLFCR:	JSR	R3,ECHO
	 .BYTE	CR,LF
SCNOP::
TTIRTS:	RTS	PC
RUBCOM:	CMP	@R5,-2(R5)
	BNE	1$
	ADD	#TTYIN,@R5
1$:	DEC	(R5)+
	DEC	@R5
	RTS	PC
.ENDC
TTOCLR:
.IF EQ	MTT$Y
	CLR	TTOBUF+2
	MOV	TTOBUF,TTOBUF+4
.IFF
	MOV	I.CNSL,R5
	CLRB	T.OCTR(R5)
	MOV	T.OGET(R5),T.OPUT(R5)
.ENDC
	RTS	PC
.IF EQ	MTT$Y
.SBTTL	TERMINAL PROCESSING (NON-MULTI-TERMINAL)
TTILCT::.BYTE	0
	.BYTE	0
TTIBUF::.WORD	IBUFR
	.WORD	IBUFR
	.WORD	0
	.WORD	IBUFR
	.WORD	IBUFR+TTYIN
TTOBUF::.WORD	OBUFR
	.WORD	0
	.WORD	OBUFR
	.WORD	OBUFR+TTYOUT
TTOCLO::.BYTE	0,0
IBUFR:	.BLKB	TTYIN
OBUFR:	.BLKB	TTYOUT
	.EVEN
.SBTTL	RUBOUT COMMON PROCESSING
.ENABL	LSB
RUBCM2:	TST	@R5
	BEQ	1$
	MOVB	@-(R5),R4
EOLTST:	CMPB	R4,#LF
	BEQ	1$
	CMPB	R4,#CTRLC
	BEQ	1$
	CMPB	R4,#'Z-100
1$:	RTS	PC
.DSABL	LSB
.SBTTL	TTY OUTPUT ROUTINES
.ENABL	LSB
TTORUB::MOV	#'\,R4
TTOPUT:	CMPB	R4,#ESCAPE
	BNE	TTOPT2
	MOV	#'$,R4
TTOPT2:
OPUT:	TSTB	TTOCLO
	BNE	2$
TTSCRL::BIC	#^C<177>,R4
	MOV	(PC)+,R2
PTOBF2:: .WORD	TTOBUF+2
	CMP	#TTYOUT-1,@R2
	BLO	2$
	CMP	4(R2),-(R2)
	BHI	1$
	SUB	#TTYOUT,@R2
1$:	MOVB	R4,@(R2)+
	INC	-(R2)
	INC	2(R2)
.IF EQ PDT$OP
	BIS	#IENABL,@TTPS
.IFF
	MOV	#IENABL,@TTPS
.ENDC
	CLC
2$:	RTS	PC
.DSABL	LSB
.SBTTL	TERMINAL OUTPUT INTERRUPT SERVICE
.ENABL	LSB
.IF EQ	TIME$R
TTOINT::MOV	R5,-(SP)
	MOV	(PC)+,R5
PTOBF4:: .WORD	TTOBUF+4
	JSR	R4,TTO2
.ENDC
TABCNT:	 .WORD	0
FILLC:	 .WORD	0
CHCNT:	 .WORD	10
.IF NE	TIME$R
TTOINT::JSR	R5,$INTEN
	 .WORD	^C<PR4>&PR7
	MOV	(PC)+,R5
PTOBF4:: .WORD	TTOBUF+4
	MOV	(PC)+,R4
PTBCNT:: .WORD	TABCNT
.ENDC
TTO2:	TST	(PC)+
SYNC:	 .WORD	0
	BNE	12$
	DEC	(R4)+
	BGT	6$
	MOV	R4,-(SP)
	CLR	-(R4)
	MOV	$ENTRY+TT.NUM,R4
	BEQ	1$
	JSR	R4,TT$$$2(R4)
	 .WORD	TTILCT-.
1$:	MOV	(SP)+,R4
	CMP	@R5,2(R5)
	BNE	2$
	SUB	#TTYOUT,@R5
2$:	DEC	-(R5)
	CMP	(R5)+,#-1
	BEQ	11$
	MOVB	@(R5)+,@R4
3$:	BIC	#^C<177>,@R4
	CMP	(R4)+,#RUBOUT
	BEQ	4$
	CMP	-2(R4),#40
	BLT	7$
	DEC	@R4
	BNE	4$
	MOV	#10,@R4
4$:	TST	-(R4)
5$:	INC	-(R5)
6$:	MOV	@R4,@TTPB
	BR	12$
7$:	CMP	-2(R4),#BS
	BNE	14$
	INC	@R4
	BR	10$
14$:	CMP	-(R4),#TAB
	BNE	8$
	MOV	#40,(R4)+
	MOV	@R4,-4(R4)
	BR	9$
8$:	CMP	(R4)+,#CR
	BNE	10$
	CLR	-4(R4)
9$:	MOV	#10,@R4
10$:	DEC	R4
	CMPB	-(R4),@#TTFILL
	BNE	5$
	MOV	@R4,@TTPB
	CLR	@R4
	CLR	-(R4)
	MOVB	@#TTNFIL,@R4
	INC	-(R5)
	BR	12$
11$:
.IF EQ PDT$OP
	BIC	#TPS$MK,@TTPS
.IFF
	CLR	@TTPS
.ENDC
	CLR	-(R5)
12$:
.IF EQ	TIME$R
	BR	RTICMN
.IFF
	RTS	PC
.ENDC
.DSABL	LSB
.IFF
.SBTTL	RESIDENT TERMINAL HANDLER
.ENABL	LSB
	.WORD	TTCMPL+2-.
	.WORD	0
TTLQE::	.WORD	0
TTCQE::	.WORD	0
	MOV	TTCQE,R3
	MOV	(R3)+,R4
	MOV	(R3)+,R1
	MOV	I.CNSL,R2
	ASL	Q.WCNT-Q.BUFF(R3)
	BEQ	TTCMPL
	BCS	7$
	TST	TTEOF
	BNE	TTCLEF
	MOV	R2,TTHIUS
	TST	R4
	BNE	TTHIN
	MOV	R2,R3
	ADD	#T.ICTR,R2
	MOV	T.CSR(R3),R4
	MOVB	#UPAROW,R0
	JSR	PC,TTOPT2
TTHIN::	MOV	TTCQE,R4
1$:	MOV	TTHIUS,R1
	ADD	#T.IGET,R1
	TST	T.TTLC-T.IGET(R1)
	BEQ	5$
	JSR	PC,MTTGET
	BEQ	$RQABT
	CMPB	#CTRLZ,R0
	BEQ	3$
	MOVB	R0,@Q.BUFF-Q.BLKN(R4)
	DEC	Q.WCNT-Q.BLKN(R4)
	BEQ	4$
	INC	Q.BUFF-Q.BLKN(R4)
	BR	1$
2$:	INC	Q.BUFF-Q.BLKN(R4)
3$:	CLRB	@Q.BUFF-Q.BLKN(R4)
	DEC	Q.WCNT-Q.BLKN(R4)
	BNE	2$
	MOV	SP,(PC)+
TTEOF::	 .WORD	0
4$:	MOV	R5,R2
	JSR	PC,TTCMPL
	MOV	R2,R5
	BR	6$
5$:	TST	-(R1)
6$:	RTS	PC
TTCLEF::CLR	TTEOF
	BIS	#EOF$,@Q.CSW-Q.BUFF(R3)
TTCMPL::CLR	TTHIUS
	CLR	TTHOUS
	ADDR	TTCQE,R4
	JMP	COMPLT
7$:	MOV	(R3)+,-(SP)
	MOV	@R3,-(R3)
	NEG	(R3)+
	MOV	(SP)+,@R3
	MOV	R2,TTHOUS
	MOV	I.CNSL,R3
	BIC	#WRWT$,T.STAT(R3)
	MOV	T.CSR(R3),R4
	JMP	TTOENB
.DSABL	LSB
.SBTTL	$RQABT
$RQABT::
	CLR	KMLOC
	MOV	TTHIUS,-(SP)
	BIS	TTHOUS,(SP)+
	BEQ	1$
	JSR	PC,TTCMPL
1$:	TST	DFLG
	BEQ	CTRLC2
	MOV	#140000,DFLG
	RTS	PC
CTRLC2:	MOV	SP,ABFLG
	RTS	PC
.SBTTL	MTREST, MTRES1
.IIF NE	DZ11$N, .IIF NDF DZLE$N, DZLE$N=30
.ENABL	LSB
MTREST::MOV	I.CNSL,R1
1$:	TSTB	T.OCTR(R1)
	BNE	1$
	JSR	PC,ZAP
MTRES1::JSR	PC,@(SP)+
MTRES2:	JSR	R3,SAVE30
	MOV	(PC)+,R0
PMTCBB:: .WORD	DLTCB
	CLR	R2
2$:	INC	R2
	CMP	R2,#TCBMAX
	BHI	7$
	TST	T.CSR(R0)
	BEQ	6$
.IF NE	DZ11$N
	TSTB	T.PUN(R0)
	BNE	3$
	BIT	#DZ11$,T.STAT(R0)
	BEQ	5$
	MOV	T.CSR(R0),R3
	MOV	#DZMSE$+DZRCV$+DZTIE$,@R3
3$:	MOV	@R0,R1
	BIC	#^C<LINSP$>,R1
	CMP	R1,#1000
	BNE	4$
	BIS	#40,R1
4$:	BISB	T.PUN(R0),R1
	BIS	#DZRCO$+DZLE$N,R1
	MOV	T.CSR(R0),R3
	MOV	R1,DZ.LPR(R3)
	BR	6$
.ENDC
5$:	BIS	#IENABL,@T.CSR(R0)
.IF NE	DL11$M
	BIT	#REMOT$,@R0
	BEQ	6$
	BIS	#DL.DIE,@T.CSR(R0)
.ENDC
6$:	ADD	#TCBSZ,R0
	BR	2$
7$:	RETURN
.DSABL	LSB
.ENDC
.IF NE	TIME$R
.SBTTL	ENSYS - ENTER SYSTEM STATE
$ENSYS::MOV	R5,-(SP)
	ADD	(R5)+,@SP
	MOV	2(SP),-(SP)
	GETPSW
	MOV	(SP)+,4(SP)
	SPL	7
.ENDC
$INTEN::MOV	R4,-(SP)
.IF NE	TIME$R
	INC	(PC)+
INTLVL:	.WORD	-1
.ENDC
	MOV	#PS,R4
	BIC	(R5)+,@R4
	JSR	PC,@R5
.IF NE	TIME$R
.ENABL	LSB
	SPL	7
	TST	INTLVL
	BEQ	EXUSER
	DEC	INTLVL
	BR	RTICMN
FRK:	SPL	0
	MOV	R3,-(SP)
	MOV	R2,-(SP)
	MOV	R1,-(SP)
	MOV	R0,-(SP)
1$:	MOV	FRKCQE,R3
	BEQ	3$
	SPL	7
	MOV	@R3,FRKCQE
	BNE	2$
	CLR	FRKLQE
2$:	CLR	@R3
	SPL	0
	ADD	#F.BSIZ,R3
	MOV	-(R3),R4
	MOV	-(R3),R5
	JSR	PC,@-(R3)
	BR	1$
3$:	MOV	(SP)+,R0
	MOV	(SP)+,R1
	MOV	(SP)+,R2
	MOV	(SP)+,R3
EXUSER:	SPL	7
	TST	FRKCQE
	BNE	FRK
	TST	TIKCTR
	BNE	TIMER
	DEC	INTLVL
	TST	(PC)+
SFTXIT:	 .WORD	0
	BNE	5$
	TST	(PC)+
ABFLG:	 .WORD	0
	BNE	4$
.ENDC
RTICMN:	MOV	(SP)+,R4
	MOV	(SP)+,R5
EXINT:	RTI
.IF NE TIME$R
4$:	CLR	ABFLG
	SPL	0
	JSR	PC,ZAP
5$:
.IF NE MTT$Y
	JSR	PC,MTRES2
.ENDC
	MOV	SP,R0
	CLR	SFTXIT
	.EXIT
.DSABL	LSB
.ENDC
.IF NE	HSR$B
.SBTTL	HIGH SPEED RING BUFFER FOR TERMINAL INPUT
.ENABL	LSB
.IF EQ	MTT$Y
TTIINT::MOV	R0,-(SP)
	MOV	R1,-(SP)
	MOVB	@TTKB,R1
	MOV	(PC)+,R0
PHSRRT:: .WORD	HSRB
	MOVB	R1,@(R0)+
	INC	-(R0)
	CMP	(R0)+,(R0)+
	BLO	1$
	MOV	@R0,-4(R0)
1$:	MOV	(SP)+,R1
	INC	2(R0)
	BEQ	2$
	MOV	(SP)+,R0
	RTI
2$:	MOV	(SP)+,R0
	JSR	R5,$INTEN
	 .WORD	^C<PR4>&PR7
	JSR	R5,$FORK
	 .WORD	TIFBLK-.
3$:	MOV	(PC)+,R5
PHSRRB:: .WORD	HSRBUF
	MOVB	@-(R5),R0
	INC	@R5
	CMP	@R5,-6(R5)
	BLO	4$
	MOV	HSRBRP-HSRBGP(R5),@R5
4$:	DEC	-(R5)
	MOV	R5,-(SP)
	JSR	PC,TTISTF
	TST	@(SP)+
	BPL	3$
	RTS	PC
.SBTTL	HIGH SPEED RING BUFFER TABLE
HSRB::	.WORD	HSRBUF
HSRBEP::.WORD	HSRBUF+HSRBSZ
HSRBRP::.WORD	HSRBUF
HSRBCC::.WORD	-1
HSRBGP::.WORD	HSRBUF
HSRBUF::.BLKB	HSRBSZ
TIFBLK::BSS	F.BSIZ/2
.ENDC
.DSABL	LSB
.ENDC
.SBTTL	CLOCK INTERRUPT SERVICE
.ENABL	LSB
LKINT::
.IF EQ	TIME$R
	ADC	$TIME+2
	ADC	$TIME
	RTI
.IFF
	INC	(PC)+
TIKCTR:	 .WORD	0
	TST	INTLVL
	BGE	EXINT
	JSR	R5,$INTEN
	 .WORD	^C<PR6>&PR7
	RTS	PC
TIMER:	MOV	R3,-(SP)
1$:	MOV	TIKCTR,R3
	SUB	R3,TIKCTR
	SPL	0
	ADD	R3,(PC)+
PSCLOK:	 .WORD	0
2$:	MOV	(PC)+,R4
LKQUE:	 .WORD	0
	BCS	7$
	BEQ	9$
	TST	EXTFLG
	BNE	9$
	MOV	R4,R5
	TST	(R4)+
	BNE	9$
	CMP	PSCLOK,(R4)+
	BLO	9$
3$:	RORB	-(SP)
	MOV	(R4),LKQUE
	MOV	R1,-(SP)
	MOV	R0,-(SP)
	MOV	C.SEQ(R5),R0
	CMP	#-1,C.SYS(R5)
	BNE	4$
	MOV	C.COMP(R5),R5
	BR	5$
4$:	GETPSW
	SPL	7
	JSR	PC,QCFREE
5$:	JSR	PC,COMPEX
	MOV	(SP)+,R0
	MOV	(SP)+,R1
	ROLB	(SP)+
	BR	2$
6$:	SUB	#1,(R4)+
	BIT	(R4)+,R0
	BCS	3$
	MOV	@R4,R4
7$:	BNE	6$
	INC	(PC)+
PSCLKH:	 .WORD	0
	CLC
	BR	2$
9$:	MOV	(SP)+,R3
	JMP	EXUSER
CLKBLK:	BSS	F.BSIZ/2
.ENDC
.DSABL	LSB
.SBTTL	READ/WRITE EMT HANDLERS, MT/CT FUNCS.
.ENABL	LSB
S$PFUN:	MOV	@R3,R2
	BIC	#^C<76>,R2
	ADD	PC,R2
	BIT	#SPFUN$,$STAT-.(R2)
	BEQ	RWXT
	BIS	#377,4(R1)
	BPL	5$
R$EAD:	JSR	R4,TSWCNT
	 NOP
	 NOP
NFREAD:	MOV	R4,@SP
1$:	BIT	#HDERR$,@R3
	BNE	6$
	BIT	#EOF$,@R3
	BNE	4$
	MOV	R1,R5
	TST	-(R5)
	MOV	@R3,R2
	BIC	#^C<76>,R2
	ADDR	$ENTRY,R2,ADD
	MOV	@R2,R2
	BEQ	2$
	ADD	C.SBLK(R3),R0
	MOV	C.DEVQ(R3),R1
	JSR	PC,QMANGR
	BIT	#HDERR$,@R3
	BNE	6$
	BIT	#EOF$,@R3
	BNE	4$
RWXT:	MOV	#3,R2
	BR	E16.7A
2$:	MONERR	NODV.E,0
	BR	RWXT
3$:	TST	(SP)+
4$:	BIC	#EOF$,@R3
5$:	EMTERR+0
	BR	9$
6$:	BIC	#HDERR$,@R3
	EMTERR+1
	BR	RWXT
7$:	TST	(SP)+
	EMTERR+2
9$:	CLR	@SP
	BR	RWXT
W$RITE:	JSR	R4,TSWCNT
	 BR	NFWRIT
	 EMTERR+0
	CMP	R5,C.USED(R3)
	BLOS	NFWRIT
	BIT	#DWRIT$,@R3
	BEQ	NFWRIT
	MOV	R5,C.USED(R3)
NFWRIT:	MOV	R4,@SP
	NEG	R4
	BR	1$
.SBTTL	READ/WRITE ROUTINE
TSWCNT:	TST	(R1)+
	MOV	@R1,R5
	MOV	R5,@SP
	MOV	@R3,R2
	BPL	7$
	BIC	#^C<76>,R2
	ADDR	$STAT,R2,ADD
	TST	@R2
	BPL	TSWOUT
	BIC	#EOF$,@R3
	TST	C.SBLK(R3)
	BEQ	TSWOUT
	CMP	(R4)+,(R4)+
	MOV	C.LENG(R3),R2
	CMP	R0,R2
	BHIS	3$
	ADD	#377,R5
	CLRB	R5
	SWAB	R5
	ADD	R0,R5
	SUB	R5,R2
	BHIS	TSWOUT
	ADD	R2,R5
	MOV	R5,@SP
	SUB	R0,@SP
	SWAB	@SP
	TST	-(R4)
TSWOUT:	RTS	R4
.DSABL	LSB
.SBTTL	SAVESTATUS AND REOPEN
S$AVST:	MOV	@R3,R4
	BPL	1$
	TSTB	R4
	BMI	E5ER1
1$:	MOV	@R3,(R0)+
	CLR	(R3)+
.REPT	4
	MOV	(R3)+,(R0)+
.ENDR
	TST	R4
	BPL	E5ER0
XCLOSE:	CLR	R2
E16.7A:	JMP	EMTDON
R$OPEN:	TST	@R3
	BMI	E5ER0
.REPT	5
	MOV	(R0)+,(R3)+
.ENDR
	BR	XCLOSE
E5ER0:	EMTERR+0
	BR	XCLOSE
.SBTTL	WAIT FOR I/O COMPLETE
W$AIT:	TST	@R3
	BPL	E5ER0
WAITDV::
1$:	TSTB	C.DEVQ(R3)
	BNE	1$
	BIT	#HDERR$,@R3
	BEQ	XCLOSE
	DEC	@R3
.ASSUME	HDERR$	EQ	1
E5ER1:	EMTERR+1
	BR	XCLOSE
.SBTTL	SWAP USR ROUTINE
.ENABL	LSB
CALUSR:	INC	MONCAL
	MOV	USRLOC,R0
	BEQ	1$
	BCS	3$
	RTS	PC
1$:	MOV	$USRLC,MONLOC
	TST	@#JSW
	BMI	3$
	MOV	@#UFLOAT,R0
	BEQ	2$
	MOV	R0,MONLOC
2$:	MOV	$SWPBL,R0
	NEG	MONLOC+2
	JSR	PC,$WSYS
3$:	MOV	(PC)+,R0
$MONBL:: .WORD	0
	JSR	PC,$RSYS
	MOV	@R5,USRLOC
4$:	RTS	PC
$RSYS:	MOV	#USRLEN,MONLOC+2
$WSYS:	MOV	(PC)+,R5
PMONLC:: .WORD	MONLOC
IOSR:	JSR	PC,$SYS
	BCC	4$
	TST	2(R5)
.IF NE	RDF$L
	BPL	5$
.IFF
	BPL	DEAD
.IFTF
	MONERR	IOBD.E,0,FATAL
.IFT
5$:
	JSR	R0,CRASHP
	 .ASCIZ	\?MON-F-System read failure halt\ <CR> <LF> <LF>
	 .EVEN
.ENDC
	.DSABL	LSB
	.SBTTL	C$STAT - Get status of channel (.CSTAT)
	.ENABL	LSB
C$STAT:	MOV	@R3,R4
	BIC	#^C<INDX$M>,R4
	MOV	(R3)+,(R0)+
	BPL	E5ER0
	MOV	(R3)+,(R0)+
	MOV	(R3)+,(R0)+
	MOV	(R3)+,(R0)+
	MOV	@R3,@R0
	CLRB	@R0
	SWAB	(R0)+
	ADD	PC,R4
	MOV	$PNAME-.(R4),(R0)+
	BR	XCLOSE
	.DSABL	LSB
.SBTTL	UNLOCK USR
U$NLOK:	TST	MONCAL
	BEQ	E16.7A
MONOUT:	DEC	(PC)+
MONCAL:: .WORD	0
	BNE	E16.7A
KMTST:	TST	KMONIN
	BNE	E16.7A
	TST	DFLG
	BPL	1$
	.EXIT
1$:	TST	@#JSW
	BMI	E16.7A
	CLR	USRLOC
	CLR	BLKEY
	MOV	$SWPBL,R0
	JSR	PC,$RSYS
	BR	E16.7A
SPAREA:
KMBLK::	 BSS	5
MONLOC::.WORD	USRBUF
	.WORD	USRLEN
DEAD:	.WORD	0
.IF EQ	RDF$L
	BR	DEAD
.ENDC
.SBTTL	READ USER PROGRAM AND START IT
RDOVLY::JSR	PC,IOSR
ENTRPG::MOV	@#USERSP,SP
	CLR	KMONIN
	JMP	@R2
.SBTTL	ECHO, SVREG, POPREG
.IF EQ	MTT$Y
ECHO::	MOVB	(R3)+,R4
	JSR	PC,TTOPUT
	MOVB	(R3)+,R4
	BEQ	1$
	JSR	PC,TTOPUT
1$:	RTS	R3
.ENDC
SVREG:	MOV	R2,-(SP)
	MOV	R3,-(SP)
	MOV	R4,-(SP)
	MOV	R5,-(SP)
	MOV	R0,-(SP)
	JMP	@R1
POPREG:	MOV	SAVEST+4(SP),R3
	CMPB	#374,-2(R3)
	BLOS	NOPOP
	ASL	R2
	BEQ	NOPOP
	MOV	SP,R3
	ADD	#OLDPS+4,R3
	ADD	R3,R2
1$:	MOV	-(R3),-(R2)
	CMP	R3,SP
	BHI	1$
	MOV	R2,SP
NOPOP:	TST	(SP)+
	MOV	(SP)+,R0
	MOV	(SP)+,R5
	MOV	(SP)+,R4
	MOV	(SP)+,R3
	MOV	(SP)+,R2
	RTS	R1
.IF EQ	MTT$Y
EKOR0:	MOVB	R0,-(SP)
	ADD	#100,@SP
	MOVB	(SP)+,EBYT
	JSR	R3,ECHO
	 .BYTE	'^
EBYT:	 .BYTE	0
	RTS	PC
.ENDC
.SBTTL	SYSTEM I/O SUBROUTINE
$SYS:	JSR	R1,SVREG
	MOV	(PC)+,R3
P$SYSC:: .WORD	$SYSCH
	CLR	C.DEVQ(R3)
	MOV	SYUNIT,R1
	MOV	(PC)+,R2
SYENTR:: .WORD	0
	MOV	2(R5),R4
	JSR	PC,QMANGR
1$:	JSR	R1,NOPOP
	ROR	$SYSCH
	RTS	PC
QSIZE::	.WORD	1
QCNT:	.WORD	1
AVAIL::	.WORD	QSTART
QSTART:	BSS	7
.SBTTL	QUEUE MANAGER.
.ENABL	LSB
QMANGR:	MOV	R4,-(SP)
	MOV	(PC)+,R4
PQCNT::	 .WORD	QCNT
QEWAIT::
1$:	SPL	0
	SPL	7
	TST	@R4
	BLE	1$
	DEC	(R4)+
2$:	MOV	@R4,R4
	MOV	@R4,AVAIL
	SPL	0
	CLR	(R4)+
	MOV	R3,(R4)+
3$:	CMPB	#255.,C.DEVQ(R3)
	BEQ	3$
	INCB	C.DEVQ(R3)
	MOV	R3,-(SP)
	MOV	R0,-(SP)
	MOV	R4,R3
	MOV	(SP)+,(R4)+
	CLRB	R1
	MOV	R1,(R4)+
	MOV	(R5)+,(R4)+
	MOV	2(SP),(R4)+
	TST	(R5)+
	MOV	(R5)+,@R4
	CMPB	@R4,#377
	BNE	4$
	SWAB	@R4
	MOVB	@R4,Q.FUNC-Q.COMP(R4)
	MOV	(R5)+,@R4
4$:	MOV	R5,-(SP)
REQUE:
	SPL	7
	TST	EXTFLG
	BNE	5$
	MOV	@R2,R1
	BNE	6$
5$:	MOV	R3,(R2)+
	SPL	0
	MOV	R3,(R2)+
	JSR	PC,@R2
	BR	7$
	BR	REQUE
6$:	MOV	R3,Q.LINK-Q.BLKN(R1)
	MOV	R3,@R2
	SPL	0
7$:	MOV	(SP)+,R5
	MOV	(SP)+,R3
	TST	-(R5)
	BNE	9$
WAITIO::
8$:	TSTB	C.DEVQ(R3)
	BNE	8$
9$:	MOV	(SP)+,R4
	RTS	PC
.DSABL	LSB
.SBTTL	SYNCH CODE
SINK:	CMP	(R5)+,(SP)+
	MOV	R0,-(SP)
	MOV	R1,-(SP)
	SPL	0
	MOV	10(R4),R0
	JSR	PC,@R5
	MOV	(SP)+,R1
	MOV	(SP)+,R0
	RTS	PC
.SBTTL	CHAIN, EXIT
.ENABL	LSB
C$HAIN:	BIS	#CHAIN$,@#JSW
	MOV	SP,R0
	BR	CHXIT
E$XIT:	BIC	#CHAIN$,@#JSW
CHXIT:	MOV	SP,EXTFLG
.IF NE	FPU$11
	MOV	#MONFPP,FPPADD
.ENDC
.IF NE	TIME$R
	MOV	R0,R4
	ENSYS	1$
	JMP	CMKALL
.ENDC
1$:	JSR	PC,QRESET
.IF EQ	MTT$Y
	CMP	$ENTRY+TT.NUM,SYSLOW
	BHIS	2$
	CLR	$ENTRY+TT.NUM
.IFF
	JSR	PC,MTRSET
.ENDC
2$:	ADD	#SPTR-AVAIL,R5
	MOV	R5,SP
	CLR	I.SCCA
	CLR	I.SERR
	CLR	TRAPLC
	ADD	#$CSW-SPTR,R5
	MOV	(PC)+,R2
PI.CSW:: .WORD	I.CSW
	MOV	R5,@R2
	MOV	#16.,-(R2)
.IF EQ	TIME$R
	MOV	R0,-(SP)
.IFF
	MOV	R4,-(SP)
.ENDC
	MOV	$KMLOC,R2
	TST	KMLOC
	BNE	6$
	MOV	$SWPBL,R0
	TST	@#JSW
	BMI	3$
	TST	USRLOC
	BEQ	3$
	JSR	PC,$RSYS
3$:	MOV	(PC)+,R5
P$SWPB:: .WORD	$SWPBL
	MOV	(R5)+,R0
	BIT	#<XITSW$>,CONFG2
	BNE	4$
	CMP	@#USERTOP,R2
	BLO	4$
	MOV	R2,@R5
	BIC	#777,@R5
	MOV	(R5)+,@R5
	SUB	@#USERTO,@R5
	BHI	5$
	ROR	@R5
	DEC	@R5
	TST	-(R5)
	JSR	PC,IOSR
4$:	TST	(R5)+
5$:	CMP	(R5)+,(R5)+
	MOV	$MONBL,R0
	SUB	#KMONSZ,R0
	JSR	PC,IOSR
	CMP	-(R2),-(R2)
6$:	JMP	MEXIT2-KMON(R2)
.DSABL	LSB
$SWPBL::.WORD	0
EXLIST:	.WORD	0
	.WORD	-<USRLEN+KMLEN>
	.WORD	0
$KMLOC::.WORD	KMON
	.WORD	USRLEN+KMLEN
	.WORD	0
.SBTTL	I/O COMPLETION
.ENABL	LSB
COMPLT::JSR	R1,SVREG
	MOV	@R4,R5
	BIT	#HDERR$,@-(R5)
	BNE	7$
	TSTB	Q.FUNC-Q.CSW(R5)
	BLE	1$
	MOV	Q.WCNT-Q.CSW(R5),SPSIZE
1$:	MOV	@R5,R2
	MOV	@R2,R0
	CLR	R1
	SUB	I.CSW,R2
2$:	SUB	#CHSIZ,R2
	BLO	3$
	INC	R1
	BR	2$
3$:	ADD	#C.DEVQ,(R5)+
	DEC	@-(R5)
	GETPSW
	SPL	7
	MOV	-(R5),@R4
	BNE	4$
	CLR	-(R4)
	CLR	R4
4$:
.IF EQ	TIME$R
	MOV	AVAIL,@R5
	MOV	R5,AVAIL
	INC	QCNT
	MOV	Q.COMP(R5),R5
	PUTPSW
	CMP	#1,R5
	BHIS	5$
	INC	RECURS
	MOV	@#ERRBYT,-(SP)
	JSR	PC,@R5
	MOV	(SP)+,@#ERRBYT
	DEC	(PC)+
RECURS:	 .WORD	0
5$:
.IFF
	JSR	PC,QCFREE
	JSR	PC,COMPEX
.ENDC
	TST	R4
	BEQ	6$
	JSR	PC,2(R4)
6$:	JSR	R1,NOPOP
	RTS	PC
7$:	TSTB	@#JSW
	BPL	1$
IOEHLT::HALT
.IF NE TIME$R
QCFREE:	MOV	AVAIL,@R5
	MOV	R5,AVAIL
	INC	QCNT
	MOV	Q.COMP(R5),R5
	RTI
COMPEX:	CMP	#1,R5
	BHIS	8$
	INC	RECURS
	MOV	@#ERRBYT,-(SP)
	JSR	PC,@R5
	MOV	(SP)+,@#ERRBYT
	DEC	(PC)+
RECURS:	 .WORD	0
8$:	RETURN
.DSABL	LSB
	.SBTTL	T$WAIT - Timed wait
FUDGE2::.WORD	TWAITC
	.WORD	177700
T$WAIT:	MOV	(PC)+,R1
FUDGE1::.WORD	FUDGE2
	MOV	(PC)+,@(PC)+
	BR	.
FUDGE3::.WORD	LOPVAL
	CALL	MARKTM
LOPVAL:	.WORD	0
RET16X:	JMP	E16XT
TWAITC:	MOV	#240,LOPVAL
	RETURN
.SBTTL	MARK TIME ENQUEUE
.ENABL	LSB
M$RKT:	CALL	MARKTM
	BR	RET16X
MARKTM:
.IF EQ	MTT$Y
	ADD	#QCNT-TTILCT,R5
.IFF
	ADDR	QCNT,R5
.ENDC
	SPL	7
	DEC	(R5)+
	BMI	4$
	MOV	(R5),R3
	MOV	@R3,@R5
	SPL	0
	MOV	(R0)+,(R3)+
	MOV	(R0)+,(R3)+
	ADD	#C.COMP-C.LINK,R3
	MOV	(R1)+,@R3
	CLR	-(R3)
	MOV	(R1)+,-(R3)
	CLR	-(R3)
	TST	-(R3)
	ENSYS	3$
TIMIO::	ADD	PSCLOK,-(R3)
	ADC	-(R3)
	MOV	(R3)+,R0
	MOV	(PC)+,R2
PLKQUE:: .WORD	LKQUE
1$:	MOV	R2,R1
	MOV	@R1,R2
	BEQ	2$
	MOV	(R2)+,R4
	MOV	(R2)+,R5
	CMP	R0,R4
	BHI	1$
	BLO	2$
	CMP	@R3,R5
	BHIS	1$
2$:	TST	-(R3)
	MOV	@R1,C.LINK(R3)
	MOV	R3,@R1
3$:	RTS	PC
4$:	INC	-(R5)
	SPL	0
	TST	(SP)+
	JMP	E5ER0
.DSABL	LSB
.IF NE	TIM$IT
.SBTTL	$TIMIO	- SCHEDULE A TIMER REQUEST
.ENABL	LSB
$TIMIO::JSR	R3,SAVE30
	MOV	R5,R3
	ADD	(R5)+,R3
	MOV	12(SP),-(SP)
	MOV	R4,-(SP)
	TST	(R5)+
	BNE	$CANIO
	MOV	(R5)+,(R3)+
	MOV	(R5)+,(R3)+
	MOV	R5,16(SP)
	MOV	#-1,6(R3)
	ENSYS	1$
	JMP	TIMIO
.SBTTL	$CANIO	- CANCEL A TIMER REQUEST
$CANIO::MOV	R5,16(SP)
	MOV	C.SEQ(R3),R0
	MOV	#-1,R1
	CLR	R5
	JSR	PC,CMARKT
1$:	MOV	(SP)+,R4
	MOV	(SP)+,R5
2$:	RTS	PC
.DSABL	LSB
.ENDC
.SBTTL	SAVE	3-0
.IF NE	TIM$IT!MTT$Y
SAVE30::MOV	R2,-(SP)
	MOV	R1,-(SP)
	MOV	R0,-(SP)
	JSR	PC,@R3
	MOV	(SP)+,R0
	MOV	(SP)+,R1
	MOV	(SP)+,R2
	MOV	(SP)+,R3
	RTS	PC
.ENDC
.SBTTL	GET TIME OF DAY
.ENABL	LSB
G$TIM:	ENSYS	E16XT
1$:	MOV	(PC)+,R1
P$TIM2:: .WORD	$TIME+2
	MOV	PSCLKH,(R0)+
	MOV	PSCLOK,@R0
	ADD	@R1,@R0
	ADC	-(R0)
	ADD	-(R1),@R0
	CMP	(R0)+,(PC)+
GTM.HI:: .WORD	TIMHI
	BLO	4$
	BHI	2$
	CMP	@R0,GTM.LO
	BLO	4$
2$:	SUB	GTM.HI,(R1)+
	SUB	(PC)+,@R1
GTM.LO:: .WORD	TIMLO
	SBC	-(R1)
	TST	-(R0)
.IF EQ	ROL$OV
	ADD	#40,$DATE
	BR	1$
.IFF
ROLOVR::MOV	$DATE,R1
	BEQ	1$
	MOV	R1,-(SP)
	MOV	R1,-(SP)
	ASR	R1
	ASR	R1
	SWAB	R1
	BIC	#^C<17>,R1
	ADD	PC,R1
	MOVB	DAYTBL-.-1(R1),R1
	CMPB	R1,#28.
	BNE	NOLEAP
	BIT	#3,@SP
	BNE	NOLEAP
	INCB	R1
NOLEAP:	ASL	@SP
	ASL	@SP
	ASL	@SP
	SWAB	@SP
	BICB	#^C<37>,@SP
	CMPB	(SP)+,R1
	BHIS	LSTDAY
	ADD	#40,@SP
	BR	3$
LSTDAY:	BIC	#<31.*40>,@SP
	ADD	#<1*40>+<1*2000>,@SP
	CMP	@SP,#<13.*2000>
	BLO	3$
	BIC	#<31.*2000>,@SP
	ADD	#2001,@SP
3$:	MOV	(SP)+,$DATE
	BR	1$
DAYTBL:	.BYTE	31.,28.,31.,30.,31.,30.
	.BYTE	31.,31.,30.,31.,30.,31.
.ENDC
.SBTTL	CANCEL MARK TIME
C$MKT:	ENSYS	E16XT
	MOV	@R1,R5
	MOV	#177377,R1
	JSR	PC,CMARKT
	BCC	4$
	INC	<2+6+4>*2(SP)
4$:	RTS	PC
.DSABL	LSB
.SBTTL	CANCEL TIMER REQUEST
.ENABL	LSB
CMARKT::MOV	(PC)+,R4
PLKQU2:: .WORD	LKQUE+2
1$:	MOV	R4,R3
2$:	MOV	-(R3),R4
	BEQ	7$
	ADD	#C.JNUM,R4
	TST	R0
	BNE	3$
	CMP	2(R4),#177377
	BLOS	4$
	CMP	R1,#177777
	BNE	1$
	CMP	2(R4),#177700
	BHIS	4$
3$:	CMP	R0,2(R4)
	BNE	1$
4$:	MOV	-(R4),(R3)+
	MOV	-(R4),R2
	TST	-(R4)
	TST	R0
	BEQ	5$
	TST	R5
	BEQ	5$
	SUB	PSCLOK,R2
	MOV	@R4,@R5
	SBC	(R5)+
	MOV	R2,@R5
5$:	CMP	#-1,C.SYS(R4)
	BEQ	6$
	MOV	R4,R5
	GETPSW
	SPL	7
	JSR	PC,QCFREE
6$:	TST	R0
	BEQ	2$
	RTS	PC
7$:	TST	R0
	BEQ	8$
.IFTF
ERRRTN:	NOP
	NOP
	SEC
8$:	RTS	PC
.IFT
.DSABL	LSB
.SBTTL	CANCEL ALL TIMER REQUESTS
CMKALL:	MOV	R2,-(SP)
	MOV	R3,-(SP)
	MOV	R4,-(SP)
	MOV	#177777,R1
	CLR	R0
	JSR	PC,CMARKT
	MOV	(SP)+,R4
	MOV	(SP)+,R3
	MOV	(SP)+,R2
	RTS	PC
.SBTTL	FORK REQUEST PROCESSOR
$FORK::	MOV	R4,-(SP)
	MOV	R5,R4
	ADD	(R5)+,R4
	ADD	#F.BSIZ,R4
	MOV	(SP)+,-(R4)
	MOV	(SP)+,-(R4)
	MOV	R5,-(R4)
	CLR	-(R4)
	SPL	7
	TST	FRKCQE
	BNE	1$
	MOV	R4,FRKCQE
	BR	2$
1$:	MOV	R4,@FRKLQE
2$:	MOV	R4,FRKLQE
	RTS	PC
.IFF
$FORK::	MOV	R3,-(SP)
	MOV	R2,-(SP)
	MOV	R1,-(SP)
	MOV	R0,-(SP)
	MOV	R5,R3
	ADD	(R5)+,R3
	CLR	(R3)+
	MOV	R5,(R3)+
	MOV	10(SP),R5
	JSR	PC,@-(R3)
	MOV	(SP)+,R0
	MOV	(SP)+,R1
	MOV	(SP)+,R2
	MOV	(SP)+,R3
	MOV	(SP)+,R5
	RTS	PC
.ENDC
.SBTTL	STACK, CLEAN-UP
STK.SZ	= STAC$K
.IIF NE MTT$Y,	STK.SZ = STK.SZ + 70.
	.REPT	STK.SZ
	.WORD	125252
	.ENDR
SPTR	==	.
RMSTAK::
.PSECT	PATCH$
$RMEND::
	.BLKW	PATC$H
.CSECT	OVLY0
$RTEND::
.END
                                                                                                                                                                                                                                                                                                                                                                                                                        