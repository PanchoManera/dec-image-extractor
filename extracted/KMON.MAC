.MCALL .MODULE
.MODULE KMON,VERSION=60,COMMENT=<Keyboard Monitor>

;                   COPYRIGHT (c) 1984, 1985, 1986 BY
;             DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;                         ALL RIGHTS RESERVED.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
.SBTTL	Subsetting command conditionals
DEFALT	M$INI	1
DEFALT	L$ANG	1
DEFALT	U$TIL	1
DEFALT	E$$	M$INI
DEFALT	B$$	M$INI
DEFALT	D$$	M$INI
DEFALT	DATE$$	M$INI
DEFALT	TIME$$	M$INI
DEFALT	CLOS$$	M$INI
DEFALT	GT$$	M$INI
DEFALT	STAR$$	M$INI
DEFALT	FRUN$$	M$INI
DEFALT	SRUN$$	M$INI
DEFALT	INST$$	M$INI
DEFALT	REMO$$	M$INI
DEFALT	LOAD$$	M$INI
DEFALT	UNLO$$	M$INI
DEFALT	ASSI$$	M$INI
DEFALT	DEAS$$	M$INI
DEFALT	REEN$$	M$INI
DEFALT	SUSP$$	M$INI
DEFALT	RESU$$	M$INI
DEFALT	RESE$$	M$INI
DEFALT	SET$$	M$INI
DEFALT	HELP$$	M$INI
DEFALT	GET$$	M$INI
DEFALT	SAVE$$	M$INI
DEFALT	MOUN$$	M$INI
DEFALT	DISM$$	M$INI
DEFALT	ABOR$$	M$INI
DEFALT	FORT$$	L$ANG
DEFALT	MACR$$	L$ANG
DEFALT	DIBO$$	L$ANG
DEFALT	COMP$$	L$ANG
DEFALT	LINK$$	L$ANG
DEFALT	LIBR$$	L$ANG
DEFALT	EXEC$$	L$ANG
DEFALT	COPY$$	U$TIL
DEFALT	DIRE$$	U$TIL
DEFALT	EDIT$$	U$TIL
DEFALT	SQUE$$	U$TIL
DEFALT	INIT$$	U$TIL
DEFALT	FORM$$	U$TIL
DEFALT	DUMP$$	U$TIL
DEFALT	DIFF$$	U$TIL
DEFALT	TYPE$$	U$TIL
DEFALT	PRIN$$	U$TIL
DEFALT	RENA$$	U$TIL
DEFALT	DELE$$	U$TIL
DEFALT	PROT$$	U$TIL
DEFALT	UNPR$$	U$TIL
DEFALT	BOOT$$	U$TIL
DEFALT	SHOW$$	U$TIL
DEFALT	MAKE$$	U$TIL
DEFALT	TECO$$	U$TIL
DEFALT	MUNG$$	U$TIL
DEFALT	CREA$$	U$TIL
DEFALT	BACK$$	U$TIL
.IF EQ	BF
FRUN$$	= 0
SUSP$$	= 0
RESU$$	= 0
SRUN$$	= 0
ABOR$$	= 0
.ENDC
.IF EQ	SYT$K
SRUN$$	= 0
.ENDC
.IF EQ	<VT11$!VS60$>&^CMTT$Y
GT$$	= 0
.ENDC
.SBTTL	MACROS
OERPTR=0
.MACRO	KMEROR	TEXT,ARG,ERRLEV
.IF NB	ARG
	 JSR	R0,MSGKM
	 .ASCIZ	\?KMON-U-TEXT\
	 .EVEN
.IIF GE	OVLYN,.ERROR
.IFF
 .IF GE	OVLYN
	 OJSR	PC,ERROVR
 .IFF
	 CALL	ERROVR
 .IFTF
	 .WORD	OERPTR
  .IF DF OERBEG
.CSECT	OVLYE
. = OERBEG+OERPTR
     .IF B ERRLEV
	.BYTE FATAL$
     .IFF
	.BYTE ERRLEV
     .ENDC
	 .ASCIZ	\TEXT\
	.IIF GE <.-STADDR> - <1000*OVLYSZ>, .ERROR
  .ENDC
	.NCHR	$TMPN,<TEXT>
	OERPTR=OERPTR+$TMPN+2
 .IFF
	.PSECT	RT11
 .IFT
.IRP	N,<\OVLYN>
	.CSECT	OVLY'N
.ENDR
.ENDC
.ENDC
.ENDM	KMEROR
OERPT2	= 0
.MACRO	KMRTMG	TEXT,ERRLEV,PRFILE
 .IF GE	OVLYN
	.IF IDN	<PRFILE>,<PFILE>
		OJSR	PC,RTERR1
	.IFF
		.IF IDN <PRFILE>,<BCKASZ>
			OJSR	PC,RTERR3
		.IFF
			.IF IDN <PRFILE>,JSTNAM
				OJSR	PC,RTERR4
			.IFF
				OJSR	PC,RTERR2
			.ENDC
		.ENDC
	.ENDC
 .IFF
	.IF IDN	<PRFILE>,<PFILE>
		CALL	RTERR1
	.IFF
		.IF IDN <PRFILE>,<BCKASZ>
			CALL	RTERR3
		.IFF
			.IF IDN <PRFILE>,<JSTNAM>
				CALL	RTERR4
			.IFF
				CALL	RTERR2
			.ENDC
		.ENDC
	.ENDC
 .IFTF
	 .WORD	OERPT2
  .IF DF OERBG2
.CSECT	OVLYE2
. = OERBG2+OERPT2
     .IF B ERRLEV
	.BYTE FATAL$
     .IFF
	.BYTE ERRLEV
     .ENDC
	 .ASCII	\TEXT\<200>
	.IIF GE <.-STADD2> - <1000*OVLYSZ>,.ERROR
  .ENDC
	.NCHR	$TMPN,<TEXT>
	OERPT2=OERPT2+$TMPN+2
 .IFF
	.PSECT	RT11
 .IFT
.IRP	N,<\OVLYN>
	.CSECT	OVLY'N
.ENDR
.ENDC
.ENDM	KMRTMG
.MACRO	OVLINK	CMD
.IF GE	OVLYN
	 OJSR	R2,OVLINK
.IFF
	 JSR	R2,OVLINK
.ENDC
.IF EQ	N.'CMD-1
	.BYTE	O.'CMD/2,OVLY-KMON/1000
.IFF
	.BYTE	O.'CMD/2,N.'CMD + <$RTEND - KMON + 777 /1000>
.ENDC
.ENDM	OVLINK
.MACRO	CMDTBL	CMD
.IF NDF	CMD
	.WORD	CCLENT-CMDBAS
.IFF
 .IF DF	O.'CMD
  .IF EQ N.'CMD-1
	.BYTE	O.'CMD/2,OVLY-KMON/1000
  .IFF
	.BYTE	O.'CMD/2,N.'CMD + <$RTEND - KMON + 777 /1000>
  .ENDC
 .IFF
	.WORD	CMD-CMDBAS
 .ENDC
.ENDC
.ENDM	CMDTBL
.IIF DF	NLKMON,	.NLIST
.SBTTL	*********************
.SBTTL	*	KMON	    *
.SBTTL	*********************
.SBTTL	SLIDE KMON/USR UP OR DOWN
.PSECT	RT11
KMON::	.WORD	0
KUMOVE:	MOV	PC,R4
	.LOCK
	BR	KUMOV1
MOVEUP:	CLR	-(SP)
1$:	MOV	-(R1),-(R4)
	BNE	1$
	CMP	R1,PC
	BLO	2$
	CMP	R1,SP
	BNE	1$
	MOV	R4,SP
	TST	(SP)+
	BR	1$
2$:	MOV	R0,R1
	ADD	R0,@SP
	RETURN
MINMOV	= . - KMON
.ENABL	LSB
KUMOV1:	CMP	-(R4),-(R4)
	ASL	R0
	BCS	2$
	ADD	#KMSIZE+USRSIZ,R4
	MOV	R4,R1
	ADD	R0,R4
	BIT	#IFDAT,@.STATWD
	BEQ	1$
	ADD	@R1,R4
	ADD	@R1,R1
	ADD	R0,@.INBFPT
	ADD	R0,ENBFPT
1$:	CALL	MOVEUP
	BR	5$
2$:	ADDR	MOVEDN,R3
	CALL	CLRLOW
	ADDR	MOVEDE,R4,PUSH
	MOV	@SP,R1
	ADD	#KMSIZE+USRSIZ,R1
3$:	MOV	-(R4),-(R1)
	CMP	R4,R3
	BNE	3$
	MOV	@SP,R4
	MOV	@.STATWD,@SP
	MOV	R1,-(SP)
	MOV	R4,R1
	ADD	R0,R4
	BCC	MEMERR
.IF EQ	MMG$T
	CMP	R4,#1000
.IFF
	CMP	R4,#<40000-KMSIZE>;Moving too low? KMON cannot go into PAR1.
.ENDC
	BLO	MEMERR
	CALL	@(SP)+
	BIC	#^C<IFDAT>,(SP)+
	BEQ	5$
	ADD	R0,@.INBFPT
	ADD	R0,ENBFPT
	MOV	@R1,R3
4$:	MOV	(R1)+,(R4)+
	SUB	#2,R3
	BNE	4$
5$:	MOV	R3,-(SP)
	JSR	R2,7$
..USRL:: .WORD	USRLOC-$RMON
.KMLOC:: .WORD	KMLOC-$RMON
.$USRL:: .WORD	$USRLC-$RMON
.$KMLO:: .WORD	$KMLOC-$RMON
..SYSL:: .WORD	SYSLOW-$RMON
.IF EQ	BF
.MONLC:: .WORD	MONLOC-$RMON
.ENDC
	.WORD	0
	.WORD	.USRBU-RELUS4
	.WORD	.USRTO-RELUS4
	.WORD	.USRBO-RELUS4
	.WORD	.FNAME-RELUS4
	.WORD	.FNAM6-RELUS4
	.WORD	.D.USR-RELUS4
	.WORD	.M.USR-RELUS4
	.WORD	.USRIO-RELUS4
	.WORD	.FILDE-RELUS4
	.WORD	.HANSP-RELUS4
	.WORD	.DVSTS-RELUS4
.IF EQ	BF
	.WORD	.DRVTB-RELUS4
.ENDC
.IF EQ	MMG$T
	.WORD	.STKSV-RELUS4
	.WORD	.SVSTK-RELUS4
.ENDC
	.WORD	0
6$:	ADD	R0,@R3
7$:	MOV	(R2)+,R3
	BNE	6$
8$:	MOV	(R2)+,R3
	BEQ	9$
	ADD	PC,R3
RELUS4:	ADD	R0,@R3
	BR	8$
9$:	ADD	R0,SYSIOB
	MOV	(SP)+,R2
	MOV	(SP)+,R3
	ADD	R0,(PC)+
ACCUM:	 .WORD	0
	.UNLOCK
	ADD	R0,@SP
	RETURN
.DSABL	LSB
MOVEDN:	MOV	SP,R3
	CLR	-(SP)
1$:	MOV	(R1)+,(R4)+
	BNE	1$
	CMP	R1,PC
	BHI	2$
	CMP	R1,R3
	BNE	1$
	MOV	R4,SP
	BR	1$
2$:	ADD	R0,@SP
	RETURN
	.WORD	0
MOVEDE:
.ASSUME	<MOVEDE-MOVEDN>	EQ	26.
MEMERR:	CALLR	OVERC
.IF NE	AI$COD
 .IF NE	RESE$$
RESET::	BIS	#<IFCTLC!IFABRT>,@.STATWD
	CLR	R3
	MOV	(PC)+,(R3)+
	 BIC	R0,R0
	MOV	(PC)+,(R3)+
.IF EQ	MMG$T
	 .EXIT
.IFF
	 .ASTX
.ENDC
	MOV	@#SYSPTR,R3
	BR	BCLEAN
.ENDC
.ENDC
.SBTTL	KMON CLEANUP AFTER EXIT; COLLECT CMD LINE
MEXIT:	CALL	LOCATE
MEXIT2::
.IF EQ	BF
	CALL	QREST1
	CLR	@.RECURS
	CLR	@.DFLG
	MOV	@#SYSPTR,R3
	CLR	MONCAL-$RMON(R3)
.ENDC
	CLR	ENBFPT
	MOV	@.$KMLO,@.KMLOC
	BIC	#TTSPC$+TTLC$,@#JSW
	BIC	#IFBEXT!IFRVTTY!IFGTCC,@.STATWD
	CLR	EMTMOD
	CLR	GETCNT
.IF NE	BF
	MOV	@#SYSPTR,R3
.ENDC
BCLEAN:	MOV	SP,KMONIN-$RMON(R3)
	CLR	BLKEY-$RMON(R3)
.IF EQ	BF
	CALL	CLRHD1
	CLR	$SYSCH+10-$RMON(R3)
	CLR	@.EXTFLG
 .IF EQ	MTT$Y
	CLR	TTIPRE-$RMON(R3)
	CLRB	TTILCT+1-$RMON(R3)
 .IFF
	MOV	I.CNSL-$RMON(R3),R0
	CLRB	T.PTTI(R0)
 .ENDC
	BIT	#IFCTLC,@.STATWD
	BEQ	1$
 .IF EQ	MTT$Y
	CLR	TTILCT-$RMON(R3)
	CLR	TTIBUF+4-$RMON(R3)
	MOV	TTIBUF+2-$RMON(R3),TTIBUF+6-$RMON(R3)
  .IF NE HSR$B
	MOV	HSRB-$RMON(R3),HSRBGP-$RMON(R3)
	MOV	#-1,HSRBCC-$RMON(R3)
  .ENDC
 .IFF
	CLR	T.TTLC(R0)
	CLR	T.ICTR(R0)
	MOV	T.IPUT(R0),T.IGET(R0)
.ENDC
1$:
.IFF
 .IF EQ	MTT$Y
	MOV	CNTXT-$RMON(R3),R0
	CLR	I.PTTI(R0)
 .IFF
	MOV	BKCNSL-$RMON(R3),R0
	CLRB	T.PTTI(R0)
 .ENDC
	CLR	@.EXTFLG
.ENDC
	MOV	(SP)+,R0
	ADDR	KMSTAK,SP
	MOV	@SP,SP
	TST	R0
	BNE	KCHAIN
.IF EQ 	AI$COD
 .IF NE RESE$$
RESET::
 .ENDC
.ENDC
RESET1:	BIT	#<SPXIT$>,@#JSW
	BEQ	1$
	BIS	#<IFSPCD>,@.STATWD
	BIC	#<CHAIN$!SPXIT$!CHNIF$>,@#JSW
	MOV	SP,EXPSPC
	BR	2$
1$:	BIT	#CHNIF$,@#JSW
	BEQ	3$
	BIS	#IFABRT!IFCHAIN,@.STATWD
2$:
3$:	CALL	CLRLOW
.IF NE	BF
	.HRESET
.IFF
	CALL	RSTSRH
.ENDC
CTRLCK:	BIC	#CHAIN$,@#JSW
KCHAIN:	MOV	.USRBUF,SYSIOB
	ADDR	KMSTAK,R0
	MOV	R0,SP
	.RCTRLO
STRT:	MOV	#-1,CMDFLG
	ADDR	KMCBUF,R5
	MOV	R5,R3
	CLR	(PC)+
DOTFLG:	 .WORD	0
	MOV	#KMCBFLN,R1
.IIF EQ LNK$IF,	.NLIST
.IF NE	LNK$IF
	BIT	#IFLIF,@.STATWD
	BEQ	STRTP
	MOV	KBFLN,R1
.ENDC
.IIF EQ LNK$IF,	.LIST
.ENABL	LSB
STRTP:
.IF NE	BF
	.UNLOCK
.ENDC
	BIT	#CHAIN$,@#JSW
	BEQ	1$
.IF NE	BF
	.LOCK
.ENDC
	CALLR	RUN
1$:	MOV	.STATWD,R4
	BIC	#<IFCTLC>,@R4
	BISB	@#USERRB,@#EXTIND-$RMON
.EXTIND==.-2
	BITB	@#ERRLEV-$RMON,@#USERRB
.ERRLEV==.-4
	BNE	KABORT
	BIT	#<IFABRT>,@R4
	BNE	KABORT
	CLRB	@#USERRB
2$:	BIT	#<IFSPCD>,@R4
	BNE	3$
	BIT	#<IFCHAIN>,@R4
	BEQ	4$
	BIC	#<IFCHAIN>,@R4
3$:	CALL	CHANIF
	BR	STRT
4$:	TST	DATAFG
	BNE	5$
	MOV	@.INBFPT,R2
	BNE	IFDCLN
5$:	BIT	#<IFACTV>,@R4
	BNE	INDFLL
INDXIT:
	MOV	#INDSTA-$RMON,R2
.INDSTA==.-2
				.Assume IN$IND EQ 200
	TSTB	@R2
	BPL	7$
	BICB	#<LN$IND!IN$IND>,@R2
	BISB	#<IN$RUN>,@R2
INDX2:
	MOV	@#$INDDV-$RMON,R0
.$INDDV	==	.-2
	ADDR	INDCNT,R2
	MOV	R2,R1
	ADD	#6,R1
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
	MOV	SP,EXPSPC
6$:	MOV	#CHAINA,R1
	MOV	@R2,(R1)+
	CALL	CHANF1
	BR	3$
7$:
.IF NE	CONT$N
	BIC	#<IFDOL>,@.STATWD
	ADDR	KCTNU,R2
	TST	@R2
	BNE	CFATAL
	MOV	SP,(R2)+
	BR	6$
.ENDC
KPMT:	CALL	KDOT
	MOV	R5,R5
	BIC	#<IFDOL>,@.STATWD
8$:	MOV	@#JSW,-(SP)
9$:	MOV	#<TTLC$>,@#JSW
	.TTINR
	MOV	R5,R5
	BCS	9$
	MOV	(SP)+,@#JSW
	CLR	(PC)+
DATAFG:	 .WORD	0
	JSR	R2,CHARCK
	 BR	8$
	JSR	R2,CNTCK
	 BR	8$
	BIC	#IFINP,@R4
	CALLR	ATSCAN
.DSABL	LSB
.SBTTL	ABORT DCL/@FILE PROCESSING
KABORT:	TST	COROVR
	BNE	1$
	BIT	#IFDAT,@R4
	BEQ	4$
1$:	CALL	PUTBAK
	CLR	COROVR
	MOV	@.IFSVST,R4
	BEQ	4$
	SUB	#6,R4
2$:	TSTB	@R4
	BEQ	3$
	SUB	#IFSVSZ,R4
	BR	2$
3$:	CLR	@.IFSVST
	CALL	PUTBLK
4$:	CLR	@.EXTFL
	BIC	#^C<IFEKO$!IFCHAIN!IFIND>,@.STATWD
	CLRB	@#USERRB
	CLR	DATAFG
	CALLR	CTRLCK
ATEOD:	TST	DOTFLG
	BNE	KPMT
	BIT	#IFACTV,@R4
INDFLL:	BNE	INDFIL
	BITB	#<LN$IND!IN$IND>,@.INDSTA
	BNE	INDXIT
	CALL	PUTBAK
	CLR	@.EXTFL
	CALLR	STRT
.IF NE	CONT$N
CFATAL:	CALLR	BADCOM
.ENDC
.SBTTL	GET COMMAND LINE FROM DCL/@FILE BUFFER
MINFRE=MINMOV*2
.ENABL	LSB
IFDCLN:	CMPB	@R2,#-1
	BEQ	ATEOD
	CMPB	@R2,#177
	BNE	2$
	TST	DOTFLG
	BNE	KPMT
	BITB	#<LN$IND>,@.INDSTA
	BNE	1$
	BIT	#<IFACTV>,@R4
	BEQ	1$
	TST	@(PC)+
.CURLEV:: .WORD	CURLEV-$RMON
	BEQ	INDFIL
1$:	INC	@.INBFPT
	CALLR	INDXIT
2$:	ADDR	KMON+KMSIZE+USRSIZ,R4
	MOV	R4,R0
3$:	ADD	#MINFRE,R0
	CMP	R0,R2
	BLO	3$
	SUB	#MINFRE,R0
	CMP	R4,R0
	BHIS	4$
	MOV	R4,-(R0)
	SUB	R0,@R0
	ADD	@R4,@R0
	CMP	@R0,#MINMOV
	BLOS	4$
	MOV	SP,@.EXTFL
	MOV	R0,@R4
	SUB	R4,@R4
	MOV	R1,-(SP)
	CALL	PUTBL1
	MOV	(SP)+,R1
	ADD	R0,R5
	ADD	R0,R3
4$:	BIS	#IFDAT,@.STATWD
	CLR	@.EXTFL
5$:	CLR	-(SP)
	TSTB	@R2
	BPL	6$
	BIT	#IFEKO$,@.STATWD
	BNE	6$
	MOV	R2,@SP
6$:	BICB	#200,@R2
7$:	MOVB	(R2)+,R0
	BNE	8$
	MOV	#LF,R0
8$:	CLR	DATAFG
	JSR	R2,CHARC1
	 BR	6$
	MOV	R2,@.INBFPT
	MOV	(SP)+,R0
	BEQ	9$
	CALL	KDOT
	MOV	R4,R4
	.PRINT
9$:	JSR	R2,CNTCK
	 BR	12$
	MOV	R5,-(SP)
10$:	TSTB	-(R5)
	BEQ	11$
	CMPB	@R5,#ATSIGN
	BNE	10$
	BR	AT1
11$:	MOV	R5,R3
	MOV	(SP)+,R5
	BIS	#IFINP,@.STATWD
	BR	CMDREC
12$:	CMPB	@R2,#-1
	BNE	5$
ILCNT:	KMEROR	<Invalid continuation>
.DSABL	LSB
.SBTTL	INDIRECT FILE EXPANSION
INDFIL:	MOV	R1,-(SP)
	MOV	R3,-(SP)
	OVLINK	INDF1
.SBTTL	INDIRECT FILE STACK FORMAT
.SBTTL	Scan line for indirect file construct
.IIF EQ LNK$IF,	.NLIST
.IF NE	LNK$IF
.ENDC
.IIF EQ LNK$IF,	.LIST
ATSCAN:	MOV	R5,-(SP)
10$:	TSTB	-(R5)
	BEQ	SCNDUN
	CMPB	@R5,#<ATSIGN>
	BNE	10$
AT1:	MOV	R1,-(SP)
	OVLINK	AT2
AT3:	CALL	GETHAR
	MOV	R3,-(SP)
	OVLINK	AT4
	.ENABL	LSB
SCNDUN:	MOV	R5,R4
	MOV	(SP)+,R5
	BIT	#IFACTV,@.STATWD
	BEQ	CMDREC
	OVLINK	SCN0
SCN3:
.IIF EQ LNK$IF,	.NLIST
 .IF NE	LNK$IF
 	BIT	#<IFLEOF>,@.STATWD
	BNE	SCN2
 .ENDC
.IIF EQ LNK$IF,	.LIST
	CALLR	STRT
.IIF EQ LNK$IF,	.NLIST
 .IF NE	LNK$IF
SCN2:	BIC	#<IFLIF!IFLEOF>,@.STATWD
	MOV	ACCUM,R0
	CLR	DATAFG
	SUB	R0,@SP
	RETURN
 .ENDC
.IIF EQ LNK$IF,	.LIST
	.DSABL	LSB
.SBTTL	COMMAND PROCESSOR
CMDREC:	TSTB	-(R5)
	BEQ	CTRLC2
	CMPB	(R5)+,#CTRLC
	BNE	1$
	.EXIT
1$:	MOV	R5,-(SP)
	ADDR	KMCBND,SP
SCNLIN:	TSTB	-(R5)
	BEQ	CLASIFY
	CMPB	#'(,@R5
	BNE	SCNLIN
	OVLINK	FACTOR
CTRLC2:	CALLR	CTRLCK
.SBTTL	COMMAND	RECOGNIZER
	.ENABL	LSB
CLASIFY:TST	(SP)+
	MOV	(SP)+,R5
	MOV	.CLIFLG,R0
	TSTB	EXEFLG
	BNE	15$
.IF NE	U$CL
	BITB	#<UCFKMN!UCFON>,@R0
	BMI	5$
	BEQ	10$
 .ASSUME UCFRUN EQ 0
	BIC	#<177400!UCFON>,@R0
	MOV	#<3*400+CHOVLY>,R0
	EMT	374
	MOV	R5,R2
	ADDR	RUN2,SP
	OVLINK	UCF
5$:
	BICB	#<UCFKMN>,@R0
.ENDC
10$:	BITB	#<DCLON>,@R0
	BEQ	CCLENT
15$:	MOVB	#<DCLRUN>,CLITYP-CLIFLG(R0)
	CLRB	FOTFL2
	CLRB	SOTFL2
	CLRB	TOTFL2
	ADDR	RUNFLG,R0
	CLR	(R0)+
	MOV	#<SPACE*400>,(R0)+
	MOV	$DK,(R0)+
	MOV	$DK+2,(R0)+
.IF NE	EXEC$$
	MOV	#<EXELSZ-1>,(PC)+
EXEPTR:	 .WORD	0
.ENDC
	CALL	ALPHT
	BCC	BADCM1
	MOV	R5,R3
	ADDR	COMLST,R2
	CLR	R0
20$:	INC	R0
	MOV	R3,R5
25$:	CALL	CHMTCH
	BNE	30$
	CALL	ALPHNT
	BCC	40$
	TSTB	(R2)+
	BGT	25$
	BR	35$
BADCM1:	BR	BADCOM
30$:	TSTB	(R2)+
	BGT	30$
35$:	BMI	20$
CCLENT:
	BITB	#CCLON,@#CLIFLG-$RMON
.CLIFLG	==	.-2
.IF NE	U$CL
	BEQ	36$
.IFF
	BEQ	BADCOM
.ENDC
	MOVB	#CCLRUN,@#CLITYP-$RMON
.CLITYP	==	.-2
	ADDR	KMCBUF,R5
	MOV	(PC)+,(R5)+
	.ASCII	\:Y\
	TSTB	(R5)+
	MOV	#KMCBFLN,R1
.IF NE	BF
	.LOCK
.ENDC
	CALLR	RUN
.IF NE 	U$CL
36$:	MOV	#<3*400+CHOVLY>,R0
	EMT	374
	MOV	R5,R2
	ADDR	RUN2,SP
	OVLINK	UCL
.ENDC
AMBCOM:	KMEROR	<Ambiguous command>
40$:	BITB	#100,@R2
	BNE	AMBCOM
	ASL	R0
	ADDR	COMDST-2,R2
	ADD	R0,R2
	MOV	@R2,R3
	ADD	PC,R3
CMDBAS	= .
.IF NE	BF
	.LOCK
.ENDC
	CMP	#ENDRES-.,@R2
	BGT	45$
	MOV	R5,R1
	CALL	OVREAD
45$:	CLR	SAVSWT
	CALL	@R3
CTRLC1:	BR	CTRLC2
CHMTCH:	MOVB	@R2,-(SP)
	BIC	#^C<77>,@SP
	MOVB	@R5,-(SP)
	CMPB	#'a,@SP
	BHI	50$
	CMPB	#'z,@SP
	BLO	50$
	BICB	#40,@SP
50$:	BIC	#^C<77>,@SP
	CMP	(SP)+,(SP)+
	RETURN
.DSABL	LSB
.SBTTL	READ OVERLAY, LINK TO OVERLAY
.ENABL	LSB
OVREAD:	CLR	-(SP)
	MOVB	(R2)+,@SP
	MOVB	(R2)+,R0
	ADDR	OVLIOB,R5
	ADDR	OVLY,R3
	CMPB	R0,@R5
	BEQ	1$
	MOV	R0,-(SP)
	CLR	(R5)+
	MOV	R3,@R5
	MOV	#-1,(PC)+
IFBN:	 .WORD	-1
	ADD	@(PC)+,R0
.$MONB:: .WORD	$MONBL-$RMON
	SUB	#KMONSZ,R0
.IF EQ	MMG$T
	CALL	@.$SYS
.IFF
	CALL	RWSYS
.ENDC
	BCS	2$
	MOV	(SP)+,-(R5)
1$:	MOV	R1,R5
	ASL	@SP
	ADD	(SP)+,R3
	RETURN
2$:	CLR	-(R5)
	CLR	R4
	KMEROR	<Overlay read error>,RES,UNCON$
.DSABL	LSB
BADCOM:	KMEROR	<Invalid command>
OVLINK:	MOV	R5,R1
	CALL	OVREAD
	MOV	(SP)+,R2
	CALLR	@R3
ERROVR:	MOV	@(SP)+,R5
	OVLINK	ERRCOD
RTERR1:	MOV	(PC)+,R4
RTERR2:	CLR	R4
	MOV	@(SP)+,R5
	OVLINK	RTERR
RTERR3:	MOV	@(SP)+,R5
	OVLINK	BRTERR
RTERR4:	MOV	@(SP)+,R5
	OVLINK	RADERR
COPYFN:	MOV	R0,-(SP)
	ADDR	INPFN+0,R3
	MOV	(R0)+,(R3)+
	MOV	(R0)+,(R3)+
	MOV	(R0)+,(R3)+
	MOV	(R0)+,(R3)+
	MOV	(SP)+,R0
	RETURN
.IF NE	BF
 .IF NE	ERL$G
ERLCHK:
.IF NE	SYT$K
	CMP	I.LNAM(R4),#"ER
	BNE	1$
	CMP	I.LNAM+2(R4),#"RL
	BNE	1$
	CMP	I.LNAM+4(R4),#"OG
.IFF
	CMP	I.NAME+2(R4),#<^RERR>
	BNE	1$
	CMP	I.NAME+4(R4),#<^RLOG>
.ENDC
1$:	RETURN
 .ENDC
.ENDC
.IF NE	SYT$K
.SBTTL	RAD50 TO ASCII CONVERSION ROUTINE
	.WORD	0,1,50
DIVTAB:	.WORD	50*50
R50ASC:	MOV	R4,-(SP)
	MOV	R3,-(SP)
1$:	ADDR	DIVTAB,R3
2$:	MOV	#-1,R4
	CMP	#174777,R0
	BLO	5$
3$:	INC	R4
	SUB	@R3,R0
	BCC	3$
	ADD	@R3,R0
	TST	R4
	BEQ	6$
	CMP	#33,R4
	BLO	7$
	BEQ	8$
5$:	ADD	#40,R4
6$:	ADD	#16,R4
7$:	ADD	#11,R4
8$:	ADD	#11,R4
	MOVB	R4,(R1)+
	TST	-(R3)
	BNE	2$
	MOV	(SP)+,R3
	MOV	(SP)+,R4
	RETURN
.ENDC
MSGKM:	BISB	#<UNCON$>,@#USERRB
MSGKM1:	.RCTRLO
	.PRINT
.IF EQ	CONT$N
	BITB	#<UNCON$>,@#USERRB
	BEQ	3$
.IFF
	BITB	#<WARN$>,@#USERRB
	BNE	3$
.ENDC
	BIS	#<IFABRT>,@.STATWD
.IF NE	CONT$N
	TST	CTNUFG
	BEQ	3$
	CLR	CTNUFG
	ADDR	KMHLT,R0
	.PRINT
2$:
 .IF NE	BF
	MOV	@#SYSPTR,R4
	ADD	#TTOBUF+2-$RMON,R4
	TSTB	@R4
 .IFF
	TST	@..TTOB
 .ENDC
	BNE	2$
	HALT
.ENDC
3$:	.EXIT
.IF NE	CONT$N
KMHLT:	.ASCIZ	"?KMON-U-Fatal halt"
	.EVEN
.ENDC
KCRLF:	MOV	PC,R0
	MOV	R0,R0
	.PRINT
	RETURN
LBDCOM:	BR	BADCOM
.SBTTL	RUN
RUN:	CLR	RFLG
	CALL	GETCOD
RUN2:	CLR	R2
	OVLINK	STRE
NOTFND:	KMRTMG	<File not found>,,PFILE
.SBTTL	R  (RUN FROM SY:)
	.ENABL	LSB
R:	MOV	#<^RSY >,R3
	CALL	FILE
	CMP	#<^RSY >,@R3
	BNE	LBDCOM
	INC	R5
1$:	CALL	ALPHNT
	BCS	1$
	TSTB	@R5
	BNE	LBDCOM
	CALL	COPYFN
	.LOOKUP	CHOVLY
	BCS	NOTFND
	CLR	@#USERTOP
	MOV	SP,(PC)+
RFLG:	.WORD	0
	CALL	CCBB0
	CLR	RFLG
2$:	MOV	(R2)+,(R3)+
	DEC	R1
	BNE	2$
	MOV	SB17-<CCB+20>(R3),R1
	INC	R1
	MOV	@#USERPC,R2
	MOV	#<1000>,-(SP)
	MOV	R1,-(SP)
	MOV	R0,-(SP)
	OVLINK	RUNCHK
BEGIN:
.IF NE	MMG$T
	CLR	SCCATB-$RMON(R5);Make sure there is no old value in SCCA table
	BIT	#VIRT$,@#JSW
	BEQ	7$
	MOV	R5,R0
	ADD	#BGWPTR-$RMON,R0
	MOV	(R0)+,R4
	MOV	(R4)+,-(SP)
	MOV	R0,(R4)+
	MOV	#V.MAX/64.,(R0)+
	MOV	@.$USRLC,@R0
	SUB	#V.MAX,@R0
	BIC	#77,@R0
	ROL	@R0
	ROL	@R0
	ROLB	@R0
	SWAB	(R0)+
	MOV	#400,@R0
	CLR	(R4)+
	MOV	@#USERTOP,@R4
	MOV	(R4)+,R0
	ADD	#77+2,R0
	BIC	#77,R0
	ROL	R0
	ROL	R0
	ROLB	R0
	SWAB	R0
	MOV	R0,(R4)+
	CLR	(R4)+
	MOVB	#200,(R4)+
	CLRB	@R4
5$:	INCB	@R4
	SUB	#200,R0
	BGT	5$
	SWAB	R0
	CLRB	R0
	ADD	#77406,R0
	INC	R4
	MOV	R0,(R4)+
	MOV	(SP)+,R0
6$:	DEC	R0
	BEQ	7$
	CLR	W.BSIZ(R4)
	ADD	#W.BLGH,R4
	BR	6$
7$:	CALL	$VRAW
.ENDC
	MOV	@#USERTOP,R4
	TST	@#USERSP
	BNE	8$
	MOV	#1000,@#USERSP
8$:	MOV	@..SYSL,R0
	BIT	#USR$,CONFIG-$RMON(R5)
	BEQ	9$
	MOV	@.$USRLC,R0
9$:
.IF NE	MMG$T
	SUB	VBIAS,R0
.ENDC
	CMP	R0,R4
	BLOS	OVERC
	.SETTOP	R4
.IF NE	CONT$N
	CLR	CTNUFG
.ENDC
	SUB	R3,R4
	BCS	10$
	ADD	#KMBLK+4-$RMON,R5
	ROR	R4
	INC	R4
	MOV	R4,-(R5)
	MOV	R1,R0
.IF EQ	MMG$T
	MOV	R3,-(R5)
	MOV	R5,R1
	ADD	#SPTR-KMBLK,R1
	MOV	R1,SP
	CALLR	RDOVLY-KMBLK(R5)
10$:	CALLR	ENTRPG-$RMON(R5)
.IFF
	ADD	VBIAS,R3
11$:	MOV	R3,-(R5)
	.ASTX
10$:	MOV	#-1,R0
	.ASTX
.ENDC
OVERC:	CLR	@#USERTOP
	KMEROR	<Insufficient memory>
	.DSABL	LSB
.SBTTL	GET	(also used by RUN)
.IF NE	GET$$
GET:
.ENDC
GETCOD:	TST	GETCNT
	BNE	1$
	CALL	CLRCCB
	BIC	#RSTRT$,@#JSW
	INC	GETCNT
1$:	MOV	@#JSW,-(SP)
	CALL	GETHAN
	BIS	(SP)+,@#JSW
	SUB	R0,@SP
	MOV	R3,-(SP)
	OVLINK	GET1
.SBTTL	SAVE   (PART 1)
.IF NE	SAVE$$
SAVE:
.IF NE	MMG$T
	BIT	#VIRT$,@#JSW
	BEQ	1$
	CALLR	BADCOM
1$:
.ENDC
	CALL	GETHAN
	SUB	R0,@SP
	MOV	R3,-(SP)
	OVLINK	SAV1
.ENDC
.IF NE	FRUN$$!SRUN$$
FSGHAR:	CALL	GETHAR
	SUB	R0,@SP
	MOV	R3,-(SP)
	OVLINK	FSR2
.ENDC
.IF NE	U$CL
UCLROT:	CALL	GETHAR
	SUB	R0,@SP
	MOV	(SP)+,R5
	SUB	R0,(SP)
	SUB	R0,R3
	MOV	R3,-(SP)
	BIS	#<CHAIN$>,@#JSW
	OVLINK	GETUCL
.ENDC
ENDRES	= .
.SBTTL	SYSK, CLRCCB, CLRLOW
.ENABL	LSB
SYSK:	CLR	@.BLKEY
	MOV	@(PC)+,-(SP)
.$SWPB:: .WORD	$SWPBL-$RMON
	ADD	@SP,R0
	ADD	#SWAPSZ,@SP
	MOV	2(R5),-(SP)
	BPL	1$
	NEG	@SP
1$:	SWAB	@SP
	ADD	R0,@SP
	CMP	(SP)+,(SP)+
	BHI	OVERC
.IF EQ	MMG$T
	CALL	@.$SYS
.IFF
	CALL	RWSYS
.ENDC
	BCC	4$
	TST	2(R5)
	BPL	SYRDER
SYWTER:	KMEROR	<System output error>,,UNCON$
SYRDER:	KMEROR	<System input error>,,UNCON$
CLRLOW:	MOV	#PARMS,R1
2$:	CLRB	(R1)+
	CMP	R1,#USERRB
	BLO	2$
CLRCCB:
	MOV	#CCB-$RMON,R1
.CCB	==	.-2
	MOV	#10,-(SP)
3$:	CLR	(R1)+
	DEC	@SP
	BNE	3$
	MOV	(SP)+,@#USERTOP
4$:	RETURN
.DSABL	LSB
.SBTTL	FILE
.ENABL	LSB
FILE:
.IF NE	SYT$K
	CALL	5$
	MOV	R0,-(SP)
	MOV	R1,-(SP)
	BIT	#CHAIN$,@#JSW
	BEQ	1$
	MOV	@.$IMPUR,R0
	ADD	#I.NAME,R0
1$:	MOV	R0,R1
	ADD	#I.LNAM-I.NAME,R1
	MOV	R2,R0
	CALL	R50ASC
	MOV	4(R3),R0
	CALL	R50ASC
	CMPB	-(R1),#SPACE
	BNE	3$
2$:	CLRB	@R1
	CMPB	-(R1),#SPACE
	BEQ	2$
3$:	MOV	(SP)+,R1
	MOV	(SP)+,R0
4$:	RETURN
5$:
.ENDC
	JSR	R1,6$
	 .RAD50	"SAV"
6$:	MOV	#<3*400+CHOVLY>,R0
	EMT	374
	MOV	R3,DEV1
	MOV	#500,R0
	BIT	@#JSW,#CHAIN$
	BNE	8$
.IF NE	BF
	MOV	@.$IMPUR,R2
	ADD	#I.NAME,R2
.IFF
	ADDR	BLOCK,R2
.ENDC
	CALL	GETFD
8$:	MOV	(SP)+,R1
	MOV	R0,R3
	TST	@R3
	BEQ	NOFILE
	MOV	2(R3),R2
	BNE	RTS7A
NOFILE:	KMEROR	<No file>
IFILE:	JSR	R1,6$
..ATFX	== .
	 .RAD50	"COM"
.IF NE	BF
RFILE:	JSR	R1,6$
..FRUX	== .
	 .RAD50	"REL"
.ENDC
.IF NE	SYT$K
SFILE:	JSR	R1,6$
..SRUX	== .
	.RAD50	"REL"
.ENDC
.DSABL	LSB
.SBTTL	CCBB0
.ENABL  LSB
CCBB0:	MOV	SYSIOB,R5
	CLR	R0
	CLR	@.BLKEY
	.READW	CHOVLY,R5,#400
	BCC	1$
FIPERR:	KMRTMG	<Input error>,,PFILE
1$:
.IF NE	MMG$T
	MOV	66(R5),(PC)+
$VLY:	 .WORD	0
	BEQ	2$
	MOV	64(R5),$VLY
2$:	MOV	@#SYSPTR,R3
	ADD	#BGVHI-$RMON,R3
	CLR	@R3
	CMP	#<^RVIR>,@R5
	BNE	3$
	MOV	2(R5),@R3
.IFF
	CMP	#<^RVIR>,@R5
	BEQ	NEEDXM
.IFTF
3$:	MOV	#JSW,R0
	MOV	@R0,-(SP)
	BIC	#^C<CHAIN$>,@SP
.IFT
	BIT	#VIRT$,JSW(R5)
	BNE	12$
	CLR	R2
.ENDC
	MOV	#LOWMAP-$RMON,R3
.LOWMAP	==	.-2
	CLR	R1
4$:	MOVB	(R3)+,@SP
	SEC
	ROLB	@SP
5$:	BCS	6$
	MOV	@R5,@R1
6$:	CMP	(R5)+,(R1)+
	ASLB	@SP
	BNE	5$
	CMP	#V.MAX,R1
	BNE	4$
1110$:	TST	@SP
	BNE	17$
	TST	RFLG
	BNE	7$
17$:	BIT	@R0,#CHAIN$
	BEQ	9$
7$:	BIC	#CHAIN$,@R0
.IF EQ	MMG$T
8$:	MOV	(R5)+,(R1)+
	TSTB	R1
	BNE	8$
.IFF
	MOV	#<1000-V.MAX>/2,R3
8$:	MOV	(R5)+,(R1)+
	SOB	R3,8$
.ENDC
9$:	BIS	(SP)+,(R0)+
	TST	(R0)+
	SUB	R1,R5
.IF NE	MMG$T
	ADD	R2,R5
	MOV	R2,(PC)+
VBIAS:	 .WORD	0
.ENDC
	ADD	R0,R5
	CMP	@R5,@R0
	BLOS	10$
	MOV	@R5,@R0
10$:	ADD	#400-USERTOP,R5
	ADDR	BLOCK+16.,R2
	MOV	#8.*400+8.,R1
11$:	MOV	-(R5),-(R2)
	DECB	R1
	BNE	11$
	MOV	.CCB,R3
	SWAB	R1
RTS7A:	RETURN
.IF EQ	MMG$T
NEEDXM:	KMRTMG	<Extended memory monitor required for>,,PFILE
.IFF
12$:	MOV	R5,R3
	MOV	#PARMS,R1
	ADD	R1,R3
13$:	MOV	(R3)+,(R1)+
	CMP	R1,#52
	BLO	13$
	MOV	#V.MAX,R2
	MOV	#1000,R1
1138$:	MOV	-(R1),V.MAX(R1)
	CMP	R1,R2
	BHI	1138$
	MOV	#V.MAX/2,R3
1999$:	MOV	(R5)+,(R1)+
	SOB	R3,1999$
	BR	1110$
.ENDC
.DSABL LSB
.IF NE	MMG$T
.SBTTL	/V CREATE REGION AND WINDOW ROUTINE
.ENABL LSB
$VRAW::	MOV	R5,-(SP)
	MOV	R4,-(SP)
	MOV	R3,-(SP)
	MOV	R1,-(SP)
	MOV	R2,-(SP)
	MOV	$VLY,R4
	BEQ	8$
	SUB	#V$END,R4
	CLRB	R4
	SWAB	R4
	ROR	R4
	MOV	R4,-(SP)
	ADDR	SYSIOB,R5
	MOV	@R5,R5
1$:	.READW	CHOVLY,R5,#1000,R4
	BCS	10$
	MOV	$VLY,R4
	SUB	#V$END,R4
	BIC	#177000,R4
	ADD	R5,R4
2$:	ADD	#2000,R5
	ADD	#<V$END-V$REG>,R4
	TST	2(R4)
	BEQ	7$
	ADDR	BLOCK,R2
	.CRRG	R2,R4
	BCS	9$
	MOV	-(R4),R1
	MOV	-(R4),R4
	MOV	@SP,R2
	SWAB	R2
	ASL	R2
	SUB	R2,R4
	SUB	R2,R1
	ADD	#W.NOFF,R1
	ADDR	SYSIOB,R2
	ADD	@R2,R1
	ADD	@R2,R4
	MOV	@#SYSPTR,R2
	MOV	BKGND+I.RGN+R.BLGH-$RMON(R2),-(SP)
	MOV	2(SP),R2
	CMP	R1,R5
	BHI	6$
3$:	ADD	@R1,@SP
	SPL	7
	MOV	@SP,@#UISAR0+<6*2>
	CLR	@#140000
	MOV	#1400,@#UISAR0+<6*2>
	SPL	0
4$:	SUB	@R1,@SP
	ADD	#W.NLGH,R1
	CMP	R1,R4
	BHIS	7$
5$:	CMP	R1,R5
	BLO	3$
6$:	SUB	R5,R1
	ADDR	SYSIOB,R3
	CMPB	(R2)+,(R2)+
	.READW	CHOVLY,@R3,#1000,R2
	BCS	10$
	SUB	#2000,R4
	ADD	@R3,R1
	BR	5$
7$:	CMP	(SP)+,(SP)+
8$:	MOV	(SP)+,R2
	MOV	(SP)+,R1
	MOV	(SP)+,R3
	MOV	(SP)+,R4
	MOV	(SP)+,R5
	RETURN
9$:	KMEROR	<Insufficient memory for region>,,UNCON$
10$:	CALLR	FIPERR
.DSABL	LSB
.ENDC
.SBTTL	GETHAN
.ENABL	LSB
..DDEV	== .+2
GETHAN:	MOV	#<^RDK >,R3
	CALL	FILE
GETHAR:	MOV	@R0,INPFN
	ADDR	DEVSTS,SP
	EMT	342
	BCS	BADHAN
	TST	(R0)+
	BPL	BADHAN
	CLR	-(SP)
	TST	2(R0)
	BNE	HANIN
	MOV	ACCUM,@SP
	ADDR	DEVSTS,R2
	MOV	@R3,@R2
	MOV	R3,-(SP)
	JSR	R5,1$
	 .WORD	0
1$:	CALL	2$
	MOV	(SP)+,R5
	MOV	(SP)+,R3
	SUB	ACCUM,@SP
.IF EQ	BF
	SUB	@SP,R3
.ENDC
	SUB	@SP,R5
HANIN:	MOV	(SP)+,R0
	SUB	R0,@SP
RTS7:	RETURN
2$:	OVLINK	OL1
BADHAN:	KMRTMG	<Invalid device>
BADFET:	KMRTMG	<Bad fetch>
.DSABL	LSB
.SBTTL	SETBIT
SETBIT:	MOV	R2,R4
SETBTS:	CMP	@#USERTOP,R4
	BHI	NOTHIR
	MOV	R4,@#USERTOP
NOTHIR:	BIS	#777,R4
	DEC	R4
	SUB	R2,R4
	CLRB	R4
	SWAB	R4
	ASR	R4
	SWAB	R2
SETBT2:	ASR	R2
	MOV	R2,R1
	BIC	#177407,R2
	BIC	#177770,R1
	ASR	R2
	ASR	R2
	ASR	R2
	ADD	R0,R2
ONEBIT:	CLR	R0
	SEC
SETMSK:	RORB	R0
	DEC	R1
	BPL	SETMSK
SETCCB:	BISB	R0,@R2
	DEC	R4
	BMI	RTS7
	RORB	R0
	BCC	SETCCB
	INC	R2
	BR	ONEBIT
.SBTTL	PUTBAK - RETURN DCL/@FILE BUFFER TO MONITOR AND SLIDE KMON/USR BACK UP
PUTBAK:	MOV	SP,@(PC)+
.EXTFL:: .WORD	EXTFLG-$RMON
	ADDR	KMON+KMSIZE+USRSIZ+2,R4
	CALL	PUTBLK
	ADD	R0,@SP
	CLR	@.INBFPT
	RETURN
.SBTTL	CNTCK - CHECK FOR LINE CONTINUATION (LINE ENDS WITH "-") AND ELIMINATE
CNTCK:	TST	DATAFG
	BNE	2$
	CMP	R5,R3
	BEQ	2$
1$:	INC	R1
	CMPB	(R3)+,#SPACE
	BEQ	1$
	CMPB	-(R3),#MINUS
	BEQ	3$
	DEC	R1
2$:	DEC	R3
	TST	(R2)+
3$:	CLRB	(R3)+
	CLRB	-2(R3)
	RTS	R2
.SBTTL	SVST - SAVE STATUS INDIRECT FILES FOR NESTING TO START EXECUTING
SVST:	MOV	@(PC)+,R2
.IFSVST:: .WORD	IFSVST-$RMON
	TST	(PC)+
IFOPN:	 .WORD	0
	BEQ	1$
	.SAVEST	CHOVLY,R2
	BCS	CMDDVE
	CLR	IFOPN
1$:	RETURN
CMDDVE:	KMEROR	<Invalid device for command file>
.SBTTL	KDOT - PRINT KMON'S PROMPTING DOT
	.ENABL	LSB
KDOT:	MOV	@(SP),SLHOOK
	TST	DOTFLG
	BNE	4$
	MOV	R0,-(SP)
	CALL	KCRLF
1$:	.RCTRLO
.IF NE	BATC$H
	MOV	.$ENTR,R0
	MOV	BA.NUM(R0),R0
	BEQ	2$
	TST	BATSW$(R0)
	BNE	3$
.ENDC
2$:	MOV	PC,R0
	CMP	(PC)+,(R0)+
	.ASCII	<PERIOD><200>
	.PRINT
SLHOOK:	MOV	R5,R5
3$:	MOV	(SP)+,R0
4$:	RETURN
	.DSABL	LSB
.SBTTL	GETBLK - OBTAIN A BLOCK OF MEMORY ABOVE KMON/USR
.ENABL	LSB
GETBL1:	ADD	#3,R0
	BIC	#1,R0
	CALL	4$
	SUB	R0,@SP
	BIS	#IFDAT,@.STATWD
	RETURN
GETBLK:	TST	(R0)+
	MOV	(PC)+,R4
.CORPT:: .WORD	CORPTR-$RMON
	TST	(R4)+
1$:	MOV	R4,R3
	MOV	@R3,R4
	CMP	.CORPT,R4
	BEQ	4$
	CMP	(R4)+,R0
	BLO	1$
	TST	(R0)+
	CMP	-(R4),R0
	BEQ	2$
	TST	-(R0)
2$:	SUB	R0,@R4
	BNE	3$
	MOV	2(R4),@R3
3$:	ADD	@R4,R4
	CLC
	BR	6$
4$:	CMP	R0,#MINMOV
	BHIS	5$
	MOV	#MINMOV,R0
5$:	SUB	R0,@SP
	NEG	R0
	ROR	R0
	CALL	KUMOVE
	NEG	R0
6$:	MOV	R0,(R4)+
	RETURN
.DSABL	LSB
CHANIF:	MOV	#CHAINA,R2
	MOV	@R2,R0
	CLRB	ATFLAG
	CALL	DCLSP1
	SUB	R0,@SP
CHANF1:	MOV	(R2)+,R0
1$:	MOVB	(R2)+,(R1)+
	DEC	R0
	BNE	1$
	BITB	#<LN$IND>,@.INDSTA
	BEQ	2$
 .Assume UCFKMN EQ 200
	TSTB	@.CLIFLG
	BMI	2$
	MOVB	#<177>,@R1
2$:	BIC	#<IFSPCD>,@.STATWD
	RETURN
.IFMXNST::.WORD	IFMXNST-$RMON
.IF NE	BF
.IF EQ	MMG$T
.IF NE	MTT$Y
.$MTPS:: .WORD	$MTPS-$RMON
.ENDC
.ENDC
.ENDC
.SBTTL	DCLSPC - GET SPACE FOR DCL EXPANSION OR @FILE LINE
.ENABL	LSB
DCLSPC:	INCB	CMDFLG
DCLSP1:	MOV	R4,-(SP)
	MOV	R3,-(SP)
	MOV	R2,-(SP)
	CLR	R0RTN
	MOV	SP,@.EXTFL
	MOV	.INDSTA,R4
	BITB	#LN$IND,@R4
	BEQ	1$
 .Assume UCFKMN EQ 200
	TSTB	@.CLIFLG
	BMI	1$
	INC	R0
1$:	BIT	#IFDAT,@.STATWD
	BNE	3$
	MOV	R0,-(SP)
	INC	R0
	CALL	GETBL1
	MOV	R0,(PC)+
R0RTN:	 .WORD	0
	MOV	-(R4),R1
	ADD	R4,R1
	MOVB	#-1,-(R1)
	MOV	R1,(PC)+
ENBFPT:	 .WORD	0
	MOV	R1,(PC)+
OLINBF:	 .WORD	0
	SUB	(SP)+,R1
	MOV	R1,@.INBFPT
2$:	CLR	EXPSPC
	CLR	@.EXTFL
	MOV	R0RTN,R0
	MOV	(SP)+,R2
	MOV	(SP)+,R3
	MOV	(SP)+,R4
	SUB	R0,@SP
	RETURN
3$:	MOV	@.INBFPT,R1
	ADDR	KMON+KMSIZE+USRSIZ+2,R4
	SUB	R4,R1
	SUB	R0,R1
	BLO	5$
	MOV	@.INBFPT,R4
	MOV	R4,R1
	SUB	R0,R1
	MOV	R1,@.INBFPT
	MOV	ENBFPT,R2
	TST	(PC)+
EXPSPC:	.WORD	0
	BNE	4$
	TSTB	ATFLAG
	BEQ	6$
	MOV	OLINBF,R2
	TSTB	CMDFLG
	BNE	6$
4$:	MOV	R4,OLINBF
	BR	2$
5$:	MOV	R0,-(SP)
	MOV	R1,R0
	NEG	R0
	MOV	-(R4),-(SP)
	MOV	SP,(PC)+
COROVR:	 .WORD	0
	BIC	#IFDAT,@.STATWD
	CALL	GETBL1
	CLR	COROVR
	ADD	(SP)+,-(R4)
	MOV	R0,R0RTN
	MOV	(SP)+,R0
	BR	3$
6$:	TST	R2
	BEQ	2$
	CMPB	@R4,#-1
	BEQ	2$
	CMPB	@R4,#177
	BEQ	2$
7$:	MOVB	(R4)+,(R1)+
	CMP	R4,R2
	BLO	7$
	CMPB	-(R4),#-1
	BNE	2$
	DEC	R1
	BR	2$
.DSABL	LSB
.SBTTL	PUTBLK - RETURN A BLOCK OF MEMORY TO THE FREE LIST
PUTBLK:	TST	-(R4)
PUTBL1:	MOV	.CORPT,R1
1$:	MOV	R1,R0
	MOV	2(R0),R1
	CMP	.CORPT,R1
	BEQ	2$
	CMP	R1,R4
	BLOS	1$
	MOV	R4,-(SP)
	ADD	@R4,@SP
	CMP	(SP)+,R1
	BNE	2$
	ADD	(R1)+,@R4
	MOV	@R1,R1
2$:	MOV	R1,2(R4)
3$:	MOV	R0,-(SP)
	ADD	@R0,@SP
	CMP	(SP)+,R4
	BNE	4$
	ADD	(R4)+,@R0
	MOV	@R4,R4
4$:	MOV	R4,2(R0)
	MOV	.CORPT,R0
	TST	(R0)+
	MOV	@R0,R1
	CMP	@R1,#MINMOV
	BLO	5$
	ADDR	KMON+KMSIZE+USRSIZ,R4
	CMP	R4,R1
	BEQ	6$
	BIT	#IFDAT,@.STATWD
	BEQ	5$
	ADD	@R4,R4
	CMP	R4,R1
	BEQ	7$
5$:	CLR	R0
	RETURN
6$:	BIC	#IFDAT,@.STATWD
7$:	MOV	2(R1),@R0
	MOV	@R1,R0
	ROR	R0
	CALL	KUMOVE
	ADD	R0,@SP
	SEC
	RETURN
.IIF EQ LNK$IF,	.NLIST
.IF NE	LNK$IF
.SBTTL	LINK OVERLAY INDIRECT FILE SUPPORT
LINKAT:	MOV	R0,-(SP)
	OVLINK	LAT1
LNKAT1:	CALL	ATSCAN
	MOV	R0,-(SP)
	OVLINK	LAT2
.ENDC
.IIF EQ LNK$IF,	.LIST
.IF EQ	BF
.ENABL	LSB
.SBTTL	RSTSRH - HARD RESET FOR SJ KMON
RSTSRH:
.IF EQ	MTT$Y
	TST	@(PC)+
..TTOB:: .WORD	TTOBUF+2-$RMON
	BNE	RSTSRH
	CALL	@(PC)+
..ZAP::	 .WORD	ZAP-$RMON
.IFF
	CALL	@(PC)+
..MTRE:: .WORD	MTREST-$RMON
	BR	1$
.ENDC
.SBTTL	RSTSRS - SOFT RESET FOR SJ KMON
RSTSRS:
.IF NE	MTT$Y
	CALL	@(PC)+
..MTR1:: .WORD	MTRES1-$RMON
1$:
.ENDC
	MOV	#<CHNUM-1>*CHNWDS,R1
	BIT	#OVLY$,@#JSW
	BNE	2$
	ADD	#CHNWDS,R1
2$:	MOV	(PC)+,R2
..$CSW:: .WORD	$CSW-$RMON
	MOV	R2,@.I.CSW
	MOV	#CHNUM,@.I.CNU
3$:	CLR	(R2)+
	DEC	R1
	BNE	3$
CLRHD1:	MOV	.$ENTR,R2
	MOV	#$SLOT,R1
4$:	CMP	@R2,@.SYSLO
	BLO	5$
	CLR	@(R2)+
	BR	6$
5$:	CLR	(R2)+
6$:	DEC	R1
	BNE	4$
QREST1:	MOV	(PC)+,R1
..QSIZ:: .WORD	QSIZE-$RMON
	CMP	(R1)+,@R1
	BLO	QREST1
	MOV	#1,-(R1)
	MOV	(R1)+,(R1)+
	MOV	R1,@R1
	ADD	#2,@R1
.IF EQ	MTT$Y
	MOV	@(PC)+,-(SP)
..TTKS:: .WORD	TTKS-$RMON
	BIS	#IENABL,@(SP)+
.ENDC
	RETURN
.DSABL	LSB
.ENDC
.IF NE	MMG$T
RWSYS:	JSR	R0,@PC
	ADD	#XREAD-.,R0
	MOV	#10*400+20,(R0)+
	MOV	(SP)+,(R0)+
	MOV	(R5)+,(R0)+
	MOV	@R5,@R0
	BPL	1$
	INCB	-5(R0)
	NEG	@R0
1$:	CMP	-(R5),-(R0)
	CMP	-(R0),-(R0)
	MOV	#BKGND+I.CNUM-$RMON,-(SP)
..I.CNUM==	.-2
	MOV	#21,@(SP)
	EMT	375
	MOV	#20,@(SP)+
	RETURN
XREAD:	.BLKW	4
	.WORD	0
.ENDC
.SBTTL	CHARCK, CHARC1 - ADD CHARACTERS TO KMON LINE BUFFER, CHECKING THEM
	.ENABL	LSB
CHARC1:	BIC	#<200>,R0
	CMPB	R0,#<CTRLC>
	BEQ	10$
	MOVB	@R3,-(SP)
	MOVB	R0,1(SP)
	CMPB	#<'C+40>,R0
	BNE	5$
	BIC	#<40*400>,@SP
5$:	CMP	#<"^C>,(SP)+
	BNE	CHARCK
10$:	MOV	R5,R3
	MOV	#<CTRLC*400+UPAROW>,-(R3)
	MOV	#<'C*400+XPOINT>,-(R3)
	RTS	R2
CHARCK:	MOVB	@R3,(PC)+
CMNTF:	 .WORD	0
	CMPB	@R3,#XPOINT
	BEQ	30$
	TST	DATAFG
	BNE	25$
	CMP	R5,R3
	BNE	15$
	CMPB	#DOLLAR,R0
	BNE	15$
	BIS	#<IFDOL>,@.STATWD
	RTS	R2
15$:	CMPB	#TAB,R0
	BNE	20$
	MOVB	@R5,R0
20$:	CMPB	@R5,R0
	BNE	25$
	CMPB	@R3,R0
	BEQ	40$
25$:	CMPB	#CR,R0
	BEQ	40$
	CMPB	#FF,R0
	BEQ	40$
	DEC	R1
	BMI	30$
	MOVB	R0,-(R3)
30$:	CMPB	#LF,R0
	BNE	40$
35$:	CLRB	(R3)+
	TST	R1
	BMI	LTL
	TST	(R2)+
40$:	RTS	R2
	.DSABL	LSB
	.SBTTL DCL command and option macros
	$QUAL=0
	$OPTX=0
.MACRO	DISPAT	ROUTINE
	.WORD	ROUTINE-.
	 $'ROUTINE=.-1$/2
.ENDM
.MACRO	SYNTAX	CMD
.DSABL	CRF
	$CONDS=1
	$QUAL=$QUAL+1
$SYN=.
.ENDM
.MACRO	FLDBEG	DST
	.BYTE	$FLDBEG
	 $FLDFLG=0
.IF B	DST
	 $FLDFLG=1
	 $FLDEND=.
	.BYTE
.IFF
	.BYTE	DST-.
.ENDC
.ENDM
.MACRO	SCALL	SUBR,PTRLIST
	.BYTE	$SCALL
.ENABL	CRF
	 $TEMP=	SUBR-SUBREL
.DSABL	CRF
	 $TEMP1=$TEMP/256.
	.BYTE	$TEMP1
	.BYTE	$TEMP&377
	 $TEMP2=.
	.BYTE
.IRP	Q,<\$QUAL>
.IRP	X,<PTRLIST>
	.BYTE	$'X'$'Q-.-1
.ENDR
.ENDR
	 $TEMP1=.
	 .=$TEMP2
	.BYTE	$TEMP1-$TEMP2-1
	 .=$TEMP1
.ENDM
.MACRO	GOTO	DST
	.BYTE	$GOTO
	.BYTE	DST-.-1
.ENDM
.MACRO	EOLGOT	DST
	.BYTE	$EOLGOT
	.BYTE	DST-.-1
.ENDM
.MACRO	ITEREND
	.BYTE	$ITEREND
.IF NE	$FLDFLG
	 $TEMP1=.
	 .=$FLDEND
	.BYTE	$TEMP1-$FLDEND
	 .=$TEMP1
.ENDC
.ENDM
.MACRO	OPTEND
	.BYTE	$OPTEND
.IF NE	$FLDFLG
	 $TEMP1=.
	 .=$FLDEND
	.BYTE	$TEMP1-$FLDEND
	 .=$TEMP1
.ENDC
.ENDM
.MACRO	EOLSEQ	DEFPRG,FLAG
	.BYTE	$EOLSEQ
.IF NB	FLAG
	.BYTE	$$$'FLAG
.IFF
	.BYTE	200!$$'DEFPRG
.ENDC
.ENDM
.MACRO	APLYDEF	PROG,COND,SWIT
	.BYTE	$APLYDEF
	.BYTE	$$'PROG
.IF B	COND
	.BYTE	0
.IFF
.IRP	N,<\$QUAL>
	.BYTE	$'COND''N
.ENDR
.ENDC
	.BYTE	''SWIT
.ENDM
.MACRO	WILDEF	PROG,SWIT,CND1,CND2,CND3,CND4,FLAG
	.BYTE	$APLYDEF
	.BYTE	$$'PROG
.IRP	N,<\$QUAL>
	.BYTE	$'CND1''N!$'CND2''N!$'CND3''N!$'CND4''N!FLAG
.ENDR
	.BYTE	''SWIT
.ENDM
.MACRO	SETDEF	COND
	.BYTE	$SETDEF
.IRP	N,<\$QUAL>
	.BYTE	$'COND''N
.ENDR
.ENDM
.MACRO	CNDROUT	ROUT,COND
	.BYTE	$CNDROUT
.IRP	N,<\$QUAL>
	.BYTE	$'COND''N
.ENDR
	ROUTAC	ROUT
.ENDM
.MACRO	ROUTINE	ROUT
	.BYTE	$ROUTINE
	ROUTAC	ROUT
.ENDM
.MACRO	ROUTAC TRANS
	.IIF	GT N-3,.ERROR
.ENABL	CRF
	.IF DF ACT'TRANS
	$TEMP= ACT'TRANS - RACREL
	.IFF
	$TEMP = OVA'TRANS - OVLYST + OVLY - RACREL
	.ENDC
.DSABL	CRF
	$TEMP1 = $TEMP/256.
	.BYTE	$TEMP1
	.BYTE	$TEMP&377
.ENDM
.MACRO	PROMPT	TEXT
	.BYTE	$PROMPT
.ENABL	CRF
	 $TEMP=	TEXT-TXTREL
.DSABL	CRF
	 $TEMP1=$TEMP/256.
	.BYTE	$TEMP1
	.BYTE	$TEMP&377
.ENDM
.MACRO	DEFILE	FLAG
	.BYTE	$DEFILE
.ENABL	CRF
	.BYTE	FLAG
.DSABL	CRF
.ENDM
.MACRO	SETSWIT	SWIT
	.BYTE	$SETSWIT
	.BYTE	''SWIT
.ENDM
.MACRO	DEFDV	STR
	.BYTE	$DEFDV
.ENABL	CRF
	 $TEMP=	STR-EXTREL
.DSABL	CRF
	 $TEMP1=$TEMP/256.
	.BYTE	$TEMP1
	.BYTE	$TEMP&377
.ENDM
.MACRO	DEFINX	STR
	.BYTE	$DEFINX
.ENABL	CRF
	 $TEMP=	STR-EXTREL
.DSABL	CRF
	 $TEMP1=$TEMP/256.
	.BYTE	$TEMP1
	.BYTE	$TEMP&377
.ENDM
.MACRO	SETISPC	STR
	.BYTE	$SETISPC
.ENABL	CRF
	 $TEMP=	STR-DOUSTR
.DSABL	CRF
	 $TEMP1=$TEMP/256.
	.BYTE	$TEMP1
	.BYTE	$TEMP&377
.ENDM
.MACRO	DEFOSPC	STR
	.BYTE	$DEFOSPC
.ENABL	CRF
	 $TEMP=	STR-DOUSTR
.DSABL	CRF
	 $TEMP1=$TEMP/256.
	.BYTE	$TEMP1
	.BYTE	$TEMP&377
.ENDM
.MACRO	CEOLSEQ	DEFPRG,FLAG
	.BYTE	$CEOLSEQ
.IF NB	FLAG
	.BYTE	$$$'FLAG
.IFF
	.BYTE	200!$$'DEFPRG
.ENDC
.ENDM
.MACRO	FILTYPR	LIST
	.BYTE	$FILTYPR
.ENABL	CRF
	 $TEMP=	LIST-2-LSTREL
.DSABL	CRF
	 $TEMP1=$TEMP/256.
	.BYTE	$TEMP1
	.BYTE	$TEMP&377
.ENDM
.MACRO	MAKOFL	TYPE
	.BYTE	$MAKOFL
	.BYTE	<-2-TYPE>*OFBSIZ
.ENDM
.MACRO	DEFINE	SIMPLE
.MACRO	SIMPLE
	.BYTE	$'SIMPLE
.ENDM
.ENDM
	DEFINE	OPTBLNK
	DEFINE	SWITLST
	DEFINE	REQBLNK
	DEFINE	REQPLUS
	DEFINE	REQCOMMA
	DEFINE	SRET
	DEFINE	INSPEC
	DEFINE	OUTSPEC
	DEFINE	SPISPEC
	DEFINE	SPOSPEC
	DEFINE	END
	DEFINE	TSTCFLG
	DEFINE	COMPDEF
	DEFINE	FILQUAL
	DEFINE	SAVNAM
	DEFINE	CMDQUAL
.MACRO	SWITS	DUMMY
	$TEMP=0
	$SWTAD=.
	$NONO=0
	$$$1=0
	$$$2=0
	$$$3=0
	$$$4=0
.ENDM
.MACRO	ENDNO
	$NONUM=$TEMP
.ENDM
.MACRO	NOS
	$NOFFST=$TEMP*3
	$NONO=1
.ENDM
.MACRO	ENDS
	.IRP	Q,<\$QUAL>
	.IRPC	N,<1234>
	.IIF EQ	$$$'N,	.MEXIT
$'N'$'Q:	.BLKB	$$$'N
	.BYTE	0
	.ENDR
	.ENDR
	.EVEN
.ENABL	CRF
.ENDM
.MACRO	SWIT	SWITCH,LNUM,IMPLY,FORCE,TRANS,DEFLT,QVAL,X
	$TEMP=$TEMP+1
	$TEMP1=0
	.IF DIF	IMPLY,-
	$TEMP1=$TEMP1!$$'IMPLY
	.ENDC
	.IF DIF	FORCE,-
	$TEMP1=$TEMP1!200!$$'FORCE
	.ENDC
	.IF NB	QVAL
	$TEMP1=$TEMP1+SVALU
	.IF IDN	QVAL,DVAL
	$TEMP1=$TEMP1+DECVAL
	.ENDC
	.ENDC
	.BYTE	$TEMP1
	.IF EQ	$NONO
	LETTR
	.BYTE	'OLET'$'SWITCH
	X'.ENDM
	.IFF
	.BYTE	0
	.ENDC
	.IF EQ	$NONO
	$TEMP1=.
	.IRP	Q,<\$QUAL>
	.=$'LNUM'$'Q+$$$'LNUM
	.ENDR
	.BYTE	$TEMP
	$$$'LNUM=$$$'LNUM+1
	.=$TEMP1
	.ENDC
	.IF DIF	TRANS,-
	.NCHR	N,<TRANS>
	.IF EQ	N-1
	.BYTE	''TRANS
	.IFF
	ACTION	TRANS
	.ENDC
	.IFF
	.NCHR	$TEMP1,<DEFLT>
	.IF NE	$TEMP1
	.IIF GT	$TEMP1-3,.ERROR
	.IRP	N,<\$QUAL>
	.IF NDF $'DEFLT''N
	$'DEFLT''N=$CONDS
	.IIF EQ 100-$CONDS,.ERROR
	$CONDS=$CONDS+$CONDS
	.ENDC
	.BYTE	200+$'DEFLT''N
	.ENDR
	.IFF
	.BYTE	0
	.ENDC
	.ENDC
.ENDM
.MACRO	ACTION	TRANS
	.IIF GT	N-3,.ERROR
	.IF NDF	$A$'TRANS
	.IIF NDF $A$,	$A$=0
	$A$=$A$+1
	.IIF LT	ACTCNT-$A$,.ERROR
	$A$'TRANS=$A$
	.ENDC
	$TEMP1=.
	.PSECT	RT11
	.=ACTONS+<2*<$A$'TRANS-1>>
.ENABL	CRF
	.IF DF	ACT'TRANS
	.WORD	ACT'TRANS-ACTREL
	.IFF
	.WORD	OVA'TRANS-OVLYST+OVLY-ACTREL
	.ENDC
.DSABL	CRF
	.IF GE	OVLYN
	.IRP	N,<\OVLYN>
	.CSECT	OVLY'N
	.ENDR
	.ENDC
	.=$TEMP1
	.IIF LT	37-$A$'TRANS,.ERROR
	.BYTE	$A$'TRANS
.ENDM
.MACRO	SWTDEF	OPTION,DARG
$SCNT = $SCNT + 1
LETTR
.IF DF 'OLET'$'OPTION
.IIF NE 'OLET'$'OPTION - $SCNT, .ERROR
.ENDC
'OLET'$'OPTION = $SCNT
DARG'.ENDM
.ENDM	SWTDEF
.MACRO	NEXTL
$OPTX = $OPTX + 1
TEMP = 0
.IRPC	L,<ABCDEFGHIJKLMNOPQRSTUVWXYZ>
TEMP = TEMP + 1
.IF EQ	TEMP - $OPTX
	.MACRO	LETTR	Z
		Z'.IRPC OLET,<L>
	.ENDM	LETTR
.MEXIT
.ENDC
.ENDR
.ENDM	NEXTL
	NEXTL
.MACRO	PTXT	TEXT
	.ASCII	\TEXT\ \? \ <200>
.ENDM
.MACRO	ITBLE	NUM,?LAB
	JSR	R1,LAB
	.WORD	$NOFFS
	.WORD	$SWTAD-SWTBAS
	.WORD	$SYN-STRBAS
	.IF EQ	$$$1
	.WORD	0
	.IFF
	.IRP	N,<\$OPTX>
	.WORD	OPTX'N-OPTBAS
	.ENDR
	.ENDC
	.BYTE	$NONUM
	.BYTE	NUM
LAB:
.ENDM
.MACRO	BACKWT	NAME,TEXT
	.BYTE	0
	.NCHR	N,<TEXT>
	.=.+N
NAME:
	.IRPC	N,<TEXT>
	.=.-1
	.BYTE	''N
	.=.-1
	.ENDR
	.=NAME
.ENDM
.MACRO	TYPDEF	A,BB,C,D,E,F,G,H,I,J,K,L
	.IF B	A
	.WORD	0
	.MEXIT
	.ENDC
	.RAD50	\A\
	.BYTE	$$'BB!200
	.BYTE	0
	TYPDEF	C,D,E,F,G,H,I,J,K,L
.ENDM
.SBTTL	DCL INTERPRETER
INITIT:	MOV	(SP)+,@SP
	MOV	(R1)+,(PC)+
NOFFST:	 .WORD	0
	MOV	(R1)+,R0
	ADD	PC,R0
SWTBAS	= .
	MOV	R0,(PC)+
ADSWTB:	 .WORD	0
	MOV	(R1)+,R4
	ADD	PC,R4
STRBAS	= .
	MOV	(R1)+,(PC)+
OPTPTR:	 .WORD	0
	MOVB	(R1)+,NONUMS
	MOVB	(R1)+,NOSPEC
	ADDR	ISTACK,R1
	MOV	R1,STKPTR
	ADD	#INTCLR-ISTACK,R1
	MOV	#ENDCLR-INTCLR,R2
1$:	CLRB	(R1)+
	DEC	R2
	BNE	1$
	ADD	#OTBLK-ENDCLR,R1
	MOV	#3,R2
2$:	CLR	(R1)+
	CLR	(R1)+
	MOVB	#-1,@R1
	CMP	(R1)+,(R1)+
	DEC	R2
	BNE	2$
	CLRB	FOTFLG
	MOVB	#$WILD0,DEFMSK
INTERP:	MOVB	(R4)+,R1
	DEC	R1
	ASL	R1
	JSR	R1,2$
1$:	DISPAT	OPTBLNK
	DISPAT	SWITLST
	DISPAT	REQBLNK
	DISPAT	REQPLUS
	DISPAT	REQCOMMA
	DISPAT	EOLSEQ
	DISPAT	FLDBEG
	DISPAT	ITEREND
	DISPAT	OPTEND
	DISPAT	SCALL
	DISPAT	SRET
	DISPAT	INSPEC
	DISPAT	OUTSPEC
	DISPAT	SPISPEC
	DISPAT	SPOSPEC
	DISPAT	GOTO
	DISPAT	PROMPT
	DISPAT	APLYDEF
	DISPAT	SETDEF
	DISPAT	END
	DISPAT	DEFILE
	DISPAT	SETSWIT
	DISPAT	DEFINX
	DISPAT	DEFOSPC
	DISPAT	TSTCFLG
	DISPAT	CEOLSEQ
	DISPAT	MAKOFL
	DISPAT	COMPDEF
	DISPAT	FILQUAL
	DISPAT	SAVNAM
	DISPAT	CMDQUAL
	DISPAT	FILTYPR
	DISPAT	CNDROUT
	DISPAT	ROUTINE
	DISPAT	DEFDV
	DISPAT	SETISPC
	DISPAT	EOLGOT
2$:	ADD	(SP)+,R1
	ADD	@R1,R1
3$:	MOV	R5,TXTPTR
	CALL	@R1
	BR	INTERP
LTL:	KMEROR	<Line too long>
.SBTTL	DCL STACKING ROUTINES
SCALL:	MOV	STKPTR,R2
	CLR	(R2)+
	CLR	(R2)+
	MOVB	(R4)+,R1
	SWAB	R1
	BISB	(R4)+,R1
	MOV	R4,(R2)+
	MOV	R1,R4
	ADD	PC,R4
SUBREL	= .
	BR	SAVSTK
SRET:	MOV	STKPTR,R2
	MOV	-(R2),R4
	CMP	-(R2),-(R2)
	MOV	R2,STKPTR
GOTO:	MOVB	(R4)+,R1
	ADD	R1,R4
	RETURN
FLDBEG:	MOV	STKPTR,R2
	MOV	#1,(R2)+
	INC	R4
	MOV	R4,(R2)+
	MOV	R5,(R2)+
SAVSTK:	MOV	R2,STKPTR
	RETURN
ITEREND:MOV	STKPTR,R2
	MOV	R5,-(R2)
	MOV	-(R2),R4
	RETURN
OPTEND:	SUB	#6,STKPTR
	RETURN
.ENABL	LSB
EOLGOT:	TSTB	@R5
	BEQ	GOTO
	TSTB	(R4)+
	RETURN
CEOLSEQ:CMPB	#',,@R5
	BEQ	1$
EOLSEQ:	TSTB	@R5
	BNE	SCFAIL
1$:	MOVB	(R4)+,R0
	BMI	2$
	ADD	@#SYSPTR,R0
	MOVB	PROGDF-$RMON(R0),R0
2$:	BIC	#340,R0
	TST	FORCEP
	BMI	4$
	BEQ	3$
	CMPB	R0,FORCEP
	BNE	ILLOPT
3$:	MOV	R0,FORCEP
4$:	RETURN
ILLOPT:	KMEROR	<Invalid option for program>
APLYDEF:CMPB	FORCEP,(R4)+
	BNE	SYNPB2
	BITB	(R4)+,DEFMSK
	BNE	SYNPB1
SETSWIT:MOVB	(R4)+,R2
SETSW1:	CLR	R1
	CLR	R3
	CALLR	ESWIT
BRLTL:	BR	LTL
FILTYPR:MOVB	(R4)+,R3
	SWAB	R3
	BISB	(R4)+,R3
	ADD	PC,R3
LSTREL	= .
	TST	FORCEP
	BMI	4$
	ADDR	TMPAREA,R5,PUSH
	MOV	R5,R0
	ADDR	SAVNM,R1
	MOV	#SAVNEN-SAVNM,R2
5$:	MOVB	(R1)+,-(R0)
	BNE	6$
	INC	R0
6$:	DEC	R2
	BNE	5$
	CLRB	-(R0)
	ADDR	BLOCK,R2
	CALL	GETFD
	MOV	(SP)+,R5
	MOV	-2(R2),R1
	BNE	9$
	MOV	R0,R1
	MOV	R3,-(SP)
	CALL	COPYFN
	MOV	(SP)+,R3
	.DSTATU	R2,R0
	BCS	4$
	TST	4(R2)
	BNE	7$
	KMRTMG	<Handler must be loaded>,,DEV
7$:	TST	(R3)+
	MOV	(R3)+,6(R1)
	BEQ	8$
	MOV	#<3*400+CHOVLY>,R0
	EMT	374
	.LOOKUP	CHOVLY,R1
	BCS	7$
	BR	10$
8$:	CALLR	NOTFND
9$:	TST	(R3)+
	MOV	(R3)+,R0
	BEQ	4$
	CMP	R0,R1
	BNE	9$
10$:	MOVB	@R3,R0
	BR	2$
CNDROUT:BITB	(R4)+,DEFMSK
	BNE	ROUTINE
SYNPB2:	TSTB	(R4)+
SYNPB1:	TSTB	(R4)+
	RETURN
ROUTINE:MOVB	(R4)+,R2
	SWAB	R2
	BISB	(R4)+,R2
11$:	ADD	R2,PC
RACREL =  .
.DSABL	LSB
TSTCFLG:TSTB	COMPFL
	BEQ	SCFAIL
	MOV	(PC)+,R5
CSTPTR:	 .WORD	0
	RETURN
SCFAIL:	MOV	STKPTR,R2
1$:	MOV	-(R2),R5
	MOV	-(R2),R4
	TST	-(R2)
	BEQ	1$
	BMI	3$
	MOV	R2,STKPTR
	MOVB	-(R4),R2
	ADD	R2,R4
2$:	RETURN
3$:	TSTB	@TXTPTR
	BEQ	4$
	CALLR	BADCOM
4$:	MOV	(PC)+,R0
PRMPTR:	 .WORD	0
	ADD	PC,R0
TXTREL	= .
	.BR	BCPRMPT
.SBTTL	PROMPTING SUPPORT FOR DCL
BCPRMPT:ADDR	KMCBUF,R5
	MOV	R5,R3
	MOV	#KMCBFLN,R1
1$:	DEC	R1
	TSTB	-(R3)
	BNE	1$
	MOVB	#SPACE,@R3
	CMPB	(R3)+,@R3
	BEQ	2$
	DEC	R1
	BMI	BRLTL
	DEC	R3
2$:	MOV	R0,-(SP)
	.RCTRLO
	MOV	(SP)+,R0
	.PRINT
	MOV	R5,R5
	MOV	SP,DOTFLG
	ADDR	KMSTAK,R2
	MOV	R2,SP
	CALLR	STRTP
OPTCOL:	MOVB	#COLON,-(SP)
	BR	OPTCHR
OPTBLNK:MOVB	#SPACE,-(SP)
OPTCHR:	CMPB	(SP)+,@R5
	BNE	1$
	DEC	R5
1$:	RETURN
REQPLUS:CMPB	#'+,@R5
	BR	REQBL1
REQCOMMA:CMPB	#',,@R5
	BR	REQBL1
REQBLNK:CMPB	#SPACE,@R5
REQBL1:	BNE	SCFAIL
	RETURN
DEFILE:	MOVB	(R4)+,DEFILB
	MOV	@#SYSPTR,R1
	TSTB	WILDEF-$RMON(R1)
	BNE	1$
	BICB	#ESTARF+FSTARF,DEFILB
1$:	RETURN
COMPDEF:COMB	DEFMSK
	RETURN
FILQUAL:INCB	QUALFL
	RETURN
CMDQUAL:CLRB	QUALFL
	RETURN
PROMPT:	MOVB	(R4)+,PRMPTR+1
	MOVB	(R4)+,PRMPTR
	RETURN
END:	TST	(SP)+
	RETURN
.SBTTL	DCL SWITCH SCANNER
SWITNO	= 1
DTRANS	= 2
DECVAL	= 40
SVALU	= 100
.ENABL	LSB
SWITLST:CMPB	#'/,@R5
	BNE	SCFAIL
	INCB	SCNTFL
	CLR	-(SP)
	MOV	R5,R1
	CLR	-(SP)
	BISB	-(R1),@SP
	SWAB	@SP
	BISB	-(R1),@SP
	BIC	#20040,@SP
	CMP	#"ON,(SP)+
	BNE	1$
	INC	@SP
	MOV	R1,R5
1$:	CALL	ALPHT
	BCC	ILSWIT
	MOV	R5,(PC)+
TXTPSV:	 .WORD	0
	MOV	STKPTR,R1
2$:	MOV	-(R1),R2
	TST	-(R1)
	TST	-(R1)
	BNE	2$
	MOVB	(R2)+,SUBCNT
	BEQ	2$
	BR	4$
3$:	DECB	SUBCNT
	BLE	ILSWIT
	MOV	(PC)+,R2
SUBPTR:	 .WORD	0
4$:	CLR	R1
	BISB	(R2)+,R1
	ADD	R2,R1
	MOV	R2,SUBPTR
5$:	MOVB	(R1)+,R3
	BEQ	3$
	DEC	R3
	MOV	R3,-(SP)
	ASL	R3
	ADD	(SP)+,R3
	ADD	ADSWTB,R3
	MOV	OPTPTR,R2
	ADD	PC,R2
OPTBAS	= .
	CLR	R0
6$:	TSTB	(R2)+
	BPL	6$
	INC	R0
	CMPB	R0,SWITNO(R3)
	BNE	6$
	MOV	TXTPSV,R5
7$:	CALL	CHMTCH
	BNE	5$
	CALL	ALPHNT
	BCC	8$
	TSTB	(R2)+
	BPL	7$
ILSWIT: KMEROR	<Invalid option>
AMBSWT:	KMEROR	<Ambiguous option>
ILLNOS:	KMEROR	<Invalid NO on option>
8$:	BITB	#100,@R2
	BNE	AMBSWT
	MOVB	-(R1),R1
	TST	(SP)+
	BEQ	9$
	CMPB	R1,NONUMS
	BHI	ILLNOS
	ADD	NOFFST,R3
9$:	MOVB	@R3,R0
	BIC	#340,R0
	BEQ	11$
	TST	FORCEP
	BEQ	10$
	CMPB	R0,FORCEP
	BNE	CNFSWT
10$:	BIS	R0,FORCEP
.IF NE	1
11$:
.IFF
11$:	MOVB	MECLPT,R0
	ADDR	MECLST,R2
12$:	DEC	R0
	BLT	SWPRT2
	CMPB	R1,(R2)+
	BNE	12$
.ENDC
.DSABL	LSB
.ENABL	LSB
SWPRT2:
.IF EQ	1
	CLR	R0
	BISB	MUTEX(R3),R0
	ADDR	MEXLST,R0,ADD
1$:	MOVB	MECLPT,R1
	ADDR	MECLST,R2
2$:	DEC	R1
	BLT	3$
	CMPB	@R0,(R2)+
	BNE	2$
	DECB	MECLPT
3$:	MOVB	(R0)+,@R2
	BEQ	4$
	INCB	MECLPT
	BR	1$
.ENDC
4$:	MOVB	FILNUM,R1
	MOVB	DTRANS(R3),R2
	BEQ	6$
	BMI	5$
	CMPB	#40,R2
	BLE	ESWIT
GOROUT:	ASL	R2
	ADDR	ACTONS-2,R2,ADD
	ADD	@R2,PC
ACTREL	= .
ILSWT1:	BR	ILSWIT
SETDEF:	MOVB	(R4)+,R2
5$:	BISB	R2,DEFMSK
6$:	RETURN
.DSABL	LSB
ESWIT:	MOVB	NSWITS,R0
	CMPB	#MAXSWT,R0
	BLT	TCERR
	INCB	NSWITS
	ASL	R0
	ADDR	TRANSW,R0,ADD
	MOVB	DSWOFF,(R0)+
	MOVB	R1,(R0)+
	CALL	PCDT
	TST	R3
	BEQ	EPCDTR
	BITB	#SVALU,@R3
	BEQ	EPCDTR
1$:	MOVB	#':,R2
	CMPB	R2,@R5
	BNE	EPCDTR
	MOVB	#2,R0
	CALL	PCDT
	CALL	ALPHT
	BCS	4$
	INC	R5
	CALL	NUMBT
	BCS	2$
	CMPB	#'-,@R5
	BNE	ILVALU
2$:	MOVB	@R5,R2
	CALL	PCDT
	CALL	NUMBT
	BCS	2$
	MOVB	#'.,R2
	CMPB	R2,@R5
	BEQ	3$
	BITB	#DECVAL,@R3
	BEQ	1$
	INC	R5
3$:	DEC	R5
	CALL	PCDT
	BR	1$
4$:	MOVB	@R5,R2
	CALL	PCDT
5$:	CALL	ALPHT
	BCC	1$
	DEC	R0
	BLT	5$
	BR	4$
EPCDTR:	MOV	#-1,R2
PCDT:	MOVB	DSWOFF,R1
	CMPB	#MAXDSC,R1
	BLE	TCERR
	ADDR	STRANT,R1,ADD
	MOVB	R2,@R1
	INCB	DSWOFF
	RETURN
TCERR:	KMEROR	<Command string too complicated>
ILVALU:	KMEROR	<Invalid value specified with option>
CNFSWT:	KMEROR	<Conflicting options>
.SBTTL	SWITCH ACTION ROUTINES
ACTALL:	CMPB	#':,@R5
	BNE	ILVALU
	CALL	NUMBT
	BCS	1$
	CMPB	#'-,@R5
	BNE	ILVALU
1$:	CALL	MULSZ
	ADD	#STFLG,R0
	CMPB	#DTYP,@R0
	BGT	ILSWT1
	CMPB	#TOTYP,@R0
	BLT	ILSWT1
2$:	MOVB	#'],-(R0)
	SUB	#STFLG-FSZFLD-1,R0
	MOVB	#'[,(R0)+
	MOV	#5,R1
3$:	DEC	R1
	BLT	ILVALU
	MOVB	@R5,(R0)+
	CALL	NUMBT
	BCS	3$
	MOVB	#'.,-(SP)
	CALLR	OPTCHR
.ENABL	LSB
ACTFOT:	ADDR	FOTDV1,R0
	BR	2$
ACTSOT:	ADDR	SOTDV1,R0
	BR	1$
ACTTOT:	ADDR	TOTDV1,R0
1$:	CLRB	OFBFLG(R0)
2$:	TSTB	OFBFL2(R0)
	BNE	CNFSWT
	MOV	R4,-(SP)
	MOV	R0,R4
	CMPB	#':,@R5
	BNE	6$
	CALL	OUTSPEC
	TSTB	FNMFLD-FSIZ(R0)
	BNE	3$
	CMP	SAVORG,R0
	BEQ	ILVALU
	BR	7$
3$:	INCB	OFBFL2(R4)
4$:	MOVB	OFBTYP(R4),-(R0)
	INCB	OFBFLG(R4)
5$:	MOV	(SP)+,R4
	RETURN
6$:	CMP	#SOTYP,OFBTYP(R4)
	BNE	8$
	TSTB	QUALFL
	BNE	9$
	CALL	ACTPRI
7$:	TST	@R4
.ASSUME OFBDV1 EQ 0
	BNE	CNFSWT
	MOV	-FSIZ(R0),@R4
.ASSUME OFBDV1 EQ 0
	MOV	-FSIZ+2(R0),OFBDV2(R4)
	DECB	FILNUM
8$:	TSTB	QUALFL
	BEQ	5$
9$:	MOV	R4,R3
.ASSUME	OFBDV1 EQ 0
	CALL	SUBNAM
	BR	4$
MAKOFL:	MOV	R4,-(SP)
	INC	@SP
	MOVB	(R4)+,R4
	ADDR	OTBLK,R4,ADD
	TSTB	OFBFLG(R4)
	BNE	5$
	ADDR	SAVNM,R0
	MOV	R4,R3
.ASSUME	OFBDV1 EQ 0
	CALL	SUBNM1
	BR	4$
.DSABL	LSB
ACTNOO:	INCB	FOTFLG
	RETURN
REMSWT:	CLR	R4
	MOVB	NSWITS,R4
	DECB	NSWITS
	SUB	R0,R4
	BLOS	2$
	TSTB	-(R1)
1$:	MOV	R1,R3
	CMPB	(R1)+,(R1)+
	MOVB	@R1,@R3
	DECB	R4
	BNE	1$
2$:	RETURN
SAVNAM:	ADDR	SAVNM,R1
	MOV	R0,R2
	SUB	#FSIZ,R0
	MOV	#SAVNEN-SAVNM/2,R3
1$:	MOV	(R0)+,(R1)+
	DEC	R3
	BNE	1$
	RETURN
SUBNAM:	CALL	MULSZ
1$:	CMPB	#ITYP,STFLG(R0)
	BEQ	SUBNM1
	SUB	#FSIZ,R0
	BR	1$
SUBNM1:	MOV	R5,-(SP)
	MOV	R0,-(SP)
	MOV	R3,-(SP)
	ADDR	DUMYNM,R5
	CALL	OUTSPEC
	MOV	(SP)+,R5
	TST	@R5
	BEQ	1$
	MOV	(R5)+,-FSIZ(R0)
	MOV	(R5)+,-FSIZ+2(R0)
1$:	MOV	(SP)+,R5
	CMP	(R5)+,(R5)+
	MOV	(R5)+,FNMFLD-FSIZ(R0)
	MOV	(R5)+,FNMFLD+2-FSIZ(R0)
	MOV	(R5)+,FNMFLD+4-FSIZ(R0)
RSTTPT:	MOV	(SP)+,R5
	RETURN
.ENABL	LSB
ACTOUT:	CMPB	#':,@R5
	BEQ	OUTSPEC
	RETURN
ACTTER:	MOV	R5,-(SP)
	ADDR	$TTSPC,R5
	BR	3$
ACTPRI:	MOV	R5,-(SP)
	ADDR	$LPSPC,R5
3$:	CALL	OUTSPEC
	BR	RSTTPT
.DSABL	LSB
ACTNOR:	INCB	RUNFLG
	RETURN
.SBTTL	DCL FILE SPEC PROCESSOR
FSTARF	= 1
ESTARF	= 2
DSTARF	= 4
SPISPEC:MOV	(PC)+,R1
INSPEC:	CLR	R1
	CALL	MULSZI
INSPC1:	MOV	#DEFIEX-DOSREL,R3
	CALL	DOSPC1
	MOVB	#ITYP,(R0)+
	RETURN
.ENABL	LSB
SPOSPEC:MOV	(PC)+,R1
OUTSPEC:CLR	R1
	CALL	MULSZI
	MOV	#DEFOEX-DOSREL,R3
	CALL	DOSPC1
	CMPB	#'[,@R5
	BNE	4$
	MOVB	@R5,(R2)+
	CALL	NUMBT
	BCS	1$
	CMPB	#'-,@R5
	BNE	FERR
1$:	MOV	#5,R1
2$:	DEC	R1
	BLT	FERR
	MOVB	@R5,(R2)+
	CALL	NUMBT
	BCS	2$
3$:	CMPB	#'],@R5
	BNE	FERR
	MOVB	@R5,(R2)+
	DEC	R5
4$:	MOVB	#FOTYP,(R0)+
	RETURN
.DSABL	LSB
MULSZI:	INCB	FILNUM
MULSZ:	MOVB	FILNUM,R2
	CMPB	R2,NOSPEC
	BGT	FNERR
MULSZS:	CLR	R0
1$:	ADD	#FSIZ,R0
	DEC	R2
	BNE	1$
	ADDR	FILST-FSIZ,R0,ADD
	MOV	R0,(PC)+
SAVORG:	.WORD	0
	RETURN
	.ENABL	LSB
DOSPC1:	ADD	PC,R3
DOSREL:	ADDR	DEFDEV,R2
DOSPEC:	MOV	R5,TXTPSV
	MOV	R1,(PC)+
SPECTP:	 .WORD	0
	CALL	GETAS3
	MOVB	#':,(R0)+
	BCS	1$
	CMPB	#':,@R5
	BEQ	3$
1$:	CMP	-(R0),-(R0)
	TST	@R0
	BNE	2$
	CMPB	#'.,@R5
	BEQ	2$
	DECB	FILNUM
	TST	(SP)+
	CALLR	SCFAIL
2$:	MOV	(R2)+,(R0)+
	MOV	(R2)+,(R0)+
	MOV	TXTPSV,R5
3$:	MOV	R0,R2
	MOV	#6,R1
	CALL	GETASC
	BCS	FERR
	TST	@R2
	BNE	4$
	TST	SPECTP
	BEQ	4$
	BITB	#FSTARF,DEFILB
	BEQ	4$
	BICB	#$WILD0,DEFMSK
	MOVB	#'*,@R2
4$:	MOV	R0,R2
	CLR	(R2)+
	CLR	(R2)+
	TST	-6(R0)
	BEQ	7$
	MOV	(R3)+,@R0
	MOV	(R3)+,2(R0)
	CMPB	#'.,@R5
	BNE	5$
	MOVB	@R5,(R0)+
	CALL	GETAS3
	BCC	7$
FERR:	KMEROR	<Error in file spec>
FNERR:	KMEROR	<Too many files>
5$:	TST	@R0
	BNE	7$
	TST	SPECTP
	BEQ	7$
	BITB	#DSTARF,DEFILB
	BEQ	6$
	CMP	#'*,-6(R0)
	BEQ	7$
6$:	BITB	#ESTARF,DEFILB
	BEQ	7$
	BICB	#$WILD0,DEFMSK
	MOV	#".*,@R0
7$:	MOV	R2,R0
ZFALLF:	CLR	(R0)+
	CLR	(R0)+
	CLR	(R0)+
	CLRB	(R0)+
	RETURN
	.DSABL	LSB
$WILD0	= 100
	.ENABL	LSB
GETAS3:	MOV	#3,R1
	BR	GETASC
1$:	BICB	#$WILD0,DEFMSK
2$:	SUB	#1,R1
	BCS	5$
	MOVB	@R5,(R0)+
GETASC:	CALL	ALPHNT
	BCS	2$
	TST	SPECTP
	BEQ	3$
	CMPB	#'*,@R5
	BEQ	1$
	CMPB	#'%,@R5
	BEQ	1$
3$:	TST	(PC)+
4$:	CLRB	(R0)+
	DEC	R1
	BGE	4$
5$:	RETURN
.DSABL	LSB
.ENABL	LSB
DEFDV:	MOV	#DEFDEV-2$,R1
	BR	1$
DEFINX:	MOV	#DEFIEX-2$,R1
1$:	ADD	PC,R1
2$:	MOVB	(R4)+,R0
	SWAB	R0
	BISB	(R4)+,R0
	ADD	PC,R0
EXTREL	= .
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
	RETURN
.DSABL	LSB
SETISPC:CALL	DEFOSPC
	MOVB	#ITYP,@R0
	RETURN
DEFOSPC:MOVB	(R4)+,R1
	SWAB	R1
	BISB	(R4)+,R1
	ADD	PC,R1
DOUSTR	= .
	CALL	MULSZI
	MOV	#FSIZ,R2
1$:	MOVB	-(R1),(R0)+
	BNE	2$
	INC	R1
2$:	DEC	R2
	BNE	1$
	MOVB	#DTYP,-(R0)
	RETURN
.SBTTL	COMMAND GENERATOR
	.MACRO	EMIT	TEXT
	.NCHR	$TEMP1,<TEXT>
	.IF NE	$TEMP1
	JSR	R1,EMITIN
	.IF DIF	TEXT,ENDLIN
	.IF DIF	TEXT,ENDCMD
	.ASCII	\TEXT\
	.IF EQ	EMITIN-.&1
	.BYTE	0
	.ENDC
	.BYTE	-1
	.IFF
	.BYTE	3,0,200,-1
	.ENDC
	.IFF
	.BYTE	200,-1
	.ENDC
	.IFF
	CALL	EMITCH
	.ENDC
	.ENDM
CMDEXE:	CALL	CMDMAK
.IF DF	HJDB
	CALLR	BADCOM
.IFF
	CALLR	STRT
.ENDC
CMDMAK:	CLRB	GENFLG
	CLR	(PC)+
MEMNED:	 .WORD	0
	CALL	DOGEN
	MOV	MEMNED,R0
	CALL	DCLSPC
	SUB	R0,@SP
	SUB	R0,CSTPTR
	SUB	R0,(PC)+
CNMPTR:	 .WORD	0
	MOV	R1,R5
	DECB	GENFLG
DOGEN:
	EMIT	<R >
	MOVB	FORCEP,R0
	ADDR	CUSPTB,R1
1$:	DEC	R0
	BEQ	3$
2$:	TSTB	(R1)+
	BPL	2$
	BR	1$
3$:	EMIT
	EMIT	ENDLIN
	TSTB	NOCLNF
	BNE	RETPC
	MOVB	EXTXT,R1
	BEQ	4$
	ADDR	STRANT,R1,ADD
	EMIT
4$:	MOVB	#FOTYP,R4
	CALL	DOENT
	MOVB	LNKFLG,R0
	BISB	COMPFL,R0
	BNE	5$
	TSTB	TFLAG
	BMI	5$
	DECB	R4
	CALL	DOENT
	INCB	R4
5$:	INCB	R4
6$:	INCB	TFLAG
	BEQ	6$
	CALL	DOENT1
	CMPB	R4,#TOTYP
	BNE	5$
	EMIT	<=>
	INCB	R4
	CALL	DOENT
	CLR	R2
	CALL	DOSWIT
	EMIT	ENDLIN
	EMIT	ENDCMD
RETPC:	RETURN
DOENT:	CLRB	TFLAG
DOENT1:	ADDR	FILST-FSIZ,R1
	CLR	R2
1$:	ADD	#FSIZ,R1
2$:	INC	R2
	CMPB	R2,FILNUM
	BGT	RETPC
	CMPB	R4,STFLG(R1)
	BNE	1$
	TSTB	GENFLG
	BNE	3$
	MOV	EXEESC,R0
	BEQ	3$
	CMPB	#FOTYP,R4
	BNE	3$
	CALL	@R0
3$:	DECB	TFLAG
	BMI	4$
	EMIT	<,>
	BR	3$
4$:	EMIT
	CMPB	#ITYP,R4
	BNE	5$
	NEGB	TFLAG
5$:	MOV	R1,-(SP)
	MOV	R4,-(SP)
	CALL	DOSWIT
	MOV	(SP)+,R4
	MOV	(SP)+,R1
	BR	2$
DOSWIT:	MOVB	NSWITS,R3
	ADDR	TRANSW,R4
5$:	DEC	R3
	BMI	RETPC
	MOVB	(R4)+,R1
	CMPB	R2,(R4)+
	BNE	5$
	ADDR	STRANT,R1,ADD
	EMIT	</>
	EMIT
	BR	5$
.ENABL	LSB
EMITIN:	CALL	EMITCH
	RTS	R1
1$:	INC	MEMNED
	TSTB	GENFLG
	BEQ	EMITCH
.IF DF	HJDB
	.TTYOUT
.ENDC
	MOVB	R0,(R5)+
EMITCH:	MOVB	(R1)+,R0
	BEQ	EMITCH
	BPL	1$
	ASLB	R0
	BEQ	1$
	RETURN
.DSABL	LSB
	.MACRO	PROG	NAME,ARG
	.IF B	ARG
	.ASCII	/NAME/<-1>
	.ENDC
	$TEMP=$TEMP+1
	$$'NAME==$TEMP
	.ENDM
	$TEMP=0
CUSPTB:
	PROG	RESORC
	PROG	PIP
	PROG	DIR
	PROG	DUP
	PROG	LINK
	PROG	FORTRA
	PROG	MACRO
	PROG	DUMP
	PROG	LIBR
	PROG	SRCCOM
	PROG	FILEX
	PROG	DICOMP
	PROG	FORMAT
	PROG	BINCOM
	PROG	ERROUT
	PROG	QUEMAN
	PROG	BUP
	PROG	KED
	PROG	K52
	PROG	KEX
	PROG	UCL
	PROG	EDIT,NOTEXT
	PROG	TECO,NOTEXT
	.EVEN
CSPISPC:REQCOMMA
SPISPC:	SPISPEC
	GOTO	GSWIT
RINSPC:	INSPEC
	GOTO	GSWIT
ROUSPC:	OUTSPEC
	GOTO	GSWIT
SPOSPC:	REQBLNK
	SPOSPEC
GSWIT:	FLDBEG
	OPTBLNK
	SWITLST
	ITEREND
	SRET
GSWIT1:	OPTBLNK
	SWITLST
	SRET
	.EVEN
.SBTTL	DCL STORAGE AREAS
.ENABL	CRF
IDEPTH	= 10
STKPTR:	.WORD	0
	.WORD	-1
	.WORD	0
	.WORD	0
ISTACK:	.REPT	3*IDEPTH
	.WORD	55555
	.ENDR
TXTPTR:	.WORD	0
INTCLR:
DEFIEX:	.WORD	0,0
DEFOEX:	.WORD	0,0
EXEESC:	.WORD	0
FORCEP:	.WORD	0
.IF EQ	1
MECLPT:	.BYTE
.ENDC
NSWITS:	.BYTE
LNKFLG:	.BYTE
QUALFL:	.BYTE
EXTXT:	.BYTE
SCNTFL:	.BYTE
FILNUM:	.BYTE
DSWOFF:	.BYTE
DEFMSK:	.BYTE
DEFILB:	.BYTE
EXEPT2:	.BYTE
ENDCLR:
TFLAG:	.BYTE
GENFLG:	.BYTE
NONUMS:	.BYTE
NOSPEC:	.BYTE
SUBCNT:	.BYTE
EXEFLG:	.BYTE
	.EVEN
ACTCNT	= 37
ACTONS:	.BLKW	ACTCNT
RUNFLG:	.BYTE
COMPFL:	.BYTE
NOCLNF:	.BYTE
EXEDEL:	.BYTE
DEFDEV:	.ASCIZ	'DK:'
..CDEV	== .
$DK:	.ASCIZ	'DK:'
$SY:	.ASCIZ	'SY:'
$.SYS:	.ASCII	\.SYS\
$.LST:	.ASCII	\.LST\
$.BOT:	.ASCII	\.BOT\
$COMPSTR:
	TYPDEF	FOR,FORTRAN,MAC,MACRO,DBL,DICOMP
SAVNM:
SAVDV1:	.WORD
SAVDV2:	.WORD
SAVNM1:	.WORD
SAVNM2:	.WORD
SAVNM3:	.WORD
SAVEX1:	.WORD
SAVEX2:	.WORD
SAVNEN:	.WORD	0
FSIZ	= 22.
FNMFLD	= 4.
FTPFLD	= 10.
FSZFLD	= 14.
STFLG	= 21.
FILST:	.BLKB	9.*FSIZ
DTYP	= -5
FOTYP	= -4
SOTYP	= -3
TOTYP	= -2
ITYP	= -1
OTBLK:
TOTDV1:	.WORD	0
TOTDV2:	.WORD	0
TOTFLG:	.BYTE	0
TOTFL2:	.BYTE	0
	.WORD	TOTYP
SOTDV1:	.WORD	0
SOTDV2:	.WORD	0
SOTFLG:	.BYTE	0
SOTFL2:	.BYTE	0
	.WORD	SOTYP
FOTDV1:	.WORD	0
FOTDV2:	.WORD	0
FOTFLG:	.BYTE	0
FOTFL2:	.BYTE	0
	.WORD	FOTYP
OFBDV1	= 0
OFBDV2	= 2
OFBFLG	= 4
OFBFL2	= 5
OFBTYP	= 6
OFBSIZ	= 10
INPFN:	.BLKW	4
TRANSW:	.BLKW	12.
MAXSWT	= .-TRANSW/2
.IF EQ	1
MECLST:	.BLKB	60
.ENDC
TMPAREA:.BLKB	16.
STRANT:	.BLKB	50.
MAXDSC	= .-STRANT
.IF EQ	1
MEXLST:	.BYTE	XX,YY,ZZ,...
.ENDC
	BACKWT	$TTSPC,<TT:>
	BACKWT	$LPSPC,<LP:>
	BACKWT	$DKSPC,<DK:>
	BACKWT	$LPWLD,<LP:*.*>
	BACKWT	DUMYNM,<ODT>
$FROM:	PTXT	<From>
$TO:	PTXT	<To  >
$JOB:	PTXT	<Jobname>
$FILEE:	PTXT	<File>
$FILE:	PTXT	<Files>
$DEVICE:PTXT	<Device>
$DVOFL:	PTXT	<Device or file>
$FILE1:	PTXT	<File 1>
$FILE2:	PTXT	<File 2>
$LIBR:	PTXT	<Library>
$PHYSIC:PTXT	<Device  name>
$LOGICA:PTXT	<Logical name>
	.EVEN
.SBTTL	DCL SUPPORT ROUTINES
.ENABL	LSB
ALPHT:
	CMPB	#'A,-(R5)
	BHI	1$
	CMPB	@R5,#'Z+1
	BLO	1$
	CMPB	#'a,@R5
	BHI	1$
	CMPB	@R5,#'z+1
1$:	RETURN
ALPHNT:	CALL	ALPHT
	BCS	1$
	INC	R5
NUMBT:	CMPB	#'0,-(R5)
	BHI	2$
	CMPB	@R5,#'9+1
2$:	RETURN
.DSABL	LSB
.SBTTL	COMMAND LIST
.MACRO	FLGTXT	TXTARG
.DSABL	CRF
	$TEMP=100
	$TEMP2=1
	.IRPC	CHAR,<TXTARG>
	.IF IDN	CHAR,_
	$TEMP=0
	.IFF
	.IF EQ	$TEMP2
	.BYTE	$TEMP1+$TEMP
	.ENDC
	$TEMP1=''CHAR&77
	$TEMP2=0
	.ENDC
	.ENDR
	$TEMP=0
	.BYTE	$TEMP1+200
.ENABLE	CRF
.ENDM
COMDST:
	CMDTBL	R
	CMDTBL	RUN
	CMDTBL	E
	CMDTBL	D
	CMDTBL	B
	CMDTBL	COPY
	CMDTBL	DATE
	CMDTBL	EDIT
	CMDTBL	DIRECTORY
	CMDTBL	TYPE
	CMDTBL	DELETE
	CMDTBL	PROTECT
	CMDTBL	UNPROTECT
	CMDTBL	TIME
	CMDTBL	GT
	CMDTBL	LINK
	CMDTBL	PRINT
	CMDTBL	EXECUTE
	CMDTBL	REENTER
	CMDTBL	COMPILE
	CMDTBL	RESET
	CMDTBL	LOAD
	CMDTBL	CLOSE
	CMDTBL	BOOT
	CMDTBL	START
	CMDTBL	ASSIGN
	CMDTBL	RENAME
	CMDTBL	SET
	CMDTBL	SQUEEZE
	CMDTBL	UNLOAD
	CMDTBL	GET
	CMDTBL	DEASSIGN
	CMDTBL	FORTRAN
	CMDTBL	MACRO
	CMDTBL	HELP
	CMDTBL	DIBOL
	CMDTBL	FRUN
	CMDTBL	RESUME
	CMDTBL	SUSPEND
	CMDTBL	SAVE
	CMDTBL	SHOW
	CMDTBL	INITIALIZE
	CMDTBL	DIFFERENCES
	CMDTBL	DUMP
	CMDTBL	INSTALL
	CMDTBL	REMOVE
	CMDTBL	LIBRARY
	CMDTBL	SRUN
	CMDTBL	ABORT
	CMDTBL	CREATE
	CMDTBL	FORMAT
	CMDTBL	BACKUP
	CMDTBL	MOUNT
	CMDTBL	DISMOUNT
	CMDTBL	TECO
	CMDTBL	MAKE
	CMDTBL	MUNG
.IF EQ	1
		CMDTBL	SUBMIT
.ENDC
COMLST:
	FLGTXT	<R>
	FLGTXT	<RU_N>
	FLGTXT	<E>
	FLGTXT	<D>
	FLGTXT	<B>
	FLGTXT	<COP_Y>
	FLGTXT	<DA_TE>
	FLGTXT	<ED_IT>
	FLGTXT	<DIR_ECTORY>
	FLGTXT	<TY_PE>
	FLGTXT	<DEL_ETE>
	FLGTXT	<PRO_TECT>
	FLGTXT	<UNP_ROTECT>
	FLGTXT	<TI_ME>
	FLGTXT	<GT_>
	FLGTXT	<LIN_K>
	FLGTXT	<PRI_NT>
	FLGTXT	<EX_ECUTE>
	FLGTXT	<REE_NTER>
	FLGTXT	<COM_PILE>
	FLGTXT	<RESE_T>
	FLGTXT	<LO_AD>
	FLGTXT	<CL_OSE>
	FLGTXT	<BO_OT>
	FLGTXT	<ST_ART>
	FLGTXT	<AS_SIGN>
	FLGTXT	<REN_AME>
	FLGTXT	<SE_T>
	FLGTXT	<SQ_UEEZE>
	FLGTXT	<UNL_OAD>
	FLGTXT	<GE_T>
	FLGTXT	<DEA_SSIGN>
	FLGTXT	<FORT_RAN>
	FLGTXT	<MAC_RO>
	FLGTXT	<H_ELP>
	FLGTXT	<DIB_OL>
	FLGTXT	<FR_UN>
	FLGTXT	<RESU_ME>
	FLGTXT	<SUS_PEND>
	FLGTXT	<SA_VE>
	FLGTXT	<SH_OW>
	FLGTXT	<INI_TIALIZE>
	FLGTXT	<DIF_FERENCES>
	FLGTXT	<DU_MP>
	FLGTXT	<INS_TALL>
	FLGTXT	<REM_OVE>
	FLGTXT	<LIB_RARY>
	FLGTXT	<SR_UN>
	FLGTXT	<AB_ORT>
	FLGTXT	<CR_EATE>
	FLGTXT	<FORM_AT>
	FLGTXT	<BAC_KUP>
	FLGTXT	<MO_UNT>
	FLGTXT	<DIS_MOUNT>
	FLGTXT	<TE_CO>
	FLGTXT	<MAK_E>
	FLGTXT	<MU_NG>
.IF EQ	1
		FLGTXT	<SUB_MIT>
.ENDC
	.BYTE 0
	.EVEN
.SBTTL	STACK, AND SPACE FOR RESIDENT OVERLAY
CMDFLG:	.BYTE	0
ATFLAG:	.BYTE	0
.IIF EQ LNK$IF,	.NLIST
.IF NE	LNK$IF
OLDLIN:	.WORD	0
KBFLN:	.WORD	0
.ENDC
.IIF EQ LNK$IF,	.LIST
.IF NDF	IFBFSZ
IFBFSZ	=	1
.ENDC
SVSTSZ	=	10.
IFSVSZ	=	6+SVSTSZ
.IF NDF KMCBFLN
KMCBFLN = 200.
.ENDC
	.WORD	0
KMCBND:	.BLKB	KMCBFLN
KMCBUF:
	.WORD	SPACE
	.ASCII	\S\
	.EVEN
OVLIOB:	.WORD	OVLY-KMON/1000
	.WORD	0
	.WORD	400*OVLYSZ
	.WORD	0
BASE:	.WORD	0
GETCNT:	.WORD	0
SAVSWT:	.WORD	0
BLOKWG:	.WORD	-1
SYSIOB:	BSS	3
OLDHAN:	.BLKW	1
BLOCK:	.BLKW	8.
..INDN	== .
NMIND:	.RAD50	"SY "
INDCNT::.WORD	4$-3$
3$:	.ASCII	/RUN /
	.BLKB	3
	.ASCIZ	/:IND/
4$:	.EVEN
.IF NE	CONT$N
KCTNU:
CTNUFG:	.WORD	0
CTNUIF:	.WORD	2$-1$
1$:	.ASCII	/@CONTN/
	.BYTE	SUFX$S
2$:	.EVEN
.ENDC
KMSTK::	.BLKW	60.
KMSTKE::
. = .-KMON+777/1000*1000+KMON
KMSTAK::
. = KMSTK
.REPT	KMSTAK-KMSTK/2
	.WORD	52525
.ENDR
OVLY:	.BLKW	400*OVLYSZ
IFBUFR	= OVLY+1000
KMONSZ	== .-KMON/1000
KMSIZE	== KMONSZ*1000
KMLEN	== KMONSZ*400
.IF EQ	MMG$T!SYT$K
  .IF GT	KMONSZ-20
 KMSZER	= 1000*OVLYSZ+KMSTKE-KMON-20000/2
	.ERROR	KMSZER
 .ENDC
.ENDC
.	= OVLY
OVLYST	= .
.MACRO	OVCMD	CMD
	N.'CMD=1
	O.'CMD=.-OVLYST
CMD:
.ENDM
.IF NE	DIRE$$
	OVCMD	DIRECTORY
	CALLR	DIR1
.ENDC
.IF NE	COPY$$
.SBTTL	COPY COMMAND
	SYNTAX	COPY
	PROMPT	$FROM
	SCALL	GSWIT,<1>
	REQBLNK
	DEFILE	FSTARF+ESTARF
	SCALL	SPISPC,<1,2,4>
	FLDBEG	OFLD1
	SCALL	CSPISPC,<1,2,4>
	OPTEND
	FLDBEG
	SCALL	CSPISPC,<1,2,4>
	ITEREND
	GOTO	OFLD2
OFLD1:	FLDBEG
	REQPLUS
	SCALL	SPISPC,<1,2,4>
	SETDEF	CON
	ITEREND
OFLD2:	PROMPT	$TO
	SCALL	SPOSPC,<1,2,3>
	EOLSEQ	PIP
	WILDEF	PIP,W,LOG,ASK,NLG,AYS,$WILD0
	COMPDEF
	APLYDEF	PIP,LOG,W
	APLYDEF	PIP,ASK,Q
	APLYDEF	PIP,CON,U
	APLYDEF	DUP,AYS,Y
	APLYDEF	FILEX,ASK,Q
	APLYDEF	DUP,WAI,W
	APLYDEF	PIP,WAI,E
	APLYDEF	FILEX,WAI,W
	END
 SWITS	COPY
SWIT	LOG		1	PIP	-	- LOG
SWIT	QUERY		1	-	-	- ASK
SWIT	REPLACE		1	-	-	-
SWIT	PROTECTION	1	-	-	F
 ENDNO
SWIT	CONCATENATE	1	PIP	-	- CON
SWIT	PREDELETE	1	PIP	-	O
SWIT	DELETED		1	PIP	-	D
SWIT	IGNORE		1	-	-	G
SWIT	ASCII		1	-	-	A
SWIT	BINARY		1	-	-	B
SWIT	IMAGE		1	-	-	IMA
SWIT	PACKED		1	FILEX	-	P
SWIT	POSITION	2	PIP	-	M,,DVAL
SWIT	EXCLUDE		1	PIP	-	P
SWIT	SLOWLY		1	PIP	-	S
SWIT	NEWFILES	1	PIP	-	C
SWIT	BEFORE		1	PIP	-	J,,DVAL
SWIT	DATE		1	PIP	-	C,,DVAL
SWIT	SINCE		1	PIP	-	I,,DVAL
SWIT	SETDATE		1	PIP	-	T,,DVAL
SWIT	SYSTEM		1	PIP	-	Y
SWIT	INFORMATION	1	PIP	-	X
SWIT	MULTIVOLUME	1	PIP	-	V
SWIT	BOOT		1	-	DUP	U,,VAL
SWIT	DEVICE		1	-	DUP	I
SWIT	VERIFY		1	-	-	H
SWIT	OWNER		2	FILEX	-	OWN
SWIT	FILES		1	DUP	-	F
SWIT	WAIT		1	-	-	- WAI
SWIT	DOS		2	-	FILEX	S
SWIT	TOPS		2	-	FILEX	T
SWIT	INTERCHANGE	2	-	FILEX	U,,DVAL
SWIT	START		2	DUP	-	G,,DVAL
SWIT	ALLOCATE	3	-	-	ALL
SWIT	END		4	DUP	-	E,,DVAL
SWIT	RETAIN		1	DUP	-	R
 NOS
SWIT	NOLOG		1	-	-	- NLG
SWIT	NOQUERY		1	-	-	- AYS
SWIT	NOREPLACE	1	PIP	-	N
SWIT	NOPROTECTION	1	PIP	-	Z
 ENDS
	OVCMD	COPY
	CLR	(PC)+
IMAFLG:	 .WORD	0
	ITBLE	7
	CALL	INITIT
	MOV	FORCEP,R0
	BIC	#^C<37>,R0
	CMP	#<$$PIP>,R0
	BNE	2$
	MOV	IMAFLG,R0
	BEQ	2$
	ADDR	TRANSW-1,R1
	ADD	R0,R1
	MOVB	(R1)+,R2
	ADDR	STRANT,R2,ADD
	TSTB	(R2)+
	CALL	REMSWT
2$:	CALLR	CMDEXE
.ENDC
.IF NE	DIRE$$
.SBTTL	DIRECTORY COMMAND
	SYNTAX	DIRECTORY
	DEFILE	ESTARF+FSTARF
	SCALL	GSWIT,<1>
	FLDBEG	OFLD3
	REQBLNK
	SCALL	SPISPC,<1,2>
	OPTEND
	FLDBEG	OFLD4
	SCALL	CSPISPC,<1,2>
	ITEREND
OFLD3:	SETISPC	$DKSPC
OFLD4:	DEFOSPC	$TTSPC
	EOLSEQ	DIR
	APLYDEF	FILEX,FST,L
	COMPDEF
	APLYDEF	DIR,FST,F
	APLYDEF	FILEX,FST,F
	END
 SWITS	DIRECTORY
SWIT	PROTECTION	1	DIR	-	T
 ENDNO
SWIT	BLOCKS		1	DIR	-	B
SWIT	POSITION	1	DIR	-	B
SWIT	BRIEF		1	-	-	- FST
SWIT	FAST		1	-	-	- FST
SWIT	FULL		1	DIR	-	E
SWIT	PRINTER		1	-	-	PRI
SWIT	TERMINAL	1	-	-	TER
SWIT	OUTPUT		1	-	-	OUT
SWIT	SUMMARY		1	DIR	-	N
SWIT	COLUMNS		1	DIR	-	C,,DVAL
SWIT	ORDER		1	DIR	-	S,,VAL
SWIT	SORT		1	DIR	-	S,,VAL
SWIT	EXCLUDE		1	DIR	-	P
SWIT	ALPHABETIZE	1	DIR	-	A
SWIT	OCTAL		1	DIR	-	O
SWIT	NEWFILES	1	DIR	-	D
SWIT	DATE		1	DIR	-	D,,DVAL
SWIT	SINCE		1	DIR	-	J,,DVAL
SWIT	BEFORE		1	DIR	-	K,,DVAL
SWIT	FREE		1	DIR	-	M
SWIT	INTERCHANGE	1	-	FILEX	U
SWIT	DOS		1	-	FILEX	S
SWIT	TOPS		1	-	FILEX	T
SWIT	OWNER		2	FILEX	-	OWN
SWIT	BADBLOCKS	1	-	DUP	K
SWIT	FILES		1	DUP	-	F
SWIT	WAIT		1	-	-	W
SWIT	START		1	DUP	-	G,,DVAL
SWIT	END		1	DUP	-	E,,DVAL
SWIT	VOLUMEID	1	-	-	V,,VAL
SWIT	DELETED		1	DIR	-	Q
SWIT	REVERSE		1	DIR	-	R
SWIT	BEGIN		2	DIR	-	G
SWIT	ALLOCATE	1	-	-	ALL
SWIT	BACKUP		1	-	BUP	L
 NOS
SWIT	NOPROTECTION	1	DIR	-	U
 ENDS
DIR1:	ITBLE	8.
	CALL	INITIT
	MOV	FORCEP,R0
	BIC	#^C<37>,R0
	CMP	#$$DIR,R0
	BNE	2$
	MOV	#'W,R3
	CLR	R0
	ADDR	TRANSW-1,R1
1$:	TSTB	(R1)+
	INC	R0
	CMPB	R0,NSWITS
	BGT	2$
	MOVB	(R1)+,R2
	ADDR	STRANT,R2,ADD
	CMPB	@R2,R3
	BNE	1$
	CALLR	ILLOPT
2$:	CALLR	CMDEXE
.ENDC
.IF NE	DIRE$$!COPY$$
OVAOWN:	CMPB	#':,@R5
	BNE	2$
	CMPB	#'[,-(R5)
	BNE	2$
	MOVB	DSWOFF,EXTXT
1$:	MOVB	@R5,R2
	BEQ	2$
	CALL	PCDT
	DEC	R5
	CMPB	#'],R2
	BNE	1$
	CALLR	EPCDTR
2$:	CALLR	ILVALU
OVAIMA:	MOVB	NSWITS,IMAFLG
	INC	IMAFLG
	MOVB	#'I,R2
	CLR	R1
	CLR	R3
	CALLR	ESWIT
.ENDC
.IF NE	DIRE$$!COPY$$
	.IRP	NUM,<\$OPTX>
OPTX'NUM::
	.ENDR
	.BYTE	-1
	.DSABL	CRF
	$SCNT=0
	SWTDEF	<LOG>
	FLGTXT		<L_OG>
	SWTDEF	<QUERY>
	FLGTXT		<Q_UERY>
	SWTDEF	<REPLACE>
	FLGTXT		<REP_LACE>
	SWTDEF	<PROTECTION>
	FLGTXT		<PRO_TECTION>
	SWTDEF	<CONCATENATE>
	FLGTXT		<C_ONCATENATE>
	SWTDEF	<PREDELETE>
	FLGTXT		<PRE_DELETE>
	SWTDEF	<DELETED>
	FLGTXT		<DEL_ETED>
	SWTDEF	<IGNORE>
	FLGTXT		<IG_NORE>
	SWTDEF	<ASCII>
	FLGTXT		<AS_CII>
	SWTDEF	<BINARY>
	FLGTXT		<BI_NARY>
	SWTDEF	<IMAGE>
	FLGTXT		<IM_AGE>
	SWTDEF	<PACKED>
	FLGTXT		<PA_CKED>
	SWTDEF	<POSITION>
	FLGTXT		<PO_SITION>
	SWTDEF	<EXCLUDE>
	FLGTXT		<EX_CLUDE>
	SWTDEF	<SLOWLY>
	FLGTXT		<SL_OWLY>
	SWTDEF	<NEWFILES>
	FLGTXT		<NE_WFILES>
	SWTDEF	<BEFORE>
	FLGTXT		<BEF_ORE>
	SWTDEF	<DATE>
	FLGTXT		<DA_TE>
	SWTDEF	<SINCE>
	FLGTXT		<SI_NCE>
	SWTDEF	<SETDATE>
	FLGTXT		<SET_DATE>
	SWTDEF	<SYSTEM>
	FLGTXT		<SY_STEM>
	SWTDEF	<INFORMATION>
	FLGTXT		<INF_ORMATION>
	SWTDEF	<MULTIVOLUME>
	FLGTXT		<M_ULTIVOLUME>
	SWTDEF	<BOOT>
	FLGTXT		<BO_OT>
	SWTDEF	<DEVICE>
	FLGTXT		<DEV_ICE>
	SWTDEF	<VERIFY>
	FLGTXT		<VE_RIFY>
	SWTDEF	<OWNER>
	FLGTXT		<OW_NER>
	SWTDEF	<FILES>
	FLGTXT		<FI_LES>
	SWTDEF	<WAIT>
	FLGTXT		<W_AIT>
	SWTDEF	<DOS>
	FLGTXT		<DO_S>
	SWTDEF	<TOPS>
	FLGTXT		<TO_PS>
	SWTDEF	<INTERCHANGE>
	FLGTXT		<INT_ERCHANGE>
	SWTDEF	<START>
	FLGTXT		<ST_ART>
	SWTDEF	<ALLOCATE>
	FLGTXT		<ALL_OCATE>
	SWTDEF	<END>
	FLGTXT		<EN_D>
	SWTDEF	<BLOCKS>
	FLGTXT		<BL_OCKS>
	SWTDEF	<BRIEF>
	FLGTXT		<BR_IEF>
	SWTDEF	<FAST>
	FLGTXT		<FA_ST>
	SWTDEF	<FULL>
	FLGTXT		<FU_LL>
	SWTDEF	<RETAIN>
	FLGTXT		<RET_AIN>
	SWTDEF	<PRINTER>
	FLGTXT		<PRI_NTER>
	SWTDEF	<TERMINAL>
	FLGTXT		<TE_RMINAL>
	SWTDEF	<OUTPUT>
	FLGTXT		<OU_TPUT>
	SWTDEF	<SUMMARY>
	FLGTXT		<SU_MMARY>
	SWTDEF	<COLUMNS>
	FLGTXT		<C_OLUMNS>
	SWTDEF	<ORDER>
	FLGTXT		<OR_DER>
	SWTDEF	<SORT>
	FLGTXT		<SO_RT>
	SWTDEF	<ALPHABETIZE>
	FLGTXT		<ALP_HABETIZE>
	SWTDEF	<OCTAL>
	FLGTXT		<OC_TAL>
	SWTDEF	<FREE>
	FLGTXT		<FR_EE>
	SWTDEF	<BADBLOCKS>
	FLGTXT		<BAD_BLOCKS>
	SWTDEF	<VOLUMEID>
	FLGTXT		<VO_LUMEID>
	SWTDEF	<REVERSE>
	FLGTXT		<REV_ERSE>
	SWTDEF	<BEGIN>
	FLGTXT		<BEG_IN>
	SWTDEF	<BACKUP>
	FLGTXT		<BAC_KUP>
	.EVEN
	.ENABL	CRF
	NEXTL
.ENDC
.IIF GT	.-KMON-KMSIZE,.ERROR
OVSZRS	== . - OVLYST
.	= KMON + KMSIZE
.IIF DF	NLKMON,	.LIST
                                                                                                                                                                                        